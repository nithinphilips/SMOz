/*************************************************************************
 *  SMOz (Start Menu Organizer)
 *  Copyright (C) 2006 Nithin Philips
 *
 *  This program is free software; you can redistribute it and/or
 *  modify it under the terms of the GNU General Public License
 *  as published by the Free Software Foundation; either version 2
 *  of the License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation,Inc.,59 Temple Place - Suite 330,Boston,MA 02111-1307, USA.
 *
 *  Author            :  Nithin Philips <spikiermonkey@users.sourceforge.net>
 *  Original FileName :  Writer.cs
 *  Created           :  Fri Mar 31 2006
 *  Description       :  
 *************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Windows.Forms;

namespace SMOz.Ini
{
    public class IniWriter{

	   public IniWriter() {
		  sections = new Dictionary<string, IniSection>();
	   }

	   string comment;

	   public string Comment {
		  get { return comment; }
		  set { comment = value; }
	   }

	   Dictionary<string, IniSection> sections;
	   private IniSection GetSection(string name) {
		  IniSection result;
		  if (!sections.TryGetValue(name.ToLower(), out result)) {
			 result = new IniSection(name);
			 sections.Add(name.ToLower(), result);
		  }
		  return result;
	   }

	   public void AddValue(string value, string section) {
		  GetSection(section).Add(value);
	   }


	   public string Build(){
		  if (string.IsNullOrEmpty(this.comment)) {
			 return Build(string.Format("Generated by {0} v{1}. {2} {3} UTC.", Application.ProductName, Application.ProductVersion, DateTime.UtcNow.ToLongDateString(), DateTime.UtcNow.ToLongTimeString()));
		  } else {
			 return Build(this.comment);
		  }
	   }

	   private string Build(string comments) {
		  StringBuilder builder = new StringBuilder();
		  builder.Append("# " + comments + Environment.NewLine + Environment.NewLine);
		  foreach (IniSection section in sections.Values) {
			 builder.Append("[" + section.Name + "]" + Environment.NewLine);
			 for (int i = 0; i < section.Count; i++) {
				builder.Append(section[i] + Environment.NewLine);
			 }
			 builder.Append(Environment.NewLine);
		  }
		  return builder.ToString();
	   }

	   public void Save(string fileName) {
		  using (FileStream stream = new FileStream(fileName, FileMode.Create, FileAccess.Write, FileShare.None)) {
			 Save(stream);
			 stream.Flush();
		  }
	   }

	   public void Save(Stream stream) {
		  string data = Build();
		  byte[] buffer = new byte[data.Length];
		  Encoding.UTF8.GetBytes(data, 0, data.Length, buffer, 0);
		  stream.Write(buffer, 0, buffer.Length);
	   }
    }
}
