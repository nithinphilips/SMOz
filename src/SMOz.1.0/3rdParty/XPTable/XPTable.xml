<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XPTable</name>
    </assembly>
    <members>
        <member name="T:XPTable.Win32.TRACKMOUSEEVENT">
            <summary>
            The TRACKMOUSEEVENT structure is used by the TrackMouseEvent function 
            to track when the mouse pointer leaves a window or hovers over a window 
            for a specified amount of time
            </summary>
        </member>
        <member name="F:XPTable.Win32.TRACKMOUSEEVENT.cbSize">
            <summary>
            Specifies the size of the TRACKMOUSEEVENT structure
            </summary>
        </member>
        <member name="F:XPTable.Win32.TRACKMOUSEEVENT.dwFlags">
            <summary>
            Specifies the services requested
            </summary>
        </member>
        <member name="F:XPTable.Win32.TRACKMOUSEEVENT.hwndTrack">
            <summary>
            Specifies a handle to the window to track
            </summary>
        </member>
        <member name="F:XPTable.Win32.TRACKMOUSEEVENT.dwHoverTime">
            <summary>
            Specifies the hover time-out in milliseconds
            </summary>
        </member>
        <member name="M:XPTable.Win32.TRACKMOUSEEVENT.#ctor">
            <summary>
            Creates a new TRACKMOUSEEVENT struct with default settings
            </summary>
        </member>
        <member name="T:XPTable.Themes.TextBoxParts">
            <summary>
            Represents the different parts of a TextBox that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.TextBoxParts.EditText">
            <summary>
            The TextBox's border and background
            </summary>
        </member>
        <member name="T:XPTable.Renderers.FlatHeaderRenderer">
            <summary>
            A HeaderRenderer that draws flat Column headers
            </summary>
        </member>
        <member name="T:XPTable.Renderers.HeaderRenderer">
            <summary>
            Base class for Renderers that draw Column headers
            </summary>
        </member>
        <member name="T:XPTable.Renderers.Renderer">
            <summary>
            Base class for Renderers
            </summary>
        </member>
        <member name="T:XPTable.Renderers.IRenderer">
            <summary>
            Exposes common methods provided by renderers
            </summary>
        </member>
        <member name="P:XPTable.Renderers.IRenderer.ClientRectangle">
            <summary>
            Gets a Rectangle that represents the client area of the object 
            being rendered
            </summary>
        </member>
        <member name="P:XPTable.Renderers.IRenderer.Bounds">
            <summary>
            Gets or sets a Rectangle that represents the size and location 
            of the object being rendered
            </summary>
        </member>
        <member name="P:XPTable.Renderers.IRenderer.Font">
            <summary>
            Gets or sets the font of the text displayed by the object being 
            rendered
            </summary>
        </member>
        <member name="P:XPTable.Renderers.IRenderer.ForeColor">
            <summary>
            Gets or sets the foreground color of the object being rendered
            </summary>
        </member>
        <member name="P:XPTable.Renderers.IRenderer.BackColor">
            <summary>
            Gets or sets the background color for the object being rendered
            </summary>
        </member>
        <member name="P:XPTable.Renderers.IRenderer.Alignment">
            <summary>
            Gets or sets how the Renderers contents are aligned horizontally
            </summary>
        </member>
        <member name="P:XPTable.Renderers.IRenderer.LineAlignment">
            <summary>
            Gets or sets how the Renderers contents are aligned vertically
            </summary>
        </member>
        <member name="F:XPTable.Renderers.Renderer.stringFormat">
            <summary>
            A StringFormat object that specifies how the Renderers 
            contents are drawn
            </summary>
        </member>
        <member name="F:XPTable.Renderers.Renderer.backBrush">
            <summary>
            The brush used to draw the Renderers background
            </summary>
        </member>
        <member name="F:XPTable.Renderers.Renderer.foreBrush">
            <summary>
            The brush used to draw the Renderers foreground
            </summary>
        </member>
        <member name="F:XPTable.Renderers.Renderer.bounds">
            <summary>
            A Rectangle that specifies the size and location of the Renderer
            </summary>
        </member>
        <member name="F:XPTable.Renderers.Renderer.font">
            <summary>
            The Font of the text displayed by the Renderer
            </summary>
        </member>
        <member name="F:XPTable.Renderers.Renderer.BorderWidth">
            <summary>
            The width of a Cells border
            </summary>
        </member>
        <member name="M:XPTable.Renderers.Renderer.#ctor">
            <summary>
            Initializes a new instance of the Renderer class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.Renderer.Dispose">
            <summary>
            Releases the unmanaged resources used by the Renderer and 
            optionally releases the managed resources
            </summary>
        </member>
        <member name="M:XPTable.Renderers.Renderer.SetBackBrushColor(System.Drawing.Color)">
            <summary>
            Sets the color of the brush used to draw the background
            </summary>
            <param name="color">The color of the brush</param>
        </member>
        <member name="M:XPTable.Renderers.Renderer.SetForeBrushColor(System.Drawing.Color)">
            <summary>
            Sets the color of the brush used to draw the foreground
            </summary>
            <param name="color">The color of the brush</param>
        </member>
        <member name="P:XPTable.Renderers.Renderer.ClientRectangle">
            <summary>
            Gets the rectangle that represents the client area of the Renderer
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.Bounds">
            <summary>
            Gets or sets the size and location of the Renderer
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.Font">
            <summary>
            Gets or sets the font of the text displayed by the Renderer
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.BackBrush">
            <summary>
            Gets the brush used to draw the Renderers background
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.ForeBrush">
            <summary>
            Gets the brush used to draw the Renderers foreground
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.ForeColor">
            <summary>
            Gets or sets the foreground Color of the Renderer
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.BackColor">
            <summary>
            Gets or sets the background Color of the Renderer
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.StringFormat">
            <summary>
            Gets or sets a StringFormat object that specifies how the Renderers 
            contents are drawn
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.Trimming">
            <summary>
            Gets or sets a StringTrimming enumeration that indicates how text that 
            is drawn by the Renderer is trimmed when it exceeds the edges of the 
            layout rectangle
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.Alignment">
            <summary>
            Gets or sets how the Renderers contents are aligned horizontally
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.LineAlignment">
            <summary>
            Gets or sets how the Renderers contents are aligned vertically
            </summary>
        </member>
        <member name="P:XPTable.Renderers.Renderer.VisualStylesEnabled">
            <summary>
            Gets whether Visual Styles are enabled for the application
            </summary>
        </member>
        <member name="T:XPTable.Renderers.IHeaderRenderer">
            <summary>
            Exposes common methods provided by Column header renderers
            </summary>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnPaintHeader(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the PaintHeader event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnMouseEnter(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnMouseLeave(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnMouseUp(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnMouseDown(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnMouseMove(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnClick(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the Click event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.IHeaderRenderer.OnDoubleClick(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the DoubleClick event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.#ctor">
            <summary>
            Initializes a new instance of the HeaderRenderer class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.CalcImageRect">
            <summary>
            Returns a Rectangle that represents the size and location of the Image 
            displayed on the ColumnHeader
            </summary>
            <returns>A Rectangle that represents the size and location of the Image 
            displayed on the ColumnHeader</returns>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.CalcSortArrowRect">
            <summary>
            Returns a Rectangle that represents the size and location of the sort arrow
            </summary>
            <returns>A Rectangle that represents the size and location of the sort arrow</returns>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnMouseEnter(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnMouseLeave(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnMouseUp(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnMouseDown(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnMouseMove(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnClick(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the Click event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnDoubleClick(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the DoubleClick event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnPaintHeader(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the PaintHeader event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnPaintBackground(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.OnPaint(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.DrawColumnHeaderImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws the Image contained in the ColumnHeader
            </summary>
            <param name="g">The Graphics used to paint the Image</param>
            <param name="image">The Image to be drawn</param>
            <param name="imageRect">A rectangle that specifies the Size and 
            Location of the Image</param>
            <param name="enabled">Specifies whether the Image should be drawn 
            in an enabled state</param>
        </member>
        <member name="M:XPTable.Renderers.HeaderRenderer.DrawSortArrow(System.Drawing.Graphics,System.Drawing.Rectangle,System.Windows.Forms.SortOrder,System.Boolean)">
            <summary>
            Draws the ColumnHeader's sort arrow
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="drawRect">A Rectangle that specifies the location 
            of the sort arrow</param>
            <param name="direction">The direction of the sort arrow</param>
            <param name="enabled">Specifies whether the sort arrow should be 
            drawn in an enabled state</param>
        </member>
        <member name="P:XPTable.Renderers.HeaderRenderer.ClientRectangle">
            <summary>
            Overrides Renderer.ClientRectangle
            </summary>
        </member>
        <member name="M:XPTable.Renderers.FlatHeaderRenderer.#ctor">
            <summary>
            Initializes a new instance of the XPHeaderRenderer class 
            with default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.FlatHeaderRenderer.OnPaintBackground(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.FlatHeaderRenderer.OnPaint(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="T:XPTable.Renderers.CellRenderer">
            <summary>
            Base class for Renderers that draw Cells
            </summary>
        </member>
        <member name="T:XPTable.Renderers.ICellRenderer">
            <summary>
            Exposes common methods provided by Cell renderers
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnGotFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the GotFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnLostFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the LostFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnKeyDown(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyDown event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnKeyUp(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyUp event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnMouseEnter(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnMouseLeave(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnMouseUp(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnMouseDown(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnMouseMove(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnClick(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the Click event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ICellRenderer.OnDoubleClick(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the DoubleClick event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="F:XPTable.Renderers.CellRenderer.format">
            <summary>
            A string that specifies how a Cells contents are formatted
            </summary>
        </member>
        <member name="F:XPTable.Renderers.CellRenderer.grayTextBrush">
            <summary>
            The Brush used to draw disabled text
            </summary>
        </member>
        <member name="F:XPTable.Renderers.CellRenderer.padding">
            <summary>
            The amount of padding for the cell being rendered
            </summary>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.#ctor">
            <summary>
            Initializes a new instance of the CellRenderer class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.Dispose">
            <summary>
            Releases the unmanaged resources used by the Renderer and 
            optionally releases the managed resources
            </summary>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.GetRendererData(XPTable.Models.Cell)">
            <summary>
            Gets the renderer specific data used by the Renderer from 
            the specified Cell
            </summary>
            <param name="cell">The Cell to get the renderer data for</param>
            <returns>The renderer data for the specified Cell</returns>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.SetRendererData(XPTable.Models.Cell,System.Object)">
            <summary>
            Sets the specified renderer specific data used by the Renderer for 
            the specified Cell
            </summary>
            <param name="cell">The Cell for which the data is to be stored</param>
            <param name="value">The renderer specific data to be stored</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnGotFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the GotFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnLostFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the LostFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnKeyDown(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyDown event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnKeyUp(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyUp event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnMouseEnter(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnMouseLeave(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnMouseUp(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnMouseDown(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnMouseMove(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnClick(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the Click event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnDoubleClick(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the DoubleClick event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnPaintBackground(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CellRenderer.OnPaintBorder(XPTable.Events.PaintCellEventArgs,System.Drawing.Pen)">
            <summary>
            Raises the PaintBorder event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
            <param name="pen">The pen used to draw the border</param>
        </member>
        <member name="P:XPTable.Renderers.CellRenderer.ClientRectangle">
            <summary>
            Overrides Renderer.ClientRectangle
            </summary>
        </member>
        <member name="P:XPTable.Renderers.CellRenderer.Format">
            <summary>
            Gets or sets the string that specifies how a Cells contents are formatted
            </summary>
        </member>
        <member name="P:XPTable.Renderers.CellRenderer.GrayTextBrush">
            <summary>
            Gets the Brush used to draw disabled text
            </summary>
        </member>
        <member name="P:XPTable.Renderers.CellRenderer.Padding">
            <summary>
            Gets or sets the amount of padding around the Cell being rendered
            </summary>
        </member>
        <member name="T:XPTable.Models.TableRegion">
            <summary>
            Specifies the part of the Table the user has clicked
            </summary>
        </member>
        <member name="F:XPTable.Models.TableRegion.Cells">
            <summary>
            A cell in the Table
            </summary>
        </member>
        <member name="F:XPTable.Models.TableRegion.ColumnHeader">
            <summary>
            A column header in the Table
            </summary>
        </member>
        <member name="F:XPTable.Models.TableRegion.NonClientArea">
            <summary>
            The non-client area of a Table, such as the border
            </summary>
        </member>
        <member name="F:XPTable.Models.TableRegion.NoWhere">
            <summary>
            The click occured outside ot the Table
            </summary>
        </member>
        <member name="T:XPTable.Models.RowCollection">
            <summary>
            Represents a collection of Row objects
            </summary>
        </member>
        <member name="F:XPTable.Models.RowCollection.owner">
            <summary>
            The TableModel that owns the RowCollection
            </summary>
        </member>
        <member name="M:XPTable.Models.RowCollection.#ctor(XPTable.Models.TableModel)">
            <summary>
            Initializes a new instance of the RowCollection class 
            that belongs to the specified TableModel
            </summary>
            <param name="owner">A TableModel representing the tableModel that owns 
            the RowCollection</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.Add(XPTable.Models.Row)">
            <summary>
            Adds the specified Row to the end of the collection
            </summary>
            <param name="row">The Row to add</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.AddRange(XPTable.Models.Row[])">
            <summary>
            Adds an array of Row objects to the collection
            </summary>
            <param name="rows">An array of Row objects to add 
            to the collection</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.Remove(XPTable.Models.Row)">
            <summary>
            Removes the specified Row from the model
            </summary>
            <param name="row">The Row to remove</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.RemoveRange(XPTable.Models.Row[])">
            <summary>
            Removes an array of Row objects from the collection
            </summary>
            <param name="rows">An array of Row objects to remove 
            from the collection</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the Row at the specified index from the collection
            </summary>
            <param name="index">The index of the Row to remove</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.Clear">
            <summary>
            Removes all Rows from the collection
            </summary>
        </member>
        <member name="M:XPTable.Models.RowCollection.Insert(System.Int32,XPTable.Models.Row)">
            <summary>
            Inserts a Row into the collection at the specified index
            </summary>
            <param name="index">The zero-based index at which the Row 
            should be inserted</param>
            <param name="row">The Row to insert</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.InsertRange(System.Int32,XPTable.Models.Row[])">
            <summary>
            Inserts an array of Rows into the collection at the specified 
            index
            </summary>
            <param name="index">The zero-based index at which the rows 
            should be inserted</param>
            <param name="rows">The array of Rows to be inserted into 
            the collection</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.IndexOf(XPTable.Models.Row)">
            <summary>
            Returns the index of the specified Row in the model
            </summary>
            <param name="row">The Row to look for</param>
            <returns>The index of the specified Row in the model</returns>
        </member>
        <member name="M:XPTable.Models.RowCollection.SetRow(System.Int32,XPTable.Models.Row)">
            <summary>
            Replaces the Row at the specified index to the specified Row
            </summary>
            <param name="index">The index of the Row to be replaced</param>
            <param name="row">The Row to be placed at the specified index</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.OnRowAdded(XPTable.Events.TableModelEventArgs)">
            <summary>
            Raises the RowAdded event
            </summary>
            <param name="e">A TableModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.RowCollection.OnRowRemoved(XPTable.Events.TableModelEventArgs)">
            <summary>
            Raises the RowRemoved event
            </summary>
            <param name="e">A TableModelEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Models.RowCollection.Item(System.Int32)">
            <summary>
            Gets the Row at the specified index
            </summary>
        </member>
        <member name="T:XPTable.Models.ImageSizeMode">
            <summary>
            Specifies how Images are sized within a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.ImageSizeMode.Normal">
            <summary>
            The Image will be displayed normally
            </summary>
        </member>
        <member name="F:XPTable.Models.ImageSizeMode.SizedToFit">
            <summary>
            The Image will be stretched/shrunken to fit the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.ImageSizeMode.ScaledToFit">
            <summary>
            The Image will be scaled to fit the Cell
            </summary>
        </member>
        <member name="T:XPTable.Models.ColumnModel">
            <summary>
            Summary description for ColumnModel.
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.DefaultHeaderHeight">
            <summary>
            The default height of a column header
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.MinimumHeaderHeight">
            <summary>
            The minimum height of a column header
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.MaximumHeaderHeight">
            <summary>
            The maximum height of a column header
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.columns">
            <summary>
            The collection of Column's contained in the ColumnModel
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.cellRenderers">
            <summary>
            The list of all default CellRenderers used by the Columns in the ColumnModel
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.cellEditors">
            <summary>
            The list of all default CellEditors used by the Columns in the ColumnModel
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.table">
            <summary>
            The Table that the ColumnModel belongs to
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnModel.headerHeight">
            <summary>
            The height of the column headers
            </summary>
        </member>
        <member name="M:XPTable.Models.ColumnModel.#ctor">
            <summary>
            Initializes a new instance of the ColumnModel class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Models.ColumnModel.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the ColumnModel class with an array of strings 
            representing TextColumns
            </summary>
            <param name="columns">An array of strings that represent the Columns of 
            the ColumnModel</param>
        </member>
        <member name="M:XPTable.Models.ColumnModel.#ctor(XPTable.Models.Column[])">
            <summary>
            Initializes a new instance of the Row class with an array of Column objects
            </summary>
            <param name="columns">An array of Cell objects that represent the Columns 
            of the ColumnModel</param>
        </member>
        <member name="M:XPTable.Models.ColumnModel.Init">
            <summary>
            Initialise default settings
            </summary>
        </member>
        <member name="M:XPTable.Models.ColumnModel.ColumnIndexAtX(System.Int32)">
            <summary>
            Returns the index of the Column that lies on the specified position
            </summary>
            <param name="xPosition">The x-coordinate to check</param>
            <returns>The index of the Column or -1 if no Column is found</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.ColumnAtX(System.Int32)">
            <summary>
            Returns the Column that lies on the specified position
            </summary>
            <param name="xPosition">The x-coordinate to check</param>
            <returns>The Column that lies on the specified position, 
            or null if not found</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.ColumnHeaderRect(System.Int32)">
            <summary>
            Returns a rectangle that countains the header of the column 
            at the specified index in the ColumnModel
            </summary>
            <param name="index">The index of the column</param>
            <returns>that countains the header of the specified column</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.ColumnHeaderRect(XPTable.Models.Column)">
            <summary>
            Returns a rectangle that countains the header of the specified column
            </summary>
            <param name="column">The column</param>
            <returns>A rectangle that countains the header of the specified column</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.Dispose(System.Boolean)">
            <summary> 
            Releases the unmanaged resources used by the ColumnModel and optionally 
            releases the managed resources
            </summary>
        </member>
        <member name="M:XPTable.Models.ColumnModel.GetCellEditor(System.String)">
            <summary>
            Returns the ICellEditor that is associated with the specified name
            </summary>
            <param name="name">The name thst is associated with an ICellEditor</param>
            <returns>The ICellEditor that is associated with the specified name, 
            or null if the name or ICellEditor do not exist</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.GetCellEditor(System.Int32)">
            <summary>
            Gets the ICellEditor for the Column at the specified index in the 
            ColumnModel
            </summary>
            <param name="column">The index of the Column in the ColumnModel for 
            which an ICellEditor will be retrieved</param>
            <returns>The ICellEditor for the Column at the specified index, or 
            null if the editor does not exist</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.SetCellEditor(System.String,XPTable.Editors.ICellEditor)">
            <summary>
            Associates the specified ICellRenderer with the specified name
            </summary>
            <param name="name">The name to be associated with the specified ICellEditor</param>
            <param name="editor">The ICellEditor to be added to the ColumnModel</param>
        </member>
        <member name="M:XPTable.Models.ColumnModel.ContainsCellEditor(System.String)">
            <summary>
            Gets whether the ColumnModel contains an ICellEditor with the 
            specified name
            </summary>
            <param name="name">The name associated with the ICellEditor</param>
            <returns>true if the ColumnModel contains an ICellEditor with the 
            specified name, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.GetCellRenderer(System.String)">
            <summary>
            Returns the ICellRenderer that is associated with the specified name
            </summary>
            <param name="name">The name thst is associated with an ICellEditor</param>
            <returns>The ICellRenderer that is associated with the specified name, 
            or null if the name or ICellRenderer do not exist</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.GetCellRenderer(System.Int32)">
            <summary>
            Gets the ICellRenderer for the Column at the specified index in the 
            ColumnModel
            </summary>
            <param name="column">The index of the Column in the ColumnModel for 
            which an ICellRenderer will be retrieved</param>
            <returns>The ICellRenderer for the Column at the specified index, or 
            null if the renderer does not exist</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.SetCellRenderer(System.String,XPTable.Renderers.ICellRenderer)">
            <summary>
            Associates the specified ICellRenderer with the specified name
            </summary>
            <param name="name">The name to be associated with the specified ICellRenderer</param>
            <param name="renderer">The ICellRenderer to be added to the ColumnModel</param>
        </member>
        <member name="M:XPTable.Models.ColumnModel.ContainsCellRenderer(System.String)">
            <summary>
            Gets whether the ColumnModel contains an ICellRenderer with the 
            specified name
            </summary>
            <param name="name">The name associated with the ICellRenderer</param>
            <returns>true if the ColumnModel contains an ICellRenderer with the 
            specified name, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.PreviousVisibleColumn(System.Int32)">
            <summary>
            Returns the index of the first visible Column that is to the 
            left of the Column at the specified index in the ColumnModel
            </summary>
            <param name="index">The index of the Column for which the first 
            visible Column that is to the left of the specified Column is to 
            be found</param>
            <returns>the index of the first visible Column that is to the 
            left of the Column at the specified index in the ColumnModel, or 
            -1 if the Column at the specified index is the first visible column, 
            or there are no Columns in the Column model</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.NextVisibleColumn(System.Int32)">
            <summary>
            Returns the index of the first visible Column that is to the 
            right of the Column at the specified index in the ColumnModel
            </summary>
            <param name="index">The index of the Column for which the first 
            visible Column that is to the right of the specified Column is to 
            be found</param>
            <returns>the index of the first visible Column that is to the 
            right of the Column at the specified index in the ColumnModel, or 
            -1 if the Column at the specified index is the last visible column, 
            or there are no Columns in the Column model</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.ShouldSerializeHeaderHeight">
            <summary>
            Specifies whether the HeaderHeight property should be serialized at 
            design time
            </summary>
            <returns>true if the HeaderHeight property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.ColumnModel.OnColumnAdded(XPTable.Events.ColumnModelEventArgs)">
            <summary>
            Raises the ColumnAdded event
            </summary>
            <param name="e">A ColumnModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.ColumnModel.OnColumnRemoved(XPTable.Events.ColumnModelEventArgs)">
            <summary>
            Raises the ColumnRemoved event
            </summary>
            <param name="e">A ColumnModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.ColumnModel.OnHeaderHeightChanged(System.EventArgs)">
            <summary>
            Raises the HeaderHeightChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.ColumnModel.OnColumnPropertyChanged(XPTable.Events.ColumnEventArgs)">
            <summary>
            Raises the ColumnPropertyChanged event
            </summary>
            <param name="e">A ColumnEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Models.ColumnModel.ColumnAdded">
            <summary>
            Occurs when a Column has been added to the ColumnModel
            </summary>
        </member>
        <member name="E:XPTable.Models.ColumnModel.ColumnRemoved">
            <summary>
            Occurs when a Column is removed from the ColumnModel
            </summary>
        </member>
        <member name="E:XPTable.Models.ColumnModel.HeaderHeightChanged">
            <summary>
            Occurs when the value of the HeaderHeight property changes
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.EditorCount">
            <summary>
            Gets the number of ICellEditors contained in the ColumnModel
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.RendererCount">
            <summary>
            Gets the number of ICellRenderers contained in the ColumnModel
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.Columns">
            <summary>
            A ColumnCollection representing the collection of 
            Columns contained within the ColumnModel
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.HeaderHeight">
            <summary>
            Gets or sets the height of the column headers
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.HeaderRect">
            <summary>
            Gets a rectangle that specifies the width and height of all the 
            visible column headers in the model
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.TotalColumnWidth">
            <summary>
            Gets the total width of all the Columns in the model
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.VisibleColumnsWidth">
            <summary>
            Gets the total width of all the visible Columns in the model
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.LastVisibleColumnIndex">
            <summary>
            Gets the index of the last Column that is not hidden
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.VisibleColumnCount">
            <summary>
            Gets the number of Columns in the ColumnModel that are visible
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.Table">
            <summary>
            Gets the Table the ColumnModel belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.InternalTable">
            <summary>
            Gets or sets the Table the ColumnModel belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.CanRaiseEvents">
            <summary>
            Gets whether the ColumnModel is able to raise events
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnModel.Enabled">
            <summary>
            Gets whether the ColumnModel is enabled
            </summary>
        </member>
        <member name="T:XPTable.Models.CellPos">
            <summary>
            Represents the position of a Cell in a Table
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPos.Empty">
            <summary>
            Repsesents a null CellPos
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPos.row">
            <summary>
            The Row index of this CellPos
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPos.column">
            <summary>
            The Column index of this CellPos
            </summary>
        </member>
        <member name="M:XPTable.Models.CellPos.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellPos class with the specified 
            row index and column index
            </summary>
            <param name="row">The Row index of the CellPos</param>
            <param name="column">The Column index of the CellPos</param>
        </member>
        <member name="M:XPTable.Models.CellPos.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this CellPos by the specified amount
            </summary>
            <param name="rows">The amount to offset the row index</param>
            <param name="columns">The amount to offset the column index</param>
        </member>
        <member name="M:XPTable.Models.CellPos.Equals(System.Object)">
            <summary>
            Tests whether obj is a CellPos structure with the same values as 
            this CellPos structure
            </summary>
            <param name="obj">The Object to test</param>
            <returns>This method returns true if obj is a CellPos structure 
            and its Row and Column properties are equal to the corresponding 
            properties of this CellPos structure; otherwise, false</returns>
        </member>
        <member name="M:XPTable.Models.CellPos.GetHashCode">
            <summary>
            Returns the hash code for this CellPos structure
            </summary>
            <returns>An integer that represents the hashcode for this 
            CellPos</returns>
        </member>
        <member name="M:XPTable.Models.CellPos.ToString">
            <summary>
            Converts the attributes of this CellPos to a human-readable string
            </summary>
            <returns>A string that contains the row and column indexes of this 
            CellPos structure </returns>
        </member>
        <member name="M:XPTable.Models.CellPos.op_Equality(XPTable.Models.CellPos,XPTable.Models.CellPos)">
            <summary>
            Tests whether two CellPos structures have equal Row and Column 
            properties
            </summary>
            <param name="left">The CellPos structure that is to the left 
            of the equality operator</param>
            <param name="right">The CellPos structure that is to the right 
            of the equality operator</param>
            <returns>This operator returns true if the two CellPos structures 
            have equal Row and Column properties</returns>
        </member>
        <member name="M:XPTable.Models.CellPos.op_Inequality(XPTable.Models.CellPos,XPTable.Models.CellPos)">
            <summary>
            Tests whether two CellPos structures differ in their Row and 
            Column properties
            </summary>
            <param name="left">The CellPos structure that is to the left 
            of the equality operator</param>
            <param name="right">The CellPos structure that is to the right 
            of the equality operator</param>
            <returns>This operator returns true if any of the Row and Column 
            properties of the two CellPos structures are unequal; otherwise 
            false</returns>
        </member>
        <member name="P:XPTable.Models.CellPos.Row">
            <summary>
            Gets or sets the Row index of this CellPos
            </summary>
        </member>
        <member name="P:XPTable.Models.CellPos.Column">
            <summary>
            Gets or sets the Column index of this CellPos
            </summary>
        </member>
        <member name="P:XPTable.Models.CellPos.IsEmpty">
            <summary>
            Tests whether any numeric properties of this CellPos have 
            values of -1
            </summary>
        </member>
        <member name="T:XPTable.Events.CellEventHandler">
            <summary>
            Represents the methods that will handle the PropertyChanged event of a Cell
            </summary>
        </member>
        <member name="T:XPTable.Events.CellEventArgs">
            <summary>
            Provides data for a Cell's PropertyChanged event
            </summary>
        </member>
        <member name="T:XPTable.Events.CellEventArgsBase">
            <summary>
            Base class for classes containing Cell event data
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventArgsBase.source">
            <summary>
            The Cell that Raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventArgsBase.column">
            <summary>
            The Column index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventArgsBase.row">
            <summary>
            The Row index of the Cell
            </summary>
        </member>
        <member name="M:XPTable.Events.CellEventArgsBase.#ctor(XPTable.Models.Cell)">
            <summary>
            Initializes a new instance of the CellEventArgs class with 
            the specified Cell source and event type
            </summary>
            <param name="source">The Cell that Raised the event</param>
        </member>
        <member name="M:XPTable.Events.CellEventArgsBase.#ctor(XPTable.Models.Cell,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellEventArgs class with 
            the specified Cell source, column index and row index
            </summary>
            <param name="source">The Cell that Raised the event</param>
            <param name="column">The Column index of the Cell</param>
            <param name="row">The Row index of the Cell</param>
        </member>
        <member name="M:XPTable.Events.CellEventArgsBase.SetColumn(System.Int32)">
            <summary>
            
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:XPTable.Events.CellEventArgsBase.SetRow(System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
        </member>
        <member name="P:XPTable.Events.CellEventArgsBase.Cell">
            <summary>
            Returns the Cell that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEventArgsBase.Column">
            <summary>
            Gets the Column index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEventArgsBase.Row">
            <summary>
            Gets the Row index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEventArgsBase.CellPos">
            <summary>
            Gets the position of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventArgs.eventType">
            <summary>
            The type of event
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventArgs.oldValue">
            <summary>
            The old value of the property
            </summary>
        </member>
        <member name="M:XPTable.Events.CellEventArgs.#ctor(XPTable.Models.Cell,XPTable.Events.CellEventType,System.Object)">
            <summary>
            Initializes a new instance of the CellEventArgs class with 
            the specified Cell source and event type
            </summary>
            <param name="source">The Cell that Raised the event</param>
            <param name="eventType">The type of event</param>
            <param name="oldValue">The old value of the property</param>
        </member>
        <member name="M:XPTable.Events.CellEventArgs.#ctor(XPTable.Models.Cell,System.Int32,System.Int32,XPTable.Events.CellEventType,System.Object)">
            <summary>
            Initializes a new instance of the CellEventArgs class with 
            the specified Cell source, column index, row index and event type
            </summary>
            <param name="source">The Cell that Raised the event</param>
            <param name="column">The Column index of the Cell</param>
            <param name="row">The Row index of the Cell</param>
            <param name="eventType">The type of event</param>
            <param name="oldValue">The old value of the property</param>
        </member>
        <member name="P:XPTable.Events.CellEventArgs.EventType">
            <summary>
            Gets or sets the type of event
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEventArgs.OldValue">
            <summary>
            Gets the old value of the property
            </summary>
        </member>
        <member name="T:XPTable.Editors.DropDownContainer">
            <summary>
            Summary description for DropDownContainer.
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownContainer.editor">
            <summary>
            The DropDownCellEditor that owns the DropDownContainer
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownContainer.dropdownControl">
            <summary>
            The Control displayed in the DropDownContainer
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownContainer.panel">
            <summary>
            A Panel that provides the black border around the DropDownContainer
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownContainer.#ctor(XPTable.Editors.DropDownCellEditor)">
            <summary>
            Initializes a new instance of the DropDownContainer class with the 
            specified DropDownCellEditor owner
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownContainer.ShowDropDown">
            <summary>
            Displays the DropDownContainer to the user
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownContainer.HideDropDown">
            <summary>
            Hides the DropDownContainer from the user
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownContainer.FlushPaintMessages">
            <summary>
            Processes any Paint messages in the message queue
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownContainer.DropDownContainer_SizeChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for the DropDownContainer's SizeChanged event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Editors.DropDownContainer.Control">
            <summary>
            Gets or sets the Control displayed in the DropDownContainer
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownContainer.CreateParams">
            <summary>
            Gets the required creation parameters when the control handle is created
            </summary>
        </member>
        <member name="T:XPTable.Themes.ThemeManager">
            <summary>
            A class that contains methods for drawing Windows XP themed Control parts
            </summary>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.#ctor">
            <summary>
            Initializes a new instance of the ThemeManager class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,XPTable.Themes.PushButtonStates)">
            <summary>
            Draws a push button in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="buttonRect">The Rectangle that represents the dimensions 
            of the button</param>
            <param name="state">A PushButtonStates value that specifies the 
            state to draw the button in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.PushButtonStates)">
            <summary>
            Draws a push button in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="buttonRect">The Rectangle that represents the dimensions 
            of the button</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
            <param name="state">A PushButtonStates value that specifies the 
            state to draw the button in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.ConvertPushButtonStateToButtonState(XPTable.Themes.PushButtonStates)">
            <summary>
            Converts the specified PushButtonStates value to a ButtonState value
            </summary>
            <param name="state">The PushButtonStates value to be converted</param>
            <returns>A ButtonState value that represents the specified PushButtonStates 
            value</returns>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawCheck(System.Drawing.Graphics,System.Drawing.Rectangle,XPTable.Themes.CheckBoxStates)">
            <summary>
            Draws a check box in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="checkRect">The Rectangle that represents the dimensions 
            of the check box</param>
            <param name="state">A CheckBoxStates value that specifies the 
            state to draw the check box in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawCheck(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.CheckBoxStates)">
            <summary>
            Draws a check box in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="checkRect">The Rectangle that represents the dimensions 
            of the check box</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
            <param name="state">A CheckBoxStates value that specifies the 
            state to draw the check box in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.ConvertCheckBoxStateToButtonState(XPTable.Themes.CheckBoxStates)">
            <summary>
            Converts the specified CheckBoxStates value to a ButtonState value
            </summary>
            <param name="state">The CheckBoxStates value to be converted</param>
            <returns>A ButtonState value that represents the specified CheckBoxStates 
            value</returns>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.IsMixed(XPTable.Themes.CheckBoxStates)">
            <summary>
            Returns whether the specified CheckBoxStates value is in an 
            indeterminate state
            </summary>
            <param name="state">The CheckBoxStates value to be checked</param>
            <returns>true if the specified CheckBoxStates value is in an 
            indeterminate state, false otherwise</returns>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawColumnHeader(System.Drawing.Graphics,System.Drawing.Rectangle,XPTable.Themes.ColumnHeaderStates)">
            <summary>
            Draws a column header in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="headerRect">The Rectangle that represents the dimensions 
            of the column header</param>
            <param name="state">A ColumnHeaderStates value that specifies the 
            state to draw the column header in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawColumnHeader(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.ColumnHeaderStates)">
            <summary>
            Draws a column header in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="headerRect">The Rectangle that represents the dimensions 
            of the column header</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
            <param name="state">A ColumnHeaderStates value that specifies the 
            state to draw the column header in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawComboBoxButton(System.Drawing.Graphics,System.Drawing.Rectangle,XPTable.Themes.ComboBoxStates)">
            <summary>
            Draws a combobox button in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="buttonRect">The Rectangle that represents the dimensions 
            of the combobox button</param>
            <param name="state">A ComboBoxStates value that specifies the 
            state to draw the combobox button in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawComboBoxButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.ComboBoxStates)">
            <summary>
            Draws a combobox button in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="buttonRect">The Rectangle that represents the dimensions 
            of the button</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
            <param name="state">A ComboBoxStates value that specifies the 
            state to draw the combobox button in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.ConvertComboBoxStateToButtonState(XPTable.Themes.ComboBoxStates)">
            <summary>
            Converts the specified ComboBoxStates value to a ButtonState value
            </summary>
            <param name="state">The ComboBoxStates value to be converted</param>
            <returns>A ButtonState value that represents the specified ComboBoxStates 
            value</returns>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawProgressBar(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a ProgressBar on the specified graphics surface, and within 
            the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="drawRect">The Rectangle that represents the dimensions 
            of the ProgressBar</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawProgressBar(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws a ProgressBar on the specified graphics surface, and within 
            the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="drawRect">The Rectangle that represents the dimensions 
            of the ProgressBar</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawProgressBarChunks(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws the ProgressBar's chunks on the specified graphics surface, and within 
            the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="drawRect">The Rectangle that represents the dimensions 
            of the ProgressBar</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawProgressBarChunks(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws the ProgressBar's chunks on the specified graphics surface, and within 
            the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="drawRect">The Rectangle that represents the dimensions 
            of the ProgressBar</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Rectangle,XPTable.Themes.RadioButtonStates)">
            <summary>
            Draws a RadioButton in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="checkRect">The Rectangle that represents the dimensions 
            of the RadioButton</param>
            <param name="state">A RadioButtonStates value that specifies the 
            state to draw the RadioButton in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawRadioButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.RadioButtonStates)">
            <summary>
            Draws a RadioButton in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="checkRect">The Rectangle that represents the dimensions 
            of the RadioButton</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
            <param name="state">A RadioButtonStates value that specifies the 
            state to draw the RadioButton in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.ConvertRadioButtonStateToButtonState(XPTable.Themes.RadioButtonStates)">
            <summary>
            Converts the specified RadioButtonStates value to a ButtonState value
            </summary>
            <param name="state">The RadioButtonStates value to be converted</param>
            <returns>A ButtonState value that represents the specified RadioButtonStates 
            value</returns>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawTabPageBody(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Draws a TabPage body on the specified graphics surface, and within the 
            specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="tabRect">The Rectangle that represents the dimensions 
            of the TabPage body</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawTabPageBody(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws a TabPage body on the specified graphics surface, and within the 
            specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="tabRect">The Rectangle that represents the dimensions 
            of the TabPage body</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,XPTable.Themes.TextBoxStates)">
            <summary>
            Draws a TextBox in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="textRect">The Rectangle that represents the dimensions 
            of the TextBox</param>
            <param name="state">A TextBoxStates value that specifies the 
            state to draw the TextBox in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawTextBox(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.TextBoxStates)">
            <summary>
            Draws a TextBox in the specified state, on the specified graphics 
            surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="textRect">The Rectangle that represents the dimensions 
            of the TextBox</param>
            <param name="clipRect">The Rectangle that represents the clipping area</param>
            <param name="state">A TextBoxStates value that specifies the 
            state to draw the TextBox in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawUpDownButtons(System.Drawing.Graphics,System.Drawing.Rectangle,XPTable.Themes.UpDownStates,System.Drawing.Rectangle,XPTable.Themes.UpDownStates)">
            <summary>
            Draws an UpDown's up and down buttons in the specified state, on the specified 
            graphics surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="upButtonRect">The Rectangle that represents the dimensions 
            of the up button</param>
            <param name="upButtonState">An UpDownStates value that specifies the 
            state to draw the up button in</param>
            <param name="downButtonRect">The Rectangle that represents the dimensions 
            of the down button</param>
            <param name="downButtonState">An UpDownStates value that specifies the 
            state to draw the down button in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawUpDownButtons(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.UpDownStates,System.Drawing.Rectangle,System.Drawing.Rectangle,XPTable.Themes.UpDownStates)">
            <summary>
            Draws an UpDown's up and down buttons in the specified state, on the specified 
            graphics surface, and within the specified bounds
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="upButtonRect">The Rectangle that represents the dimensions 
            of the up button</param>
            <param name="upButtonClipRect">The Rectangle that represents the clipping area
            for the up button</param>
            <param name="upButtonState">An UpDownStates value that specifies the 
            state to draw the up button in</param>
            <param name="downButtonRect">The Rectangle that represents the dimensions 
            of the down button</param>
            <param name="downButtonClipRect">The Rectangle that represents the clipping area
            for the down button</param>
            <param name="downButtonState">An UpDownStates value that specifies the 
            state to draw the down button in</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.ConvertUpDownStateToButtonState(XPTable.Themes.UpDownStates)">
            <summary>
            Converts the specified UpDownStates value to a ButtonState value
            </summary>
            <param name="state">The UpDownStates value to be converted</param>
            <returns>A ButtonState value that represents the specified UpDownStates 
            value</returns>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawThemeBackground(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Draws the background image defined by the visual style for the specified control part
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="windowClass">The class of the part to draw</param>
            <param name="part">The part to draw</param>
            <param name="partState">The state of the part to draw</param>
            <param name="drawRect">The Rectangle in which the part is drawn</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.DrawThemeBackground(System.Drawing.Graphics,System.String,System.Int32,System.Int32,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>
            Draws the background image defined by the visual style for the specified control part
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="windowClass">The class of the part to draw</param>
            <param name="part">The part to draw</param>
            <param name="partState">The state of the part to draw</param>
            <param name="drawRect">The Rectangle in which the part is drawn</param>
            <param name="clipRect">The Rectangle that represents the clipping area for the part</param>
        </member>
        <member name="M:XPTable.Themes.ThemeManager.GetComctlVersion">
            <summary>
            Returns a Version object that contains information about the verion 
            of the CommonControls that the application is using
            </summary>
            <returns>A Version object that contains information about the verion 
            of the CommonControls that the application is using</returns>
        </member>
        <member name="P:XPTable.Themes.ThemeManager.VisualStylesSupported">
            <summary>
            Gets whether Visual Styles are supported by the system
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeManager.VisualStylesEnabled">
            <summary>
            Gets whether Visual Styles are enabled for the application
            </summary>
        </member>
        <member name="T:XPTable.Themes.ComboBoxStates">
            <summary>
            Represents the different states of a ComboBox
            </summary>
        </member>
        <member name="F:XPTable.Themes.ComboBoxStates.Normal">
            <summary>
            The ColumnBox dropdown button is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.ComboBoxStates.Hot">
            <summary>
            The ColumnBox dropdown button is highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.ComboBoxStates.Pressed">
            <summary>
            The ColumnBox dropdown button is being pressed by the mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.ComboBoxStates.Disabled">
            <summary>
            The ColumnBox dropdown button is disabled
            </summary>
        </member>
        <member name="T:XPTable.Models.Design.CellConverter">
            <summary>
            A custom TypeConverter used to help convert Cells from 
            one Type to another
            </summary>
        </member>
        <member name="M:XPTable.Models.Design.CellConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the 
            specified type, using the specified context
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a 
            format context</param>
            <param name="destinationType">A Type that represents the type 
            you want to convert to</param>
            <returns>true if this converter can perform the conversion; o
            therwise, false</returns>
        </member>
        <member name="M:XPTable.Models.Design.CellConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using 
            the specified context and culture information
            </summary>
            <param name="context">An ITypeDescriptorContext that provides 
            a format context</param>
            <param name="culture">A CultureInfo object. If a null reference 
            is passed, the current culture is assumed</param>
            <param name="value">The Object to convert</param>
            <param name="destinationType">The Type to convert the value 
            parameter to</param>
            <returns>An Object that represents the converted value</returns>
        </member>
        <member name="T:XPTable.Events.CellKeyEventHandler">
            <summary>
            Represents the method that will handle the CellKeyDown and CellKeyUp 
            events of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.CellKeyEventArgs">
            <summary>
            Provides data for the CellKeyDown and CellKeyUp events of a Table
            </summary>
        </member>
        <member name="F:XPTable.Events.CellKeyEventArgs.cell">
            <summary>
            The Cell that Raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.CellKeyEventArgs.table">
            <summary>
            The Table the Cell belongs to
            </summary>
        </member>
        <member name="F:XPTable.Events.CellKeyEventArgs.row">
            <summary>
            The Row index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.CellKeyEventArgs.column">
            <summary>
            The Column index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.CellKeyEventArgs.cellRect">
            <summary>
            The Cells bounding rectangle
            </summary>
        </member>
        <member name="M:XPTable.Events.CellKeyEventArgs.#ctor(XPTable.Models.Cell,XPTable.Models.Table,System.Int32,System.Int32,System.Drawing.Rectangle,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Initializes a new instance of the CellKeyEventArgs class with 
            the specified source Cell, table, row index, column index, cell 
            bounds and KeyEventArgs
            </summary>
            <param name="cell">The Cell that Raised the event</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="row">The Row index of the Cell</param>
            <param name="column">The Column index of the Cell</param>
            <param name="cellRect">The Cell's bounding rectangle</param>
            <param name="kea"></param>
        </member>
        <member name="M:XPTable.Events.CellKeyEventArgs.#ctor(XPTable.Models.Cell,XPTable.Models.Table,XPTable.Models.CellPos,System.Drawing.Rectangle,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Initializes a new instance of the CellKeyEventArgs class with 
            the specified source Cell, table, row index, column index and 
            cell bounds
            </summary>
            <param name="cell">The Cell that Raised the event</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="cellPos"></param>
            <param name="cellRect">The Cell's bounding rectangle</param>
            <param name="kea"></param>
        </member>
        <member name="P:XPTable.Events.CellKeyEventArgs.Cell">
            <summary>
            Gets the Cell that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.CellKeyEventArgs.Table">
            <summary>
            Gets the Table the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Events.CellKeyEventArgs.Row">
            <summary>
            Gets the Row index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.CellKeyEventArgs.Column">
            <summary>
            Gets the Column index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.CellKeyEventArgs.CellRect">
            <summary>
            Gets the Cells bounding rectangle
            </summary>
        </member>
        <member name="P:XPTable.Events.CellKeyEventArgs.CellPos">
            <summary>
            Gets the position of the Cell
            </summary>
        </member>
        <member name="T:XPTable.Events.CellFocusEventHandler">
            <summary>
            Represents the method that will handle the CellGotFocus and CellLostFocus 
            events of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.CellFocusEventArgs">
            <summary>
            Provides data for the CellGotFocus and CellLostFocus events of a Table
            </summary>
        </member>
        <member name="F:XPTable.Events.CellFocusEventArgs.table">
            <summary>
            The Table the Cell belongs to
            </summary>
        </member>
        <member name="F:XPTable.Events.CellFocusEventArgs.cellRect">
            <summary>
            The Cells bounding rectangle
            </summary>
        </member>
        <member name="M:XPTable.Events.CellFocusEventArgs.#ctor(XPTable.Models.Cell,XPTable.Models.Table,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the CellFocusEventArgs class with 
            the specified source Cell, table, row index, column index and 
            cell bounds
            </summary>
            <param name="source">The Cell that Raised the event</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="row">The Row index of the Cell</param>
            <param name="column">The Column index of the Cell</param>
            <param name="cellRect">The Cell's bounding rectangle</param>
        </member>
        <member name="P:XPTable.Events.CellFocusEventArgs.Table">
            <summary>
            Gets the Table the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Events.CellFocusEventArgs.CellRect">
            <summary>
            Gets the Cell's bounding rectangle
            </summary>
        </member>
        <member name="T:XPTable.Editors.KeyMessageFilter">
            <summary>
            A message filter that filters key messages
            </summary>
        </member>
        <member name="F:XPTable.Editors.KeyMessageFilter.client">
            <summary>
            An IKeyMessageFilterClient that wishes to receive key events
            </summary>
        </member>
        <member name="M:XPTable.Editors.KeyMessageFilter.#ctor(XPTable.Editors.IKeyMessageFilterClient)">
            <summary>
            Initializes a new instance of the CellEditor class with the 
            specified IKeyMessageFilterClient client
            </summary>
        </member>
        <member name="M:XPTable.Editors.KeyMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched
            </summary>
            <param name="m">The message to be dispatched. You cannot modify 
            this message</param>
            <returns>true to filter the message and prevent it from being 
            dispatched; false to allow the message to continue to the next 
            filter or control</returns>
        </member>
        <member name="P:XPTable.Editors.KeyMessageFilter.Client">
            <summary>
            Gets or sets the IKeyMessageFilterClient that wishes to receive 
            key events
            </summary>
        </member>
        <member name="T:XPTable.Editors.ICellEditor">
            <summary>
            Exposes common methods provided by Cell editors
            </summary>
        </member>
        <member name="M:XPTable.Editors.ICellEditor.PrepareForEditing(XPTable.Models.Cell,XPTable.Models.Table,XPTable.Models.CellPos,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Prepares the ICellEditor to edit the specified Cell
            </summary>
            <param name="cell">The Cell to be edited</param>
            <param name="table">The Table that contains the Cell</param>
            <param name="cellPos">A CellPos representing the position of the Cell</param>
            <param name="cellRect">The Rectangle that represents the Cells location and size</param>
            <param name="userSetEditorValues">Specifies whether the ICellEditors 
            starting value has already been set by the user</param>
            <returns>true if the ICellEditor can continue editing the Cell, false otherwise</returns>
        </member>
        <member name="M:XPTable.Editors.ICellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.ICellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.ICellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="T:XPTable.Editors.DropDownStyle">
            <summary>
            Specifies the DropDownCellEditor style
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownStyle.DropDown">
            <summary>
            The text portion is editable. The user must click the arrow 
            button to display the list portion
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownStyle.DropDownList">
            <summary>
            The user cannot directly edit the text portion. The user must 
            click the arrow button to display the list portion
            </summary>
        </member>
        <member name="T:XPTable.Win32.WindowExtendedStyles">
            <summary>
            Specifies the extended window style of the window being created
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be 
            created with a title bar by specifying the WS_CAPTION style in the dwStyle 
            parameter
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the 
            WM_PARENTNOTIFY message to its parent window when it is created or destroyed
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all 
            non-topmost windows and should stay above them, even when the window is 
            deactivated. To add or remove this style, use the SetWindowPos function
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until 
            siblings beneath the window (that were created by the same thread) have been 
            painted. The window appears transparent because the bits of underlying sibling 
            windows have already been painted. To achieve transparency without these 
            restrictions, use the SetWindowRgn function
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating 
            toolbar. A tool window has a title bar that is shorter than a normal title 
            bar, and the window title is drawn using a smaller font. A tool window does 
            not appear in the taskbar or in the dialog that appears when the user presses 
            ALT+TAB. If a tool window has a system menu, its icon is not displayed on the 
            title bar. However, you can display the system menu by right-clicking or by 
            typing ALT+SPACE
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user 
            clicks the question mark, the cursor changes to a question mark with a 
            pointer. If the user then clicks a child window, the child receives a 
            WM_HELP message. The child window should pass the message to the parent 
            window procedure, which should call the WinHelp function using the 
            HELP_WM_HELP command. The Help application displays a pop-up window that 
            typically contains help for the child window. WS_EX_CONTEXTHELP cannot be 
            used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window 
            class. This style has an effect only if the shell language is Hebrew, Arabic, 
            or another language that supports reading-order alignment; otherwise, the style 
            is ignored. Using the WS_EX_RIGHT style for static or edit controls has the 
            same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this 
            style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON 
            styles
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports 
            reading-order alignment, the window text is displayed using right-to-left 
            reading-order properties. For other languages, the style is ignored
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. 
            This is the default
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports 
            reading order alignment, the vertical scroll bar (if present) is to the left 
            of the client area. For other languages, the style is ignored
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This 
            is the default
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog 
            box navigation. If this style is specified, the dialog manager recurses 
            into children of this window when performing navigation operations such 
            as handling the TAB key, an arrow key, or a keyboard mnemonic
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used 
            for items that do not accept user input
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used 
            for child windows. Also, this cannot be used if the window has a class 
            style of either CS_OWNDC or CS_CLASSDC
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window 
            layout to its child windows
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window 
            whose horizontal origin is on the right edge. Increasing horizontal values 
            advance to the left
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order 
            using double-buffering. This cannot be used if the window has a class style of 
            either CS_OWNDC or CS_CLASSDC
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the 
            foreground window when the user clicks it. The system does not bring this window 
            to the foreground when the user minimizes or closes the foreground window. To 
            activate the window, use the SetActiveWindow or SetForegroundWindow function. 
            The window does not appear on the taskbar by default. To force the window to 
            appear on the taskbar, use the WS_EX_APPWINDOW style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowExtendedStyles.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles
            </summary>
        </member>
        <member name="T:XPTable.Themes.ScrollBarParts">
            <summary>
            Represents the different parts of a ScrollBar control that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.ArrowBtn">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.ThumbBtnHorz">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.ThumbBtnVert">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.LowerTrackHorz">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.UpperTrackHorz">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.LowerTrackVert">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.UpperTrackVert">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.GripperHorz">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.GripperVert">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarParts.SizeBox">
            <summary>
            
            </summary>
        </member>
        <member name="T:XPTable.Themes.ListViewParts">
            <summary>
            Represents the different parts of a ListView that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.ListViewParts.ListItem">
            <summary>
            A ListView's border and background
            </summary>
        </member>
        <member name="T:XPTable.Themes.ColumnHeaderParts">
            <summary>
            Represents the different parts of a Column Header that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.ColumnHeaderParts.HeaderItem">
            <summary>
            A Column Header
            </summary>
        </member>
        <member name="T:XPTable.Sorting.HeapSorter">
            <summary>
            A HeapSort implementation for sorting the Cells contained in a TableModel
            </summary>
        </member>
        <member name="T:XPTable.Sorting.SorterBase">
            <summary>
            Base class for the sorters used to sort the Cells contained in a TableModel
            </summary>
        </member>
        <member name="F:XPTable.Sorting.SorterBase.tableModel">
            <summary>
            The TableModel that contains the Cells to be sorted
            </summary>
        </member>
        <member name="F:XPTable.Sorting.SorterBase.column">
            <summary>
            The index of the Column to be sorted
            </summary>
        </member>
        <member name="F:XPTable.Sorting.SorterBase.comparer">
            <summary>
            The IComparer used to sort the Column's Cells
            </summary>
        </member>
        <member name="F:XPTable.Sorting.SorterBase.sortOrder">
            <summary>
            Specifies how the Column is to be sorted
            </summary>
        </member>
        <member name="M:XPTable.Sorting.SorterBase.#ctor(XPTable.Models.TableModel,System.Int32,System.Collections.IComparer,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the SorterBase class with the specified 
            TableModel, Column index, IComparer and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="comparer">The IComparer used to sort the Column's Cells</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.SorterBase.Compare(XPTable.Models.Cell,XPTable.Models.Cell)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="M:XPTable.Sorting.SorterBase.Sort">
            <summary>
            Starts sorting the Cells in the TableModel
            </summary>
        </member>
        <member name="M:XPTable.Sorting.SorterBase.Swap(System.Int32,System.Int32)">
            <summary>
            Swaps the Rows in the TableModel at the specified indexes
            </summary>
            <param name="a">The index of the first Row to be swapped</param>
            <param name="b">The index of the second Row to be swapped</param>
        </member>
        <member name="M:XPTable.Sorting.SorterBase.Set(System.Int32,System.Int32)">
            <summary>
            Replaces the Row in the TableModel located at index a with the Row 
            located at index b
            </summary>
            <param name="a">The index of the Row that will be replaced</param>
            <param name="b">The index of the Row that will be moved to index a</param>
        </member>
        <member name="M:XPTable.Sorting.SorterBase.Set(System.Int32,XPTable.Models.Row)">
            <summary>
            Replaces the Row in the TableModel located at index a with the specified Row
            </summary>
            <param name="a">The index of the Row that will be replaced</param>
            <param name="row">The Row that will be moved to index a</param>
        </member>
        <member name="P:XPTable.Sorting.SorterBase.TableModel">
            <summary>
            Gets the TableModel that contains the Cells to be sorted
            </summary>
        </member>
        <member name="P:XPTable.Sorting.SorterBase.SortColumn">
            <summary>
            Gets the index of the Column to be sorted
            </summary>
        </member>
        <member name="P:XPTable.Sorting.SorterBase.Comparer">
            <summary>
            Gets the IComparer used to sort the Column's Cells
            </summary>
        </member>
        <member name="P:XPTable.Sorting.SorterBase.SortOrder">
            <summary>
            Gets how the Column is to be sorted
            </summary>
        </member>
        <member name="M:XPTable.Sorting.HeapSorter.#ctor(XPTable.Models.TableModel,System.Int32,System.Collections.IComparer,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the HeapSorter class with the specified 
            TableModel, Column index, IComparer and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="comparer">The IComparer used to sort the Column's Cells</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.HeapSorter.Sort">
            <summary>
            Starts sorting the Cells in the TableModel
            </summary>
        </member>
        <member name="M:XPTable.Sorting.HeapSorter.DownHeap(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="k"></param>
            <param name="n"></param>
        </member>
        <member name="T:XPTable.Sorting.DateTimeComparer">
            <summary>
            An IComparer for sorting Cells that contain DateTime information
            </summary>
        </member>
        <member name="T:XPTable.Sorting.ComparerBase">
            <summary>
            Base class for comparers used to sort the Cells contained in a TableModel
            </summary>
        </member>
        <member name="F:XPTable.Sorting.ComparerBase.tableModel">
            <summary>
            The TableModel that contains the Cells to be sorted
            </summary>
        </member>
        <member name="F:XPTable.Sorting.ComparerBase.column">
            <summary>
            The index of the Column to be sorted
            </summary>
        </member>
        <member name="F:XPTable.Sorting.ComparerBase.sortOrder">
            <summary>
            Specifies how the Column is to be sorted
            </summary>
        </member>
        <member name="M:XPTable.Sorting.ComparerBase.#ctor(XPTable.Models.TableModel,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the ComparerBase class with the specified 
            TableModel, Column index and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.ComparerBase.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="P:XPTable.Sorting.ComparerBase.TableModel">
            <summary>
            Gets the TableModel that contains the Cells to be sorted
            </summary>
        </member>
        <member name="P:XPTable.Sorting.ComparerBase.SortColumn">
            <summary>
            Gets the index of the Column to be sorted
            </summary>
        </member>
        <member name="P:XPTable.Sorting.ComparerBase.SortOrder">
            <summary>
            Gets how the Column is to be sorted
            </summary>
        </member>
        <member name="M:XPTable.Sorting.DateTimeComparer.#ctor(XPTable.Models.TableModel,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the DateTimeComparer class with the specified 
            TableModel, Column index and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.DateTimeComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="T:XPTable.Models.Design.HelpfulCollectionEditor">
            <summary>
            A CollectionEditor that displays the help and command areas of its PropertyGrid
            </summary>
        </member>
        <member name="M:XPTable.Models.Design.HelpfulCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the HelpfulCollectionEditor class using 
            the specified collection type
            </summary>
            <param name="type">The type of the collection for this editor to edit</param>
        </member>
        <member name="M:XPTable.Models.Design.HelpfulCollectionEditor.CreateCollectionForm">
            <summary>
            Creates a new form to display and edit the current collection
            </summary>
            <returns>An instance of CollectionEditor.CollectionForm to provide as the 
            user interface for editing the collection</returns>
        </member>
        <member name="T:XPTable.Models.DateTimeColumn">
            <summary>
            Represents a Column whose Cells are displayed as a DateTime
            </summary>
        </member>
        <member name="T:XPTable.Models.DropDownColumn">
            <summary>
            Represents a Column whose Cells are displayed with a drop down 
            button for editing
            </summary>
        </member>
        <member name="T:XPTable.Models.Column">
            <summary>
            Summary description for Column.
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.ResizePadding">
            <summary>
            The amount of space on each side of the Column that can 
            be used as a resizing handle
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.DefaultWidth">
            <summary>
            The default width of a Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.MaximumWidth">
            <summary>
            The maximum width of a Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.MinimumWidth">
            <summary>
            The minimum width of a Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.state">
            <summary>
            Contains the current state of the the Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.text">
            <summary>
            The text displayed in the Column's header
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.format">
            <summary>
            A string that specifies how a Column's Cell contents are formatted
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.alignment">
            <summary>
            The alignment of the text displayed in the Column's Cells
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.width">
            <summary>
            The width of the Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.image">
            <summary>
            The Image displayed on the Column's header
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.imageOnRight">
            <summary>
            Specifies whether the Image displayed on the Column's header should 
            be draw on the right hand side of the Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.columnState">
            <summary>
            The current state of the Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.tooltipText">
            <summary>
            The text displayed when a ToolTip is shown for the Column's header
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.columnModel">
            <summary>
            The ColumnModel that the Column belongs to
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.x">
            <summary>
            The x-coordinate of the column's left edge in pixels
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.sortOrder">
            <summary>
            The current SortOrder of the Column
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.renderer">
            <summary>
            The CellRenderer used to draw the Column's Cells
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.editor">
            <summary>
            The CellEditor used to edit the Column's Cells
            </summary>
        </member>
        <member name="F:XPTable.Models.Column.comparer">
            <summary>
            The Type of the IComparer used to compare the Column's Cells
            </summary>
        </member>
        <member name="M:XPTable.Models.Column.#ctor">
            <summary>
            Creates a new Column with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.Column.#ctor(System.String)">
            <summary>
            Creates a new Column with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.Column.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new Column with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.Column.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new Column with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.Column.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new Column with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.Column.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new Column with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.Column.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new Column with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.Column.Init">
            <summary>
            Initialise default values
            </summary>
        </member>
        <member name="M:XPTable.Models.Column.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.Column.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.Column.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.Column.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.Column.GetState(System.Int32)">
            <summary>
            Returns the state represented by the specified state flag
            </summary>
            <param name="flag">A flag that represents the state to return</param>
            <returns>The state represented by the specified state flag</returns>
        </member>
        <member name="M:XPTable.Models.Column.SetState(System.Int32,System.Boolean)">
            <summary>
            Sets the state represented by the specified state flag to the specified value
            </summary>
            <param name="flag">A flag that represents the state to be set</param>
            <param name="value">The new value of the state</param>
        </member>
        <member name="M:XPTable.Models.Column.ShouldSerializeWidth">
            <summary>
            Specifies whether the Width property should be serialized at 
            design time
            </summary>
            <returns>true if the Width property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Column.ShouldSerializeEditable">
            <summary>
            Specifies whether the Editable property should be serialized at 
            design time
            </summary>
            <returns>true if the Editable property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Column.ShouldSerializeEnabled">
            <summary>
            Specifies whether the Enabled property should be serialized at 
            design time
            </summary>
            <returns>true if the Enabled property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Column.OnPropertyChanged(XPTable.Events.ColumnEventArgs)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="e">A ColumnEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Models.Column.PropertyChanged">
            <summary>
            Occurs when one of the Column's properties changes
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Text">
            <summary>
            Gets or sets the text displayed on the Column header
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Format">
            <summary>
            Gets or sets the string that specifies how a Column's Cell contents 
            are formatted
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the Column's Cell contents
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Width">
            <summary>
            Gets or sets the width of the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Image">
            <summary>
            Gets or sets the Image displayed in the Column's header
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.ImageOnRight">
            <summary>
            Gets or sets whether the Image displayed on the Column's header should 
            be draw on the right hand side of the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.ColumnState">
            <summary>
            Gets the state of the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.InternalColumnState">
            <summary>
            Gets or sets the state of the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Visible">
            <summary>
            Gets or sets the whether the Column is displayed
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Sortable">
            <summary>
            Gets or sets whether the Column is able to be sorted
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Renderer">
            <summary>
            Gets or sets the user specified ICellRenderer that is used to draw the 
            Column's Cells
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Editor">
            <summary>
            Gets or sets the user specified ICellEditor that is used to edit the 
            Column's Cells
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Comparer">
            <summary>
            Gets or sets the user specified Comparer type that is used to edit the 
            Column's Cells
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.DefaultComparerType">
            <summary>
            Gets the Type of the default Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.SortOrder">
            <summary>
            Gets the current SortOrder of the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.InternalSortOrder">
            <summary>
            Gets or sets the current SortOrder of the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Editable">
            <summary>
            Gets or sets a value indicating whether the Column's Cells contents 
            are able to be edited
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Enabled">
            <summary>
            Gets or sets a value indicating whether the Column's Cells can respond to 
            user interaction
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Selectable">
            <summary>
            Gets or sets a value indicating whether the Column's Cells can be selected
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.ToolTipText">
            <summary>
            Gets or sets the ToolTip text associated with the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.X">
            <summary>
            Gets the x-coordinate of the column's left edge in pixels
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Left">
            <summary>
            Gets the x-coordinate of the column's left edge in pixels
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Right">
            <summary>
            Gets the x-coordinate of the column's right edge in pixels
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.ColumnModel">
            <summary>
            Gets or sets the ColumnModel the Column belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.Parent">
            <summary>
            Gets the ColumnModel the Column belongs to.  This member is not 
            intended to be used directly from your code
            </summary>
        </member>
        <member name="P:XPTable.Models.Column.CanRaiseEvents">
            <summary>
            Gets whether the Column is able to raise events
            </summary>
        </member>
        <member name="F:XPTable.Models.DropDownColumn.showButton">
            <summary>
            Specifies whether the Cells should draw a drop down button
            </summary>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.#ctor">
            <summary>
            Creates a new DropDownColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.#ctor(System.String)">
            <summary>
            Creates a new DropDownColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new DropDownColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new DropDownColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new DropDownColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new DropDownColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new DropDownColumn with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.DropDownColumn.Init">
            <summary>
            Initializes the DropDownColumn with default values
            </summary>
        </member>
        <member name="P:XPTable.Models.DropDownColumn.ShowDropDownButton">
            <summary>
            Gets or sets whether the Column's Cells should draw a drop down button
            </summary>
        </member>
        <member name="F:XPTable.Models.DateTimeColumn.LongDateFormat">
            <summary>
            Default long date format
            </summary>
        </member>
        <member name="F:XPTable.Models.DateTimeColumn.ShortDateFormat">
            <summary>
            Default short date format
            </summary>
        </member>
        <member name="F:XPTable.Models.DateTimeColumn.TimeFormat">
            <summary>
            Default time format
            </summary>
        </member>
        <member name="F:XPTable.Models.DateTimeColumn.dateFormat">
            <summary>
            The format of the date and time displayed in the Cells
            </summary>
        </member>
        <member name="F:XPTable.Models.DateTimeColumn.customFormat">
            <summary>
            The custom date/time format string
            </summary>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.#ctor">
            <summary>
            Creates a new DateTimeColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.#ctor(System.String)">
            <summary>
            Creates a new DateTimeColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new DateTimeColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new DateTimeColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new DateTimeColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new DateTimeColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new DateTimeColumn with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.Init">
            <summary>
            Initializes the DateTimeColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.DateTimeColumn.ShouldSerializeCustomDateTimeFormat">
            <summary>
            Specifies whether the CustomDateTimeFormat property should be serialized at 
            design time
            </summary>
            <returns>true if the CustomDateTimeFormat property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="P:XPTable.Models.DateTimeColumn.DateTimeFormat">
            <summary>
            Gets or sets the format of the date and time displayed in the Column's Cells
            </summary>
        </member>
        <member name="P:XPTable.Models.DateTimeColumn.CustomDateTimeFormat">
            <summary>
            Gets or sets the custom date/time format string
            </summary>
        </member>
        <member name="P:XPTable.Models.DateTimeColumn.Format">
            <summary>
            Gets or sets the string that specifies how the Column's Cell contents 
            are formatted
            </summary>
        </member>
        <member name="P:XPTable.Models.DateTimeColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="T:XPTable.Models.ColumnAlignment">
            <summary>
            Specifies alignment of a Columns content
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnAlignment.Left">
            <summary>
            The Columns content is aligned to the left
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnAlignment.Center">
            <summary>
            The Columns content is aligned to the center
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnAlignment.Right">
            <summary>
            The Columns content is aligned to the right
            </summary>
        </member>
        <member name="T:XPTable.Events.ColumnModelEventHandler">
            <summary>
            Represents the methods that will handle the ColumnInserted, ColumnRemoved 
            and HeaderHeightChanged event of a ColumnModel
            </summary>
        </member>
        <member name="T:XPTable.Events.ColumnModelEventArgs">
            <summary>
            Provides data for a ColumnModel's ColumnAdded, ColumnRemoved, 
            and HeaderHeightChanged events
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnModelEventArgs.source">
            <summary>
            The ColumnModel that Raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnModelEventArgs.column">
            <summary>
            The affected Column
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnModelEventArgs.fromIndex">
            <summary>
            The start index of the affected Column(s)
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnModelEventArgs.toIndex">
            <summary>
            The end index of the affected Column(s)
            </summary>
        </member>
        <member name="M:XPTable.Events.ColumnModelEventArgs.#ctor(XPTable.Models.ColumnModel,XPTable.Models.Column,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the ColumnModelEventArgs class with 
            the specified ColumnModel source, start index, end index and affected Column
            </summary>
            <param name="source">The ColumnModel that originated the event</param>
            <param name="column">The affected Column</param>
            <param name="fromIndex">The start index of the affected Column(s)</param>
            <param name="toIndex">The end index of the affected Column(s)</param>
        </member>
        <member name="P:XPTable.Events.ColumnModelEventArgs.ColumnModel">
            <summary>
            Gets the ColumnModel that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.ColumnModelEventArgs.Column">
            <summary>
            Gets the affected Column
            </summary>
        </member>
        <member name="P:XPTable.Events.ColumnModelEventArgs.FromIndex">
            <summary>
            Gets the start index of the affected Column(s)
            </summary>
        </member>
        <member name="P:XPTable.Events.ColumnModelEventArgs.ToIndex">
            <summary>
            Gets the end index of the affected Column(s)
            </summary>
        </member>
        <member name="T:XPTable.Editors.TextCellEditor">
            <summary>
            A class for editing Cells that contain strings
            </summary>
        </member>
        <member name="T:XPTable.Editors.CellEditor">
            <summary>
            Base class for Cell editors
            </summary>
        </member>
        <member name="T:XPTable.Editors.IMouseMessageFilterClient">
            <summary>
            Indicates that an object is interested in receiving mouse messages 
            before they are sent to their destination
            </summary>
        </member>
        <member name="M:XPTable.Editors.IMouseMessageFilterClient.ProcessMouseMessage(System.Windows.Forms.Control,XPTable.Win32.WindowMessage,System.Int32,System.Int32)">
            <summary>
            Filters out a mouse message before it is dispatched
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="msg">A WindowMessage that represents the message to process</param>
            <param name="wParam">Specifies the WParam field of the message</param>
            <param name="lParam">Specifies the LParam field of the message</param>
            <returns>true to filter the message and prevent it from being dispatched; 
            false to allow the message to continue to the next filter or control</returns>
        </member>
        <member name="T:XPTable.Editors.IKeyMessageFilterClient">
            <summary>
            Indicates that an object is interested in receiving key messages 
            before they are sent to their destination
            </summary>
        </member>
        <member name="M:XPTable.Editors.IKeyMessageFilterClient.ProcessKeyMessage(System.Windows.Forms.Control,XPTable.Win32.WindowMessage,System.Int32,System.Int32)">
            <summary>
            Filters out a key message before it is dispatched
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="msg">A WindowMessage that represents the message to process</param>
            <param name="wParam">Specifies the WParam field of the message</param>
            <param name="lParam">Specifies the LParam field of the message</param>
            <returns>true to filter the message and prevent it from being dispatched; 
            false to allow the message to continue to the next filter or control</returns>
        </member>
        <member name="F:XPTable.Editors.CellEditor.control">
            <summary>
            The Control that is performing the editing
            </summary>
        </member>
        <member name="F:XPTable.Editors.CellEditor.cell">
            <summary>
            The Cell that is being edited
            </summary>
        </member>
        <member name="F:XPTable.Editors.CellEditor.table">
            <summary>
            The Table that contains the Cell being edited
            </summary>
        </member>
        <member name="F:XPTable.Editors.CellEditor.cellPos">
            <summary>
            A CellPos that represents the position of the Cell being edited
            </summary>
        </member>
        <member name="F:XPTable.Editors.CellEditor.cellRect">
            <summary>
            The Rectangle that represents the Cells location and size
            </summary>
        </member>
        <member name="F:XPTable.Editors.CellEditor.mouseMessageFilter">
            <summary>
            A MouseMessageFilter that receives mouse messages before they 
            are dispatched to their destination
            </summary>
        </member>
        <member name="F:XPTable.Editors.CellEditor.keyMessageFilter">
            <summary>
            A KeyMessageFilter that receives key messages before they 
            are dispatched to their destination
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.#ctor">
            <summary>
            Initializes a new instance of the CellEditor class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.PrepareForEditing(XPTable.Models.Cell,XPTable.Models.Table,XPTable.Models.CellPos,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Prepares the CellEditor to edit the specified Cell
            </summary>
            <param name="cell">The Cell to be edited</param>
            <param name="table">The Table that contains the Cell</param>
            <param name="cellPos">A CellPos representing the position of the Cell</param>
            <param name="cellRect">The Rectangle that represents the Cells location and size</param>
            <param name="userSetEditorValues">Specifies whether the ICellEditors 
            starting value has already been set by the user</param>
            <returns>true if the ICellEditor can continue editing the Cell, false otherwise</returns>
        </member>
        <member name="M:XPTable.Editors.CellEditor.SetEditLocation(System.Drawing.Rectangle)">
            <summary>
            Sets the location and size of the CellEditor
            </summary>
            <param name="cellRect">A Rectangle that represents the size and location 
            of the Cell being edited</param>
        </member>
        <member name="M:XPTable.Editors.CellEditor.SetEditValue">
            <summary>
            Sets the initial value of the editor based on the contents of 
            the Cell being edited
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.SetCellValue">
            <summary>
            Sets the contents of the Cell being edited based on the value 
            in the editor
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.ShowEditControl">
            <summary>
            Displays the editor to the user and adds it to the Table's Control
            collection
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.HideEditControl">
            <summary>
            Conceals the editor from the user, but does not remove it from the 
            Table's Control collection
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.RemoveEditControl">
            <summary>
            Conceals the editor from the user and removes it from the Table's 
            Control collection
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.CellEditor.ProcessMouseMessage(System.Windows.Forms.Control,XPTable.Win32.WindowMessage,System.Int32,System.Int32)">
            <summary>
            Filters out a mouse message before it is dispatched
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="msg">A WindowMessage that represents the message to process</param>
            <param name="wParam">Specifies the WParam field of the message</param>
            <param name="lParam">Specifies the LParam field of the message</param>
            <returns>true to filter the message and prevent it from being dispatched; 
            false to allow the message to continue to the next filter or control</returns>
        </member>
        <member name="M:XPTable.Editors.CellEditor.ProcessKeyMessage(System.Windows.Forms.Control,XPTable.Win32.WindowMessage,System.Int32,System.Int32)">
            <summary>
            Filters out a key message before it is dispatched
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="msg">A WindowMessage that represents the message to process</param>
            <param name="wParam">Specifies the WParam field of the message</param>
            <param name="lParam">Specifies the LParam field of the message</param>
            <returns>true to filter the message and prevent it from being dispatched; 
            false to allow the message to continue to the next filter or control</returns>
        </member>
        <member name="M:XPTable.Editors.CellEditor.OnBeginEdit(XPTable.Events.CellEditEventArgs)">
            <summary>
            Raises the BeginEdit event
            </summary>
            <param name="e">A CellEditEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.CellEditor.OnEndEdit(XPTable.Events.CellEditEventArgs)">
            <summary>
            Raises the EndEdit event
            </summary>
            <param name="e">A CellEditEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.CellEditor.OnCancelEdit(XPTable.Events.CellEditEventArgs)">
            <summary>
            Raises the CancelEdit event
            </summary>
            <param name="e">A CellEditEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Editors.CellEditor.BeginEdit">
            <summary>
            Occurs when the CellEditor begins editing a Cell
            </summary>
        </member>
        <member name="E:XPTable.Editors.CellEditor.EndEdit">
            <summary>
            Occurs when the CellEditor stops editing a Cell
            </summary>
        </member>
        <member name="E:XPTable.Editors.CellEditor.CancelEdit">
            <summary>
            Occurs when the editing of a Cell is cancelled
            </summary>
        </member>
        <member name="P:XPTable.Editors.CellEditor.Control">
            <summary>
            Gets or sets the Control that is being used to edit the Cell
            </summary>
        </member>
        <member name="P:XPTable.Editors.CellEditor.EditingCell">
            <summary>
            Gets the Cell that is being edited
            </summary>
        </member>
        <member name="P:XPTable.Editors.CellEditor.EditingTable">
            <summary>
            Gets the Table that contains the Cell being edited
            </summary>
        </member>
        <member name="P:XPTable.Editors.CellEditor.EditingCellPos">
            <summary>
            Gets a CellPos that represents the position of the Cell being edited
            </summary>
        </member>
        <member name="P:XPTable.Editors.CellEditor.IsEditing">
            <summary>
            Gets whether the CellEditor is currently editing a Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.#ctor">
            <summary>
            Initializes a new instance of the TextCellEditor class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.SetEditLocation(System.Drawing.Rectangle)">
            <summary>
            Sets the location and size of the CellEditor
            </summary>
            <param name="cellRect">A Rectangle that represents the size and location 
            of the Cell being edited</param>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.SetEditValue">
            <summary>
            Sets the initial value of the editor based on the contents of 
            the Cell being edited
            </summary>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.SetCellValue">
            <summary>
            Sets the contents of the Cell being edited based on the value 
            in the editor
            </summary>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handler for the editors TextBox.KeyPress event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A KeyPressEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.TextCellEditor.OnLostFocus(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors TextBox.LostFocus event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Editors.TextCellEditor.TextBox">
            <summary>
            Gets the TextBox used to edit the Cells contents
            </summary>
        </member>
        <member name="T:XPTable.Win32.RECT">
            <summary>
            The RECT structure defines the coordinates of the upper-left 
            and lower-right corners of a rectangle
            </summary>
        </member>
        <member name="F:XPTable.Win32.RECT.left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the RECT
            </summary>
        </member>
        <member name="F:XPTable.Win32.RECT.top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the RECT
            </summary>
        </member>
        <member name="F:XPTable.Win32.RECT.right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the RECT
            </summary>
        </member>
        <member name="F:XPTable.Win32.RECT.bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the RECT
            </summary>
        </member>
        <member name="M:XPTable.Win32.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new RECT struct with the specified location and size
            </summary>
            <param name="left">The x-coordinate of the upper-left corner of the RECT</param>
            <param name="top">The y-coordinate of the upper-left corner of the RECT</param>
            <param name="right">The x-coordinate of the lower-right corner of the RECT</param>
            <param name="bottom">The y-coordinate of the lower-right corner of the RECT</param>
        </member>
        <member name="M:XPTable.Win32.RECT.FromRectangle(System.Drawing.Rectangle)">
            <summary>
            Creates a new RECT struct from the specified Rectangle
            </summary>
            <param name="rect">The Rectangle to create the RECT from</param>
            <returns>A RECT struct with the same location and size as 
            the specified Rectangle</returns>
        </member>
        <member name="M:XPTable.Win32.RECT.FromXYWH(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new RECT struct with the specified location and size
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the RECT</param>
            <param name="y">The y-coordinate of the upper-left corner of the RECT</param>
            <param name="width">The width of the RECT</param>
            <param name="height">The height of the RECT</param>
            <returns>A RECT struct with the specified location and size</returns>
        </member>
        <member name="M:XPTable.Win32.RECT.ToRectangle">
            <summary>
            Returns a Rectangle with the same location and size as the RECT
            </summary>
            <returns>A Rectangle with the same location and size as the RECT</returns>
        </member>
        <member name="T:XPTable.Themes.ThemeClasses">
            <summary>
            Represents the different types of objects that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="M:XPTable.Themes.ThemeClasses.#ctor">
            <summary>
            Private constructor so that the class can't be instantiated
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.Button">
            <summary>
            Button objects (Button, CheckBox, RadioButton)
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.ComboBox">
            <summary>
            ComboBox objects
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.TextBox">
            <summary>
            TextBox objects
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.ColumnHeader">
            <summary>
            ColumnHeader objects
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.ListView">
            <summary>
            ListView objects
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.ProgressBar">
            <summary>
            ProgressBar objects
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.TabControl">
            <summary>
            TabControl objects
            </summary>
        </member>
        <member name="P:XPTable.Themes.ThemeClasses.UpDown">
            <summary>
            UpDown objects
            </summary>
        </member>
        <member name="T:XPTable.Themes.CheckBoxStates">
            <summary>
            Represents the different states of a CheckBox
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.UncheckedNormal">
            <summary>
            The CheckBox is unchecked and in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.UncheckedHot">
            <summary>
            The CheckBox is unchecked and is currently highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.UncheckedPressed">
            <summary>
            The CheckBox is unchecked and is currently pressed by 
            the mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.UncheckedDisabled">
            <summary>
            The CheckBox is unchecked and is disabled
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.CheckedNormal">
            <summary>
            The CheckBox is checked and in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.CheckedHot">
            <summary>
            The CheckBox is checked and is currently highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.CheckedPressed">
            <summary>
            The CheckBox is checked and is currently pressed by the 
            mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.CheckedDisabled">
            <summary>
            The CheckBox is checked and is disabled
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.MixedNormal">
            <summary>
            The CheckBox is in an indeterminate state
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.MixedHot">
            <summary>
            The CheckBox is in an indeterminate state and is currently 
            highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.MixedPressed">
            <summary>
            The CheckBox is in an indeterminate state and is currently 
            pressed by the mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.CheckBoxStates.MixedDisabled">
            <summary>
            The CheckBox is in an indeterminate state and is disabled
            </summary>
        </member>
        <member name="T:XPTable.Sorting.CheckBoxComparer">
            <summary>
            An IComparer for sorting Cells that contain CheckBoxes
            </summary>
        </member>
        <member name="M:XPTable.Sorting.CheckBoxComparer.#ctor(XPTable.Models.TableModel,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the CheckBoxComparer class with the specified 
            TableModel, Column index and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.CheckBoxComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="T:XPTable.Renderers.ButtonRendererData">
            <summary>
            Contains information about the current state of a Cell's button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ButtonRendererData.buttonState">
            <summary>
            The current state of the button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ButtonRendererData.clickX">
            <summary>
            The x coordinate of the last mouse click point
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ButtonRendererData.clickY">
            <summary>
            The y coordinate of the last mouse click point
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ButtonRendererData.#ctor">
            <summary>
            Initializes a new instance of the ButtonRendererData class
            </summary>
        </member>
        <member name="P:XPTable.Renderers.ButtonRendererData.ButtonState">
            <summary>
            Gets or sets the current state of the button
            </summary>
        </member>
        <member name="P:XPTable.Renderers.ButtonRendererData.ClickPoint">
            <summary>
            Gets or sets the Point that the mouse was last clicked in the button
            </summary>
        </member>
        <member name="T:XPTable.Models.RowAlignment">
            <summary>
            Specifies alignment of a Rows content
            </summary>
        </member>
        <member name="F:XPTable.Models.RowAlignment.Top">
            <summary>
            The Rows content is aligned to the top
            </summary>
        </member>
        <member name="F:XPTable.Models.RowAlignment.Center">
            <summary>
            The Rows content is aligned to the center
            </summary>
        </member>
        <member name="F:XPTable.Models.RowAlignment.Bottom">
            <summary>
            The Rows content is aligned to the bottom
            </summary>
        </member>
        <member name="T:XPTable.Models.HeaderContextMenu">
            <summary>
            A specialized ContextMenu for Column Headers
            </summary>
        </member>
        <member name="F:XPTable.Models.HeaderContextMenu.model">
            <summary>
            The ColumnModel that owns the menu
            </summary>
        </member>
        <member name="F:XPTable.Models.HeaderContextMenu.enabled">
            <summary>
            Specifies whether the menu is enabled
            </summary>
        </member>
        <member name="F:XPTable.Models.HeaderContextMenu.moreMenuItem">
            <summary>
            More columns menuitem
            </summary>
        </member>
        <member name="F:XPTable.Models.HeaderContextMenu.separator">
            <summary>
            Seperator menuitem
            </summary>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.#ctor">
            <summary>
            Initializes a new instance of the HeaderContextMenu class with 
            no menu items specified
            </summary>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Displays the shortcut menu at the specified position
            </summary>
            <param name="control">A Control object that specifies the control 
            with which this shortcut menu is associated</param>
            <param name="pos">A Point object that specifies the coordinates at 
            which to display the menu. These coordinates are specified relative 
            to the client coordinates of the control specified in the control 
            parameter</param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.OnPopup(System.EventArgs)">
            <summary>
            Raises the Popup event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.menuItem_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.moreMenuItem_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:XPTable.Models.HeaderContextMenu.Enabled">
            <summary>
            
            </summary>
        </member>
        <member name="T:XPTable.Models.HeaderContextMenu.ShowColumnsDialog">
            <summary>
            Summary description for ShowColumnsDialog.
            </summary>
        </member>
        <member name="F:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.AddColumns(XPTable.Models.ColumnModel)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.showButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.hideButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.okButton_Click(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.columnTable_SelectionChanged(System.Object,XPTable.Events.SelectionEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.columnTable_CellCheckChanged(System.Object,XPTable.Events.CellCheckBoxEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Models.HeaderContextMenu.ShowColumnsDialog.widthTextBox_KeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:XPTable.Models.CellCheckStyle">
            <summary>
            Stores CheckBox related properties for a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.CellCheckStyle.checkState">
            <summary>
            The CheckState of the Cells check box
            </summary>
        </member>
        <member name="F:XPTable.Models.CellCheckStyle.threeState">
            <summary>
            Specifies whether the Cells check box supports an indeterminate state
            </summary>
        </member>
        <member name="M:XPTable.Models.CellCheckStyle.#ctor">
            <summary>
            Initializes a new instance of the CellCheckStyle class with default settings
            </summary>
        </member>
        <member name="P:XPTable.Models.CellCheckStyle.Checked">
            <summary>
            Gets or sets whether the Cell is in the checked state
            </summary>
        </member>
        <member name="P:XPTable.Models.CellCheckStyle.CheckState">
            <summary>
            Gets or sets the state of the Cells check box
            </summary>
        </member>
        <member name="P:XPTable.Models.CellCheckStyle.ThreeState">
            <summary>
            Gets or sets a value indicating whether the Cells check box 
            will allow three check states rather than two
            </summary>
        </member>
        <member name="T:XPTable.Models.Cell">
            <summary>
            Represents a Cell that is displayed in a Table
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.text">
            <summary>
            The text displayed in the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.data">
            <summary>
            An object that contains data to be displayed in the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.tag">
            <summary>
            An object that contains data about the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.rendererData">
            <summary>
            Stores information used by CellRenderers to record the current 
            state of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.row">
            <summary>
            The Row that the Cell belongs to
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.index">
            <summary>
            The index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.state">
            <summary>
            Contains the current state of the the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.cellStyle">
            <summary>
            The Cells CellStyle settings
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.checkStyle">
            <summary>
            The Cells CellCheckStyle settings
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.imageStyle">
            <summary>
            The Cells CellImageStyle settings
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.tooltipText">
            <summary>
            The text displayed in the Cells tooltip
            </summary>
        </member>
        <member name="F:XPTable.Models.Cell.disposed">
            <summary>
            Specifies whether the Cell has been disposed
            </summary>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor">
            <summary>
            Initializes a new instance of the Cell class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Cell class with the specified text
            </summary>
            <param name="text">The text displayed in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the Cell class with the specified object
            </summary>
            <param name="value">The object displayed in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the Cell class with the specified text 
            and object
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="value">The object displayed in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the Cell class with the specified text 
            and check value
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="check">Specifies whether the Cell is Checked</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Initializes a new instance of the Cell class with the specified text 
            and Image value
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="image">The Image displayed in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the Cell class with the specified text, 
            fore Color, back Color and Font
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="foreColor">The foreground Color of the Cell</param>
            <param name="backColor">The background Color of the Cell</param>
            <param name="font">The Font used to draw the text in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,XPTable.Models.CellStyle)">
            <summary>
            Initializes a new instance of the Cell class with the specified text 
            and CellStyle
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="cellStyle">A CellStyle that specifies the visual appearance 
            of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.Object,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the Cell class with the specified object, 
            fore Color, back Color and Font
            </summary>
            <param name="value">The object displayed in the Cell</param>
            <param name="foreColor">The foreground Color of the Cell</param>
            <param name="backColor">The background Color of the Cell</param>
            <param name="font">The Font used to draw the text in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.Object,XPTable.Models.CellStyle)">
            <summary>
            Initializes a new instance of the Cell class with the specified text 
            and CellStyle
            </summary>
            <param name="value">The object displayed in the Cell</param>
            <param name="cellStyle">A CellStyle that specifies the visual appearance 
            of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Object,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the Cell class with the specified text, 
            object, fore Color, back Color and Font
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="value">The object displayed in the Cell</param>
            <param name="foreColor">The foreground Color of the Cell</param>
            <param name="backColor">The background Color of the Cell</param>
            <param name="font">The Font used to draw the text in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Object,XPTable.Models.CellStyle)">
            <summary>
            Initializes a new instance of the Cell class with the specified text, 
            object and CellStyle
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="value">The object displayed in the Cell</param>
            <param name="cellStyle">A CellStyle that specifies the visual appearance 
            of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Boolean,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the Cell class with the specified text, 
            check value, fore Color, back Color and Font
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="check">Specifies whether the Cell is Checked</param>
            <param name="foreColor">The foreground Color of the Cell</param>
            <param name="backColor">The background Color of the Cell</param>
            <param name="font">The Font used to draw the text in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Boolean,XPTable.Models.CellStyle)">
            <summary>
            Initializes a new instance of the Cell class with the specified text, 
            check value and CellStyle
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="check">Specifies whether the Cell is Checked</param>
            <param name="cellStyle">A CellStyle that specifies the visual appearance 
            of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Drawing.Image,System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the Cell class with the specified text, 
            Image, fore Color, back Color and Font
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="image">The Image displayed in the Cell</param>
            <param name="foreColor">The foreground Color of the Cell</param>
            <param name="backColor">The background Color of the Cell</param>
            <param name="font">The Font used to draw the text in the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.#ctor(System.String,System.Drawing.Image,XPTable.Models.CellStyle)">
            <summary>
            Initializes a new instance of the Cell class with the specified text, 
            Image and CellStyle
            </summary>
            <param name="text">The text displayed in the Cell</param>
            <param name="image">The Image displayed in the Cell</param>
            <param name="cellStyle">A CellStyle that specifies the visual appearance 
            of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Cell.Init">
            <summary>
            Initialise default values
            </summary>
        </member>
        <member name="M:XPTable.Models.Cell.Dispose">
            <summary>
            Releases all resources used by the Cell
            </summary>
        </member>
        <member name="M:XPTable.Models.Cell.GetState(System.Int32)">
            <summary>
            Returns the state represented by the specified state flag
            </summary>
            <param name="flag">A flag that represents the state to return</param>
            <returns>The state represented by the specified state flag</returns>
        </member>
        <member name="M:XPTable.Models.Cell.SetState(System.Int32,System.Boolean)">
            <summary>
            Sets the state represented by the specified state flag to the specified value
            </summary>
            <param name="flag">A flag that represents the state to be set</param>
            <param name="value">The new value of the state</param>
        </member>
        <member name="M:XPTable.Models.Cell.SetSelected(System.Boolean)">
            <summary>
            Sets whether the Cell is selected
            </summary>
            <param name="selected">A boolean value that specifies whether the 
            cell is selected</param>
        </member>
        <member name="M:XPTable.Models.Cell.ShouldSerializeBackColor">
            <summary>
            Specifies whether the BackColor property should be serialized at 
            design time
            </summary>
            <returns>true if the BackColor property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Cell.ShouldSerializeForeColor">
            <summary>
            Specifies whether the ForeColor property should be serialized at 
            design time
            </summary>
            <returns>true if the ForeColor property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Cell.ShouldSerializeFont">
            <summary>
            Specifies whether the Font property should be serialized at 
            design time
            </summary>
            <returns>true if the Font property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Cell.ShouldSerializePadding">
            <summary>
            Specifies whether the Padding property should be serialized at 
            design time
            </summary>
            <returns>true if the Padding property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Cell.ShouldSerializeEditable">
            <summary>
            Specifies whether the Editable property should be serialized at 
            design time
            </summary>
            <returns>true if the Editable property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Cell.ShouldSerializeEnabled">
            <summary>
            Specifies whether the Enabled property should be serialized at 
            design time
            </summary>
            <returns>true if the Enabled property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Cell.OnPropertyChanged(XPTable.Events.CellEventArgs)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Models.Cell.PropertyChanged">
            <summary>
            Occurs when the value of a Cells property changes
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Text">
            <summary>
            Gets or sets the text displayed by the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Data">
            <summary>
            Gets or sets the Cells non-text data
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Tag">
            <summary>
            Gets or sets the object that contains data about the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.CellStyle">
            <summary>
            Gets or sets the CellStyle used by the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Selected">
            <summary>
            Gets or sets whether the Cell is selected
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.BackColor">
            <summary>
            Gets or sets the background Color for the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.ForeColor">
            <summary>
            Gets or sets the foreground Color for the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Font">
            <summary>
            Gets or sets the Font used by the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Padding">
            <summary>
            Gets or sets the amount of space between the Cells Border and its contents
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Checked">
            <summary>
            Gets or sets whether the Cell is in the checked state
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.CheckState">
            <summary>
            Gets or sets the state of the Cells check box
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.ThreeState">
            <summary>
            Gets or sets a value indicating whether the Cells check box 
            will allow three check states rather than two
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Image">
            <summary>
            Gets or sets the image that is displayed in the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.ImageSizeMode">
            <summary>
            Gets or sets how the Cells image is sized within the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Editable">
            <summary>
            Gets or sets a value indicating whether the Cells contents are able 
            to be edited
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Enabled">
            <summary>
            Gets or sets a value indicating whether the Cell 
            can respond to user interaction
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.ToolTipText">
            <summary>
            Gets or sets the text displayed in the Cells tooltip
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.RendererData">
            <summary>
            Gets or sets the information used by CellRenderers to record the current 
            state of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Row">
            <summary>
            Gets the Row that the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.InternalRow">
            <summary>
            Gets or sets the Row that the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.Index">
            <summary>
            Gets the index of the Cell within its Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.InternalIndex">
            <summary>
            Gets or sets the index of the Cell within its Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Cell.CanRaiseEvents">
            <summary>
            Gets whether the Cell is able to raise events
            </summary>
        </member>
        <member name="T:XPTable.Editors.EditStartAction">
            <summary>
            Specifies the action that causes a Cell to start editing
            </summary>
        </member>
        <member name="F:XPTable.Editors.EditStartAction.DoubleClick">
            <summary>
            A double click will start cell editing
            </summary>
        </member>
        <member name="F:XPTable.Editors.EditStartAction.SingleClick">
            <summary>
            A single click will start cell editing
            </summary>
        </member>
        <member name="F:XPTable.Editors.EditStartAction.CustomKey">
            <summary>
            A user defined key press will start cell editing
            </summary>
        </member>
        <member name="T:XPTable.Win32.SIZE">
            <summary>
            The SIZE structure specifies the width and height of a rectangle
            </summary>
        </member>
        <member name="F:XPTable.Win32.SIZE.cx">
            <summary>
            Specifies the x-coordinate of the point
            </summary>
        </member>
        <member name="F:XPTable.Win32.SIZE.cy">
            <summary>
            Specifies the y-coordinate of the point
            </summary>
        </member>
        <member name="M:XPTable.Win32.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new SIZE struct with the specified width and height
            </summary>
            <param name="cx">The width component of the new SIZE</param>
            <param name="cy">The height component of the new SIZE</param>
        </member>
        <member name="M:XPTable.Win32.SIZE.FromSize(System.Drawing.Size)">
            <summary>
            Creates a new SIZE struct from the specified Size
            </summary>
            <param name="s">The Size to create the SIZE from</param>
            <returns>A SIZE struct with the same width and height values as 
            the specified Point</returns>
        </member>
        <member name="M:XPTable.Win32.SIZE.ToSize">
            <summary>
            Returns a Point with the same width and height values as the SIZE
            </summary>
            <returns>A Point with the same width and height values as the SIZE</returns>
        </member>
        <member name="T:XPTable.Win32.DLLVERSIONINFO">
            <summary>
            Receives dynamic-link library (DLL)-specific version information. 
            It is used with the DllGetVersion function
            </summary>
        </member>
        <member name="F:XPTable.Win32.DLLVERSIONINFO.cbSize">
            <summary>
            Size of the structure, in bytes. This member must be filled 
            in before calling the function
            </summary>
        </member>
        <member name="F:XPTable.Win32.DLLVERSIONINFO.dwMajorVersion">
            <summary>
            Major version of the DLL. If the DLL's version is 4.0.950, 
            this value will be 4
            </summary>
        </member>
        <member name="F:XPTable.Win32.DLLVERSIONINFO.dwMinorVersion">
            <summary>
            Minor version of the DLL. If the DLL's version is 4.0.950, 
            this value will be 0
            </summary>
        </member>
        <member name="F:XPTable.Win32.DLLVERSIONINFO.dwBuildNumber">
            <summary>
            Build number of the DLL. If the DLL's version is 4.0.950, 
            this value will be 950
            </summary>
        </member>
        <member name="F:XPTable.Win32.DLLVERSIONINFO.dwPlatformID">
            <summary>
            Identifies the platform for which the DLL was built
            </summary>
        </member>
        <member name="T:XPTable.Themes.UpDownStates">
            <summary>
            Represents the different states of a UpDown control's button
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownStates.Normal">
            <summary>
            The UpDown button is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownStates.Hot">
            <summary>
            The UpDown button is highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownStates.Pressed">
            <summary>
            The UpDown button is being pressed by the mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownStates.Disabled">
            <summary>
            The UpDown button disabled
            </summary>
        </member>
        <member name="T:XPTable.Themes.UpDownParts">
            <summary>
            Represents the different parts of an UpDown control that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownParts.Up">
            <summary>
            An UpDown control's up arrow button
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownParts.Down">
            <summary>
            An UpDown control's down arrow button
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownParts.UpHorz">
            <summary>
            An UpDown control's left arrow button
            </summary>
        </member>
        <member name="F:XPTable.Themes.UpDownParts.DownHorz">
            <summary>
            An UpDown control's right arrow button
            </summary>
        </member>
        <member name="T:XPTable.Renderers.ImageCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as Images
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ImageCellRenderer.drawText">
            <summary>
            Specifies whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ImageCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the ImageCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ImageCellRenderer.CalcImageRect(System.Drawing.Image,XPTable.Models.ImageSizeMode,XPTable.Models.RowAlignment,XPTable.Models.ColumnAlignment)">
            <summary>
            Gets the Rectangle that specifies the Size and Location of 
            the Image contained in the current Cell
            </summary>
            <param name="image">The Image to be drawn</param>
            <param name="sizeMode">An ImageSizeMode that specifies how the 
            specified Image is scaled</param>
            <param name="rowAlignment">The alignment of the current Cell's row</param>
            <param name="columnAlignment">The alignment of the current Cell's Column</param>
            <returns>A Rectangle that specifies the Size and Location of 
            the Image contained in the current Cell</returns>
        </member>
        <member name="M:XPTable.Renderers.ImageCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ImageCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ImageCellRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Draws the Image contained in the Cell
            </summary>
            <param name="g">The Graphics used to paint the Image</param>
            <param name="image">The Image to be drawn</param>
            <param name="imageRect">A rectangle that specifies the Size and 
            Location of the Image</param>
            <param name="scaled">Specifies whether the image is to be scaled</param>
            <param name="enabled">Specifies whether the Image should be drawn 
            in an enabled state</param>
        </member>
        <member name="P:XPTable.Renderers.ImageCellRenderer.DrawText">
            <summary>
            Gets or sets whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="T:XPTable.Models.Design.ColumnCollectionEditor">
            <summary>
            Provides a user interface that can edit collections of Columns 
            at design time
            </summary>
        </member>
        <member name="F:XPTable.Models.Design.ColumnCollectionEditor.columns">
            <summary>
            The ColumnCollection being edited
            </summary>
        </member>
        <member name="F:XPTable.Models.Design.ColumnCollectionEditor.previewTable">
            <summary>
            Preview table
            </summary>
        </member>
        <member name="F:XPTable.Models.Design.ColumnCollectionEditor.previewColumnModel">
            <summary>
            ColumnModel for the preview table
            </summary>
        </member>
        <member name="F:XPTable.Models.Design.ColumnCollectionEditor.previewTableModel">
            <summary>
            TableModel for the preview table
            </summary>
        </member>
        <member name="F:XPTable.Models.Design.ColumnCollectionEditor.previewLabel">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the ColumnCollectionEditor class 
            using the specified collection type
            </summary>
            <param name="type">The type of the collection for this editor to edit</param>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the specified 
            service provider and context
            </summary>
            <param name="context">An ITypeDescriptorContext that can be 
            used to gain additional context information</param>
            <param name="isp">A service provider object through which 
            editing services can be obtained</param>
            <param name="value">The object to edit the value of</param>
            <returns>The new value of the object. If the value of the 
            object has not changed, this should return the same object 
            it was passed</returns>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.CreateNewItemTypes">
            <summary>
            Gets the data types that this collection editor can contain
            </summary>
            <returns>An array of data types that this collection can contain</returns>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Creates a new instance of the specified collection item type
            </summary>
            <param name="itemType">The type of item to create</param>
            <returns>A new instance of the specified object</returns>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.DestroyInstance(System.Object)">
            <summary>
            Destroys the specified instance of the object
            </summary>
            <param name="instance">The object to destroy</param>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.CreateCollectionForm">
            <summary>
            Creates a new form to display and edit the current collection
            </summary>
            <returns>An instance of CollectionEditor.CollectionForm to provide 
            as the user interface for editing the collection</returns>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.PropertyGrid_SelectedObjectsChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for the PropertyGrid's SelectedObjectsChanged event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Design.ColumnCollectionEditor.column_PropertyChanged(System.Object,XPTable.Events.ColumnEventArgs)">
            <summary>
            Handler for a Column's PropertyChanged event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A ColumnEventArgs that contains the event data</param>
        </member>
        <member name="T:XPTable.Events.ColumnEventHandler">
            <summary>
            Represents the methods that will handle the PropertyChanged event of a Column, 
            or a Table's BeginSort and EndSort events
            </summary>
        </member>
        <member name="T:XPTable.Events.ColumnEventArgs">
            <summary>
            Provides data for a Column's PropertyChanged event, or a Table's 
            BeginSort and EndSort events
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventArgs.source">
            <summary>
            The Column that Raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventArgs.index">
            <summary>
            The index of the Column in the ColumnModel
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventArgs.oldValue">
            <summary>
            The old value of the property that changed
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventArgs.eventType">
            <summary>
            The type of event
            </summary>
        </member>
        <member name="M:XPTable.Events.ColumnEventArgs.#ctor(XPTable.Models.Column,XPTable.Events.ColumnEventType,System.Object)">
            <summary>
            Initializes a new instance of the ColumnEventArgs class with 
            the specified Column source, column index and event type
            </summary>
            <param name="source">The Column that Raised the event</param>
            <param name="eventType">The type of event</param>
            <param name="oldValue">The old value of the changed property</param>
        </member>
        <member name="M:XPTable.Events.ColumnEventArgs.#ctor(XPTable.Models.Column,System.Int32,XPTable.Events.ColumnEventType,System.Object)">
            <summary>
            Initializes a new instance of the ColumnEventArgs class with 
            the specified Column source, column index and event type
            </summary>
            <param name="source">The Column that Raised the event</param>
            <param name="index">The index of the Column</param>
            <param name="eventType">The type of event</param>
            <param name="oldValue">The old value of the changed property</param>
        </member>
        <member name="M:XPTable.Events.ColumnEventArgs.SetColumn(XPTable.Models.Column)">
            <summary>
            
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:XPTable.Events.ColumnEventArgs.SetIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:XPTable.Events.ColumnEventArgs.Column">
            <summary>
            Gets the Column that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.ColumnEventArgs.Index">
            <summary>
            Gets the index of the Column
            </summary>
        </member>
        <member name="P:XPTable.Events.ColumnEventArgs.EventType">
            <summary>
            Gets the type of event
            </summary>
        </member>
        <member name="P:XPTable.Events.ColumnEventArgs.OldValue">
            <summary>
            Gets the old value of the Columns changed property
            </summary>
        </member>
        <member name="T:XPTable.Editors.NumberCellEditor">
            <summary>
            A class for editing Cells that contain numbers
            </summary>
        </member>
        <member name="T:XPTable.Editors.IEditorUsesRendererButtons">
            <summary>
            Specifies that a CellEditor uses the buttons provided by its counter-part 
            CellRenderer during editing
            </summary>
        </member>
        <member name="M:XPTable.Editors.IEditorUsesRendererButtons.OnEditorButtonMouseDown(System.Object,XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the EditorButtonMouseDown event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.IEditorUsesRendererButtons.OnEditorButtonMouseUp(System.Object,XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the EditorButtonMouseUp event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.TimerInterval">
            <summary>
            Initial interval between timer events
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.UpButtonID">
            <summary>
            ID number for the up button
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.DownButtonID">
            <summary>
            ID number for the down button
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.currentValue">
            <summary>
            The current value of the editor
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.increment">
            <summary>
            The value to increment or decrement when the up or down buttons are clicked
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.maximum">
            <summary>
            The maximum value for the editor
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.minimum">
            <summary>
            The inximum value for the editor
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.format">
            <summary>
            A string that specifies how editors value is formatted
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.wheelDelta">
            <summary>
            The amount the mouse wheel has moved
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.interceptArrowKeys">
            <summary>
            Indicates whether the arrow keys should be passed to the editor
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.changingText">
            <summary>
            Specifies whether the editors text value is changing
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.interval">
            <summary>
            Current interval between timer events
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.userEdit">
            <summary>
            Indicates whether the user has changed the editors value
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.buttonBounds">
            <summary>
            The bounding Rectangle of the up and down buttons
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.buttonID">
            <summary>
            The id of the button that was pressed
            </summary>
        </member>
        <member name="F:XPTable.Editors.NumberCellEditor.timer">
            <summary>
            Timer to to fire button presses at regular intervals while 
            a button is pressed
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.#ctor">
            <summary>
            Initializes a new instance of the NumberCellEditor class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.PrepareForEditing(XPTable.Models.Cell,XPTable.Models.Table,XPTable.Models.CellPos,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Prepares the CellEditor to edit the specified Cell
            </summary>
            <param name="cell">The Cell to be edited</param>
            <param name="table">The Table that contains the Cell</param>
            <param name="cellPos">A CellPos representing the position of the Cell</param>
            <param name="cellRect">The Rectangle that represents the Cells location and size</param>
            <param name="userSetEditorValues">Specifies whether the ICellEditors 
            starting value has already been set by the user</param>
            <returns>true if the ICellEditor can continue editing the Cell, false otherwise</returns>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.SetEditValue">
            <summary>
            Sets the initial value of the editor based on the contents of 
            the Cell being edited
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.SetCellValue">
            <summary>
            Sets the contents of the Cell being edited based on the value 
            in the editor
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.SetEditLocation(System.Drawing.Rectangle)">
            <summary>
            Sets the location and size of the CellEditor
            </summary>
            <param name="cellRect">A Rectangle that represents the size and location 
            of the Cell being edited</param>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.UpButton">
            <summary>
            Simulates the up button being pressed
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.DownButton">
            <summary>
            Simulates the down button being pressed
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.UpdateEditText">
            <summary>
            Updates the editors text value to the current value
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.ValidateEditText">
            <summary>
            Checks the current value and updates the editors text value
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.ParseEditText">
            <summary>
            Converts the editors current value to a number
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.Constrain(System.Decimal)">
            <summary>
            Ensures that the specified value is between the editors Maximun and 
            Minimum values
            </summary>
            <param name="value">The value to be checked</param>
            <returns>A value is between the editors Maximun and Minimum values</returns>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.StartTimer">
            <summary>
            Starts the Timer
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.StopTimer">
            <summary>
            Stops the Timer
            </summary>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.OnMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handler for the editors TextBox.MouseWheel event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.OnTextBoxKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handler for the editors TextBox.KeyDown event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A KeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.OnTextBoxKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handler for the editors TextBox.KeyPress event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A KeyPressEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.OnTextBoxLostFocus(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors TextBox.LostFocus event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.OnEditorButtonMouseDown(System.Object,XPTable.Events.CellMouseEventArgs)">
            <summary>
            Handler for the editors buttons MouseDown event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.OnEditorButtonMouseUp(System.Object,XPTable.Events.CellMouseEventArgs)">
            <summary>
            Handler for the editors buttons MouseUp event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.NumberCellEditor.TimerHandler(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors Timer event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.TextBox">
            <summary>
            Gets the TextBox used to edit the Cells contents
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.Value">
            <summary>
            Gets or sets the editors current value
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.Increment">
            <summary>
            Gets or sets the value to increment or decrement when the up or down 
            buttons are clicked
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.Maximum">
            <summary>
            Gets or sets the maximum value for the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.Minimum">
            <summary>
            Gets or sets the minimum value for the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.Format">
            <summary>
            Gets or sets the string that specifies how the editors contents 
            are formatted
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.ChangingText">
            <summary>
            Gets or sets whether the editors text is being updated
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.InterceptArrowKeys">
            <summary>
            Gets or sets whether the arrow keys should be passed to the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.NumberCellEditor.UserEdit">
            <summary>
            Gets or sets whether the user has changed the editors value
            </summary>
        </member>
        <member name="T:XPTable.Win32.NativeWindow">
            <summary>
            Summary description for NativeWindow
            </summary>
        </member>
        <member name="F:XPTable.Win32.NativeWindow.GWL_WNDPROC">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Win32.NativeWindow.handle">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Win32.NativeWindow.wndProcDelegate">
            <summary>
            Prevents the delegate being collected
            </summary>
        </member>
        <member name="F:XPTable.Win32.NativeWindow.oldWndFunc">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.#ctor">
            <summary>
            Initializes a new instance of the NativeWindow class
            </summary>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.AssignHandle(System.IntPtr)">
            <summary>
            Assigns a handle to this window
            </summary>
            <param name="hWnd">The handle to assign to this window</param>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.ReleaseHandle">
            <summary>
            Releases the handle associated with this window
            </summary>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window
            </summary>
            <param name="msg">A Message that is associated with the current Windows message</param>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
            <summary>
            Invokes the default window procedure associated with this window. 
            It is an error to call this method when the Handle property is 0
            </summary>
            <param name="m">A Message that is associated with the current Windows message</param>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Handler for the WndProcDelegate
            </summary>
            <param name="hWnd">Handle to the window procedure to receive the message</param>
            <param name="msg">Specifies the message</param>
            <param name="wParam">Specifies additional message-specific information. The contents 
            of this parameter depend on the value of the Msg parameter</param>
            <param name="lParam">Specifies additional message-specific information. The contents 
            of this parameter depend on the value of the Msg parameter</param>
            <returns>The return value specifies the result of the message processing and depends 
            on the message sent</returns>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.SetWindowLong(System.IntPtr,System.Int32,XPTable.Win32.NativeWindow.WndProcDelegate)">
            <summary>
            The SetWindowLong function changes an attribute of the specified window. The 
            function also sets the 32-bit (long) value at the specified offset into the 
            extra window memory
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which 
            the window belongs</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be set.</param>
            <param name="wndProcDelegate">Specifies the replacement value</param>
            <returns>If the function succeeds, the return value is the previous value of 
            the specified 32-bit integer. If the function fails, the return value is zero</returns>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.SetWindowLong(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            The SetWindowLong function changes an attribute of the specified window. The 
            function also sets the 32-bit (long) value at the specified offset into the 
            extra window memory
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which 
            the window belongs</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be set.</param>
            <param name="wndFunc">Specifies the replacement value</param>
            <returns>If the function succeeds, the return value is the previous value of 
            the specified 32-bit integer. If the function fails, the return value is zero</returns>
        </member>
        <member name="M:XPTable.Win32.NativeWindow.CallWindowProc(System.IntPtr,System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            The CallWindowProc function passes message information to the specified window 
            procedure
            </summary>
            <param name="prevWndFunc">Pointer to the previous window procedure. If this value 
            is obtained by calling the GetWindowLong function with the nIndex parameter set to 
            GWL_WNDPROC or DWL_DLGPROC, it is actually either the address of a window or dialog 
            box procedure, or a special internal value meaningful only to CallWindowProc</param>
            <param name="hWnd">Handle to the window procedure to receive the message</param>
            <param name="iMsg">Specifies the message</param>
            <param name="wParam">Specifies additional message-specific information. The contents 
            of this parameter depend on the value of the Msg parameter</param>
            <param name="lParam">Specifies additional message-specific information. The contents 
            of this parameter depend on the value of the Msg parameter</param>
            <returns>The return value specifies the result of the message processing and depends 
            on the message sent</returns>
        </member>
        <member name="P:XPTable.Win32.NativeWindow.Handle">
            <summary>
            Gets the handle for this window
            </summary>
        </member>
        <member name="T:XPTable.Win32.NativeWindow.WndProcDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:XPTable.Themes.PushButtonStates">
            <summary>
            Represents the different states of a Button
            </summary>
        </member>
        <member name="F:XPTable.Themes.PushButtonStates.Normal">
            <summary>
            The Button is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.PushButtonStates.Hot">
            <summary>
            The Button is highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.PushButtonStates.Pressed">
            <summary>
            The Button is being pressed by the mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.PushButtonStates.Disabled">
            <summary>
            The Button is disabled
            </summary>
        </member>
        <member name="F:XPTable.Themes.PushButtonStates.Default">
            <summary>
            The Button is the default button
            </summary>
        </member>
        <member name="T:XPTable.Sorting.MergeSorter">
            <summary>
            A MergeSort implementation for sorting the Cells contained in a TableModel
            </summary>
        </member>
        <member name="M:XPTable.Sorting.MergeSorter.#ctor(XPTable.Models.TableModel,System.Int32,System.Collections.IComparer,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the MergeSorter class with the specified 
            TableModel, Column index, IComparer and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="comparer">The IComparer used to sort the Column's Cells</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.MergeSorter.Sort">
            <summary>
            Starts sorting the Cells in the TableModel
            </summary>
        </member>
        <member name="M:XPTable.Sorting.MergeSorter.Sort(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="fromPos"></param>
            <param name="toPos"></param>
        </member>
        <member name="T:XPTable.Sorting.ColorComparer">
            <summary>
            An IComparer for sorting Cells that contain Color information
            </summary>
        </member>
        <member name="M:XPTable.Sorting.ColorComparer.#ctor(XPTable.Models.TableModel,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the ColorComparer class with the specified 
            TableModel, Column index and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.ColorComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="T:XPTable.Renderers.DropDownCellRenderer">
            <summary>
            Base class for CellRenderers that Cell contents like ComboBoxes
            </summary>
        </member>
        <member name="F:XPTable.Renderers.DropDownCellRenderer.buttonWidth">
            <summary>
            The width of the DropDownCellRenderer's dropdown button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.DropDownCellRenderer.showButton">
            <summary>
            Specifies whether the DropDownCellRenderer dropdown button should be drawn
            </summary>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the DropDownCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.CalcDropDownButtonBounds">
            <summary>
            Gets the Rectangle that specifies the Size and Location of 
            the current Cell's dropdown button
            </summary>
            <returns>A Rectangle that specifies the Size and Location of 
            the current Cell's dropdown button</returns>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.GetDropDownRendererData(XPTable.Models.Cell)">
            <summary>
            Gets the DropDownRendererData specific data used by the Renderer from 
            the specified Cell
            </summary>
            <param name="cell">The Cell to get the DropDownRendererData data for</param>
            <returns>The DropDownRendererData data for the specified Cell</returns>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.OnMouseLeave(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.OnMouseUp(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.OnMouseDown(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.OnMouseMove(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.DropDownCellRenderer.OnPaintBackground(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Paints the Cells background
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Renderers.DropDownCellRenderer.ButtonWidth">
            <summary>
            Gets or sets the width of the dropdown button
            </summary>
        </member>
        <member name="P:XPTable.Renderers.DropDownCellRenderer.ShowDropDownButton">
            <summary>
            Gets or sets whether the DropDownCellRenderer dropdown button should be drawn
            </summary>
        </member>
        <member name="T:XPTable.Models.CellImageStyle">
            <summary>
            Stores Image related properties for a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.CellImageStyle.image">
            <summary>
            The Image displayed in the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.CellImageStyle.imageSizeMode">
            <summary>
            Determines how Images are sized in the Cell
            </summary>
        </member>
        <member name="M:XPTable.Models.CellImageStyle.#ctor">
            <summary>
            Initializes a new instance of the CellImageStyle class with default settings
            </summary>
        </member>
        <member name="P:XPTable.Models.CellImageStyle.Image">
            <summary>
            Gets or sets the image that is displayed in the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.CellImageStyle.ImageSizeMode">
            <summary>
            Gets or sets how the Cells image is sized within the Cell
            </summary>
        </member>
        <member name="T:XPTable.Events.TableModelEventHandler">
            <summary>
            Represents the methods that will handle the RowAdded and RowRemoved 
            events of a TableModel
            </summary>
        </member>
        <member name="T:XPTable.Events.TableModelEventArgs">
            <summary>
            Provides data for a TableModel's RowAdded and RowRemoved events
            </summary>
        </member>
        <member name="F:XPTable.Events.TableModelEventArgs.source">
            <summary>
            The TableModel that Raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.TableModelEventArgs.row">
            <summary>
            The affected Row
            </summary>
        </member>
        <member name="F:XPTable.Events.TableModelEventArgs.toIndex">
            <summary>
            The start index of the affected Row(s)
            </summary>
        </member>
        <member name="F:XPTable.Events.TableModelEventArgs.fromIndex">
            <summary>
            The end index of the affected Row(s)
            </summary>
        </member>
        <member name="M:XPTable.Events.TableModelEventArgs.#ctor(XPTable.Models.TableModel)">
            <summary>
            Initializes a new instance of the TableModelEventArgs class with 
            the specified TableModel source, start index, end index and affected Column
            </summary>
            <param name="source">The TableModel that originated the event</param>
        </member>
        <member name="M:XPTable.Events.TableModelEventArgs.#ctor(XPTable.Models.TableModel,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TableModelEventArgs class with 
            the specified TableModel source, start index, end index and affected Column
            </summary>
            <param name="source">The TableModel that originated the event</param>
            <param name="fromIndex">The start index of the affected Row(s)</param>
            <param name="toIndex">The end index of the affected Row(s)</param>
        </member>
        <member name="M:XPTable.Events.TableModelEventArgs.#ctor(XPTable.Models.TableModel,XPTable.Models.Row,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the TableModelEventArgs class with 
            the specified TableModel source, start index, end index and affected Column
            </summary>
            <param name="source">The TableModel that originated the event</param>
            <param name="row">The affected Row</param>
            <param name="fromIndex">The start index of the affected Row(s)</param>
            <param name="toIndex">The end index of the affected Row(s)</param>
        </member>
        <member name="P:XPTable.Events.TableModelEventArgs.TableModel">
            <summary>
            Gets the TableModel that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.TableModelEventArgs.Row">
            <summary>
            Gets the affected Row
            </summary>
        </member>
        <member name="P:XPTable.Events.TableModelEventArgs.RowFromIndex">
            <summary>
            Gets the start index of the affected Row(s)
            </summary>
        </member>
        <member name="P:XPTable.Events.TableModelEventArgs.RowToIndex">
            <summary>
            Gets the end index of the affected Row(s)
            </summary>
        </member>
        <member name="T:XPTable.Events.CellButtonEventHandler">
            <summary>
            Represents the method that will handle the CellButtonClicked event of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.CellButtonEventArgs">
            <summary>
            Provides data for the CellButtonClicked event of a Table
            </summary>
        </member>
        <member name="M:XPTable.Events.CellButtonEventArgs.#ctor(XPTable.Models.Cell,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellButtonEventArgs class with 
            the specified Cell source, row index and column index
            </summary>
            <param name="source">The Cell that raised the event</param>
            <param name="column">The Column index of the Cell</param>
            <param name="row">The Row index of the Cell</param>
        </member>
        <member name="T:XPTable.Sorting.ShellSorter">
            <summary>
            A ShellSort implementation for sorting the Cells contained in a TableModel
            </summary>
        </member>
        <member name="M:XPTable.Sorting.ShellSorter.#ctor(XPTable.Models.TableModel,System.Int32,System.Collections.IComparer,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the ShellSorter class with the specified 
            TableModel, Column index, IComparer and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="comparer">The IComparer used to sort the Column's Cells</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.ShellSorter.Sort">
            <summary>
            Starts sorting the Cells in the TableModel
            </summary>
        </member>
        <member name="T:XPTable.Renderers.NumberRendererData">
            <summary>
            Contains information about the current state of a number Cell's 
            up and down buttons
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberRendererData.upState">
            <summary>
            The current state of the up button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberRendererData.downState">
            <summary>
            The current state of the down button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberRendererData.clickX">
            <summary>
            The x coordinate of the last mouse click point
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberRendererData.clickY">
            <summary>
            The y coordinate of the last mouse click point
            </summary>
        </member>
        <member name="M:XPTable.Renderers.NumberRendererData.#ctor">
            <summary>
            Initializes a new instance of the NumberRendererData class
            </summary>
        </member>
        <member name="P:XPTable.Renderers.NumberRendererData.UpButtonState">
            <summary>
            Gets or sets the current state of the up button
            </summary>
        </member>
        <member name="P:XPTable.Renderers.NumberRendererData.DownButtonState">
            <summary>
            Gets or sets the current state of the down button
            </summary>
        </member>
        <member name="P:XPTable.Renderers.NumberRendererData.ClickPoint">
            <summary>
            Gets or sets the Point that the mouse was last clicked in a button
            </summary>
        </member>
        <member name="T:XPTable.Models.Design.RowComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Models.Design.RowComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:XPTable.Win32.POINT">
            <summary>
            The POINT structure defines the x- and y- coordinates of a point
            </summary>
        </member>
        <member name="F:XPTable.Win32.POINT.x">
            <summary>
            Specifies the x-coordinate of the point
            </summary>
        </member>
        <member name="F:XPTable.Win32.POINT.y">
            <summary>
            Specifies the y-coordinate of the point
            </summary>
        </member>
        <member name="M:XPTable.Win32.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new RECT struct with the specified x and y coordinates
            </summary>
            <param name="x">The x-coordinate of the point</param>
            <param name="y">The y-coordinate of the point</param>
        </member>
        <member name="M:XPTable.Win32.POINT.FromPoint(System.Drawing.Point)">
            <summary>
            Creates a new POINT struct from the specified Point
            </summary>
            <param name="p">The Point to create the POINT from</param>
            <returns>A POINT struct with the same x and y coordinates as 
            the specified Point</returns>
        </member>
        <member name="M:XPTable.Win32.POINT.ToPoint">
            <summary>
            Returns a Point with the same x and y coordinates as the POINT
            </summary>
            <returns>A Point with the same x and y coordinates as the POINT</returns>
        </member>
        <member name="T:XPTable.Themes.TextBoxStates">
            <summary>
            Represents the different states of a TextBox
            </summary>
        </member>
        <member name="F:XPTable.Themes.TextBoxStates.Normal">
            <summary>
            The TextBox is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.TextBoxStates.Hot">
            <summary>
            The TextBox is highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.TextBoxStates.Selected">
            <summary>
            The TextBox is selected
            </summary>
        </member>
        <member name="F:XPTable.Themes.TextBoxStates.Disabled">
            <summary>
            The TextBox is disabled
            </summary>
        </member>
        <member name="F:XPTable.Themes.TextBoxStates.Focused">
            <summary>
            The TextBox has focus
            </summary>
        </member>
        <member name="F:XPTable.Themes.TextBoxStates.ReadOnly">
            <summary>
            The TextBox is readonly
            </summary>
        </member>
        <member name="T:XPTable.Renderers.ProgressBarCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as a ProgressBar
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ProgressBarCellRenderer.drawPercentageText">
            <summary>
            Specifies whether the ProgressBar's value as a string 
            should be displayed
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ProgressBarCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the ProgressBarCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ProgressBarCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ProgressBarCellRenderer.OnPaintBackground(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ProgressBarCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Renderers.ProgressBarCellRenderer.ClientRectangle">
            <summary>
            Gets the rectangle that represents the client area of the Renderer
            </summary>
        </member>
        <member name="P:XPTable.Renderers.ProgressBarCellRenderer.DrawPercentageText">
            <summary>
            Gets or sets whether the ProgressBar's value as a string 
            should be displayed
            </summary>
        </member>
        <member name="T:XPTable.Renderers.ComboBoxCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as a ComboBox
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ComboBoxCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the ComboBoxCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ComboBoxCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="T:XPTable.Renderers.CheckBoxRendererData">
            <summary>
            Contains information about the current state of a Cell's check box
            </summary>
        </member>
        <member name="F:XPTable.Renderers.CheckBoxRendererData.checkState">
            <summary>
            The current state of the Cells check box
            </summary>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxRendererData.#ctor(XPTable.Themes.CheckBoxStates)">
            <summary>
            Initializes a new instance of the ButtonRendererData class with the 
            specified CheckBox state
            </summary>
            <param name="checkState">The current state of the Cells CheckBox</param>
        </member>
        <member name="P:XPTable.Renderers.CheckBoxRendererData.CheckState">
            <summary>
            Gets or sets the current state of the Cells checkbox
            </summary>
        </member>
        <member name="T:XPTable.Models.Table">
            <summary>
            Summary description for Table.
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.borderStyle">
            <summary>
            The style of the Table's border
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.lastMouseCell">
            <summary>
            The last known cell position that the mouse was over
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.lastMouseDownCell">
            <summary>
            The last known cell position that the mouse's left 
            button was pressed in
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.focusedCell">
            <summary>
            The position of the Cell that currently has focus
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.editingCell">
            <summary>
            The Cell that is currently being edited
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.curentCellEditor">
            <summary>
            The ICellEditor that is currently being used to edit a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.editStartAction">
            <summary>
            The action that must be performed on a Cell to start editing
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.customEditKey">
            <summary>
            The key that must be pressed for editing to start when 
            editStartAction is set to EditStartAction.CustomKey
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.hoverTime">
            <summary>
            The amount of time (in milliseconds) that that the 
            mouse pointer must hover over a Cell or Column Header before 
            a MouseHover event is raised
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.trackMouseEvent">
            <summary>
            A TRACKMOUSEEVENT used to set the hoverTime
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.columnModel">
            <summary>
            The ColumnModel of the Table
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.columnResizing">
            <summary>
            Whether the Table supports column resizing
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.resizingColumnIndex">
            <summary>
            The index of the column currently being resized
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.resizingColumnAnchor">
            <summary>
            The x coordinate of the currently resizing column
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.resizingColumnOffset">
            <summary>
            The horizontal distance between the resize starting
            point and the right edge of the resizing column
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.resizingColumnWidth">
            <summary>
            The width that the resizing column will be set to 
            once column resizing is finished
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.pressedColumn">
            <summary>
            The index of the current pressed column
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.hotColumn">
            <summary>
            The index of the current "hot" column
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.lastSortedColumn">
            <summary>
            The index of the last sorted column
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.sortedColumnBackColor">
            <summary>
            The Color of a sorted Column's background
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.gridLines">
            <summary>
            Indicates whether grid lines appear between the rows and columns 
            containing the rows and cells in the Table
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.gridColor">
            <summary>
            The color of the grid lines
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.gridLineStyle">
            <summary>
            The line style of the grid lines
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.headerStyle">
            <summary>
            The styles of the column headers 
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.headerRenderer">
            <summary>
            The Renderer used to paint the column headers
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.headerFont">
            <summary>
            The font used to draw the text in the column header
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.headerContextMenu">
            <summary>
            The ContextMenu for the column headers
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.tableModel">
            <summary>
            The TableModel of the Table
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.scrollable">
            <summary>
            Indicates whether the Table will allow the user to scroll to any 
            columns or rows placed outside of its visible boundaries
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.hScrollBar">
            <summary>
            The Table's horizontal ScrollBar
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.vScrollBar">
            <summary>
            The Table's vertical ScrollBar
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.allowSelection">
            <summary>
            Specifies whether rows and cells can be selected
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.multiSelect">
            <summary>
            Specifies whether multiple rows and cells can be selected
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.fullRowSelect">
            <summary>
            Specifies whether clicking a row selects all its cells
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.hideSelection">
            <summary>
            Specifies whether the selected rows and cells in the Table remain 
            highlighted when the Table loses focus
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.selectionBackColor">
            <summary>
            The background color of selected rows and cells
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.selectionForeColor">
            <summary>
            The foreground color of selected rows and cells
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.unfocusedSelectionBackColor">
            <summary>
            The background color of selected rows and cells when the Table 
            doesn't have focus
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.unfocusedSelectionForeColor">
            <summary>
            The foreground color of selected rows and cells when the Table 
            doesn't have focus
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.selectionStyle">
            <summary>
            Determines how selected Cells are hilighted
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.tableState">
            <summary>
            The state of the table
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.init">
            <summary>
            Is the Table currently initialising
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.beginUpdateCount">
            <summary>
            The number of times BeginUpdate has been called
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.toolTip">
            <summary>
            The ToolTip used by the Table to display cell and column tooltips
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.alternatingRowColor">
            <summary>
            The alternating row background color
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.noItemsText">
            <summary>
            The text displayed in the Table when it has no data to display
            </summary>
        </member>
        <member name="F:XPTable.Models.Table.preview">
            <summary>
            Specifies whether the Table is being used as a preview Table 
            in a ColumnColection editor
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.#ctor">
            <summary>
            Initializes a new instance of the Table class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.ClientToDisplayRect(System.Int32,System.Int32)">
            <summary>
            Computes the location of the specified client point into coordinates 
            relative to the display rectangle
            </summary>
            <param name="x">The client x coordinate to convert</param>
            <param name="y">The client y coordinate to convert</param>
            <returns>A Point that represents the converted coordinates (x, y), 
            relative to the display rectangle</returns>
        </member>
        <member name="M:XPTable.Models.Table.ClientToDisplayRect(System.Drawing.Point)">
            <summary>
            Computes the location of the specified client point into coordinates 
            relative to the display rectangle
            </summary>
            <param name="p">The client coordinate Point to convert</param>
            <returns>A Point that represents the converted Point, p, 
            relative to the display rectangle</returns>
        </member>
        <member name="M:XPTable.Models.Table.ClientToDisplayRect(System.Drawing.Rectangle)">
            <summary>
            Converts the location of the specified Rectangle into coordinates 
            relative to the display rectangle
            </summary>
            <param name="rect">The Rectangle to convert whose location is in 
            client coordinates</param>
            <returns>A Rectangle that represents the converted Rectangle, rect, 
            relative to the display rectangle</returns>
        </member>
        <member name="M:XPTable.Models.Table.DisplayRectToClient(System.Int32,System.Int32)">
            <summary>
            Computes the location of the specified point relative to the display 
            rectangle point into client coordinates 
            </summary>
            <param name="x">The x coordinate to convert relative to the display rectangle</param>
            <param name="y">The y coordinate to convert relative to the display rectangle</param>
            <returns>A Point that represents the converted coordinates (x, y) relative to 
            the display rectangle in client coordinates</returns>
        </member>
        <member name="M:XPTable.Models.Table.DisplayRectToClient(System.Drawing.Point)">
            <summary>
            Computes the location of the specified point relative to the display 
            rectangle into client coordinates 
            </summary>
            <param name="p">The point relative to the display rectangle to convert</param>
            <returns>A Point that represents the converted Point relative to 
            the display rectangle, p, in client coordinates</returns>
        </member>
        <member name="M:XPTable.Models.Table.DisplayRectToClient(System.Drawing.Rectangle)">
            <summary>
            Converts the location of the specified Rectangle relative to the display 
            rectangle into client coordinates 
            </summary>
            <param name="rect">The Rectangle to convert whose location is relative to 
            the display rectangle</param>
            <returns>A Rectangle that represents the converted Rectangle relative to 
            the display rectangle, rect, in client coordinates</returns>
        </member>
        <member name="M:XPTable.Models.Table.CellAt(System.Int32,System.Int32)">
            <summary>
            Returns the Cell at the specified client coordinates
            </summary>
            <param name="x">The client x coordinate of the Cell</param>
            <param name="y">The client y coordinate of the Cell</param>
            <returns>The Cell at the specified client coordinates, or
            null if it does not exist</returns>
        </member>
        <member name="M:XPTable.Models.Table.CellAt(System.Drawing.Point)">
            <summary>
            Returns the Cell at the specified client Point
            </summary>
            <param name="p">The point of interest</param>
            <returns>The Cell at the specified client Point, 
            or null if not found</returns>
        </member>
        <member name="M:XPTable.Models.Table.CellRect(System.Int32,System.Int32)">
            <summary>
            Returns a Rectangle that specifies the size and location the cell at 
            the specified row and column indexes in client coordinates
            </summary>
            <param name="row">The index of the row that contains the cell</param>
            <param name="column">The index of the column that contains the cell</param>
            <returns>A Rectangle that specifies the size and location the cell at 
            the specified row and column indexes in client coordinates</returns>
        </member>
        <member name="M:XPTable.Models.Table.CellRect(XPTable.Models.CellPos)">
            <summary>
            Returns a Rectangle that specifies the size and location the cell at 
            the specified cell position in client coordinates
            </summary>
            <param name="cellPos">The position of the cell</param>
            <returns>A Rectangle that specifies the size and location the cell at 
            the specified cell position in client coordinates</returns>
        </member>
        <member name="M:XPTable.Models.Table.CellRect(XPTable.Models.Cell)">
            <summary>
             Returns a Rectangle that specifies the size and location of the 
             specified cell in client coordinates
            </summary>
            <param name="cell">The cell whose bounding rectangle is to be retrieved</param>
            <returns>A Rectangle that specifies the size and location the specified 
            cell in client coordinates</returns>
        </member>
        <member name="M:XPTable.Models.Table.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Returns whether Cell at the specified row and column indexes 
            is not null
            </summary>
            <param name="row">The row index of the cell</param>
            <param name="column">The column index of the cell</param>
            <returns>True if the cell at the specified row and column indexes 
            is not null, otherwise false</returns>
        </member>
        <member name="M:XPTable.Models.Table.IsValidCell(XPTable.Models.CellPos)">
            <summary>
            Returns whether Cell at the specified cell position is not null
            </summary>
            <param name="cellPos">The position of the cell</param>
            <returns>True if the cell at the specified cell position is not 
            null, otherwise false</returns>
        </member>
        <member name="M:XPTable.Models.Table.FindNextVisibleEnabledCell(XPTable.Models.CellPos,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a CellPos that specifies the next Cell that is visible 
            and enabled from the specified Cell
            </summary>
            <param name="start">A CellPos that specifies the Cell to start 
            searching from</param>
            <param name="wrap">Specifies whether to move to the start of the 
            next Row when the end of the current Row is reached</param>
            <param name="forward">Specifies whether the search should travel 
            in a forward direction (top to bottom, left to right) through the Cells</param>
            <param name="includeStart">Indicates whether the specified starting 
            Cell is included in the search</param>
            <param name="checkOtherCellsInRow">Specifies whether all Cells in 
            the Row should be included in the search</param>
            <returns>A CellPos that specifies the next Cell that is visible 
            and enabled, or CellPos.Empty if there are no Cells that are visible 
            and enabled</returns>
        </member>
        <member name="M:XPTable.Models.Table.FindNextEditableCell(XPTable.Models.CellPos,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a CellPos that specifies the next Cell that able to be 
            edited from the specified Cell
            </summary>
            <param name="start">A CellPos that specifies the Cell to start 
            searching from</param>
            <param name="wrap">Specifies whether to move to the start of the 
            next Row when the end of the current Row is reached</param>
            <param name="forward">Specifies whether the search should travel 
            in a forward direction (top to bottom, left to right) through the Cells</param>
            <param name="includeStart">Indicates whether the specified starting 
            Cell is included in the search</param>
            <returns>A CellPos that specifies the next Cell that is able to
            be edited, or CellPos.Empty if there are no Cells that editable</returns>
        </member>
        <member name="M:XPTable.Models.Table.ColumnIndexAt(System.Int32,System.Int32)">
            <summary>
            Returns the index of the Column at the specified client coordinates
            </summary>
            <param name="x">The client x coordinate of the Column</param>
            <param name="y">The client y coordinate of the Column</param>
            <returns>The index of the Column at the specified client coordinates, or
            -1 if it does not exist</returns>
        </member>
        <member name="M:XPTable.Models.Table.ColumnIndexAt(System.Drawing.Point)">
            <summary>
            Returns the index of the Column at the specified client point
            </summary>
            <param name="p">The point of interest</param>
            <returns>The index of the Column at the specified client point, or
            -1 if it does not exist</returns>
        </member>
        <member name="M:XPTable.Models.Table.ColumnHeaderRect(System.Int32)">
            <summary>
            Returns the bounding rectangle of the specified 
            column's header in client coordinates
            </summary>
            <param name="column">The index of the column</param>
            <returns>The bounding rectangle of the specified 
            column's header</returns>
        </member>
        <member name="M:XPTable.Models.Table.ColumnHeaderRect(XPTable.Models.Column)">
            <summary>
            Returns the bounding rectangle of the specified 
            column's header in client coordinates
            </summary>
            <param name="column">The column</param>
            <returns>The bounding rectangle of the specified 
            column's header</returns>
        </member>
        <member name="M:XPTable.Models.Table.ColumnRect(System.Int32)">
            <summary>
            Returns the bounding rectangle of the column at the 
            specified index in client coordinates
            </summary>
            <param name="column">The column</param>
            <returns>The bounding rectangle of the column at the 
            specified index</returns>
        </member>
        <member name="M:XPTable.Models.Table.ColumnRect(XPTable.Models.Column)">
            <summary>
            Returns the bounding rectangle of the specified column 
            in client coordinates
            </summary>
            <param name="column">The column</param>
            <returns>The bounding rectangle of the specified 
            column</returns>
        </member>
        <member name="M:XPTable.Models.Table.RowIndexAt(System.Int32,System.Int32)">
            <summary>
            Returns the index of the Row at the specified client coordinates
            </summary>
            <param name="x">The client x coordinate of the Row</param>
            <param name="y">The client y coordinate of the Row</param>
            <returns>The index of the Row at the specified client coordinates, or
            -1 if it does not exist</returns>
        </member>
        <member name="M:XPTable.Models.Table.RowIndexAt(System.Drawing.Point)">
            <summary>
            Returns the index of the Row at the specified client point
            </summary>
            <param name="p">The point of interest</param>
            <returns>The index of the Row at the specified client point, or
            -1 if it does not exist</returns>
        </member>
        <member name="M:XPTable.Models.Table.RowRect(System.Int32)">
            <summary>
            Returns the bounding rectangle of the row at the 
            specified index in client coordinates
            </summary>
            <param name="row">The index of the row</param>
            <returns>The bounding rectangle of the row at the 
            specified index</returns>
        </member>
        <member name="M:XPTable.Models.Table.RowRect(XPTable.Models.Row)">
            <summary>
            Returns the bounding rectangle of the specified row 
            in client coordinates
            </summary>
            <param name="row">The row</param>
            <returns>The bounding rectangle of the specified 
            row</returns>
        </member>
        <member name="M:XPTable.Models.Table.HitTest(System.Int32,System.Int32)">
            <summary>
            Returns a TableRegions value that represents the table region at 
            the specified client coordinates
            </summary>
            <param name="x">The client x coordinate</param>
            <param name="y">The client y coordinate</param>
            <returns>A TableRegions value that represents the table region at 
            the specified client coordinates</returns>
        </member>
        <member name="M:XPTable.Models.Table.HitTest(System.Drawing.Point)">
            <summary>
            Returns a TableRegions value that represents the table region at 
            the specified client point
            </summary>
            <param name="p">The point of interest</param>
            <returns>A TableRegions value that represents the table region at 
            the specified client point</returns>
        </member>
        <member name="M:XPTable.Models.Table.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the Control and optionally 
            releases the managed resources
            </summary>
            <param name="disposing">true to release both managed and unmanaged 
            resources; false to release only unmanaged resources</param>
        </member>
        <member name="M:XPTable.Models.Table.Clear">
            <summary>
            Removes the ColumnModel and TableModel from the Table
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.SetEditingCell(XPTable.Models.Cell,XPTable.Editors.ICellEditor)">
            <summary>
            Records the Cell that is currently being edited and the 
            ICellEditor used to edit the Cell
            </summary>
            <param name="cell">The Cell that is currently being edited</param>
            <param name="editor">The ICellEditor used to edit the Cell</param>
        </member>
        <member name="M:XPTable.Models.Table.SetEditingCell(XPTable.Models.CellPos,XPTable.Editors.ICellEditor)">
            <summary>
            Records the Cell that is currently being edited and the 
            ICellEditor used to edit the Cell
            </summary>
            <param name="cellPos">The Cell that is currently being edited</param>
            <param name="editor">The ICellEditor used to edit the Cell</param>
        </member>
        <member name="M:XPTable.Models.Table.EditCell(System.Int32,System.Int32)">
            <summary>
            Starts editing the Cell at the specified row and column indexes
            </summary>
            <param name="row">The row index of the Cell to be edited</param>
            <param name="column">The column index of the Cell to be edited</param>
        </member>
        <member name="M:XPTable.Models.Table.EditCell(XPTable.Models.CellPos)">
            <summary>
            Starts editing the Cell at the specified CellPos
            </summary>
            <param name="cellPos">A CellPos that specifies the Cell to be edited</param>
        </member>
        <member name="M:XPTable.Models.Table.StopEditing">
            <summary>
            Stops editing the current Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.CancelEditing">
            <summary>
            Cancels editing the current Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.IsCellEditable(System.Int32,System.Int32)">
            <summary>
            Returns whether the Cell at the specified row and column is able 
            to be edited by the user
            </summary>
            <param name="row">The row index of the Cell to check</param>
            <param name="column">The column index of the Cell to check</param>
            <returns>True if the Cell at the specified row and column is able 
            to be edited by the user, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.IsCellEditable(XPTable.Models.CellPos)">
            <summary>
            Returns whether the Cell at the specified CellPos is able 
            to be edited by the user
            </summary>
            <param name="cellpos">A CellPos that specifies the Cell to check</param>
            <returns>True if the Cell at the specified CellPos is able 
            to be edited by the user, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.IsCellEnabled(System.Int32,System.Int32)">
            <summary>
            Returns whether the Cell at the specified row and column is able 
            to respond to user interaction
            </summary>
            <param name="row">The row index of the Cell to check</param>
            <param name="column">The column index of the Cell to check</param>
            <returns>True if the Cell at the specified row and column is able 
            to respond to user interaction, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.IsCellEnabled(XPTable.Models.CellPos)">
            <summary>
            Returns whether the Cell at the specified CellPos is able 
            to respond to user interaction
            </summary>
            <param name="cellpos">A CellPos that specifies the Cell to check</param>
            <returns>True if the Cell at the specified CellPos is able 
            to respond to user interaction, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.InvalidateCell(XPTable.Models.Cell)">
            <summary>
            Invalidates the specified Cell
            </summary>
            <param name="cell">The Cell to be invalidated</param>
        </member>
        <member name="M:XPTable.Models.Table.InvalidateCell(System.Int32,System.Int32)">
            <summary>
            Invalidates the Cell located at the specified row and column indicies
            </summary>
            <param name="row">The row index of the Cell to be invalidated</param>
            <param name="column">The column index of the Cell to be invalidated</param>
        </member>
        <member name="M:XPTable.Models.Table.InvalidateCell(XPTable.Models.CellPos)">
            <summary>
            Invalidates the Cell located at the specified CellPos
            </summary>
            <param name="cellPos">A CellPos that specifies the Cell to be invalidated</param>
        </member>
        <member name="M:XPTable.Models.Table.InvalidateRow(XPTable.Models.Row)">
            <summary>
            Invalidates the specified Row
            </summary>
            <param name="row">The Row to be invalidated</param>
        </member>
        <member name="M:XPTable.Models.Table.InvalidateRow(System.Int32)">
            <summary>
            Invalidates the Row located at the specified row index
            </summary>
            <param name="row">The row index of the Row to be invalidated</param>
        </member>
        <member name="M:XPTable.Models.Table.InvalidateRow(XPTable.Models.CellPos)">
            <summary>
            Invalidates the Row located at the specified CellPos
            </summary>
            <param name="cellPos">A CellPos that specifies the Row to be invalidated</param>
        </member>
        <member name="M:XPTable.Models.Table.IsReservedKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is reserved for use by the Table
            </summary>
            <param name="key">One of the Keys values</param>
            <returns>true if the specified key is reserved for use by the Table; 
            otherwise, false</returns>
        </member>
        <member name="M:XPTable.Models.Table.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            Determines whether the specified key is a regular input key or a special 
            key that requires preprocessing
            </summary>
            <param name="keyData">One of the Keys values</param>
            <returns>true if the specified key is a regular input key; otherwise, false</returns>
        </member>
        <member name="M:XPTable.Models.Table.BeginUpdate">
            <summary>
            Prevents the Table from drawing until the EndUpdate method is called
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.EndUpdate">
            <summary>
            Resumes drawing of the Table after drawing is suspended by the 
            BeginUpdate method
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.BeginInit">
            <summary>
            Signals the object that initialization is starting
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.EndInit">
            <summary>
            Signals the object that initialization is complete
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.ResetMouseEventArgs">
            <summary>
            This member supports the .NET Framework infrastructure and is not 
            intended to be used directly from your code
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.UpdateScrollBars">
            <summary>
            Updates the scrollbars to reflect any changes made to the Table
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.HorizontalScroll(System.Int32)">
            <summary>
            Scrolls the contents of the Table horizontally to the specified value
            </summary>
            <param name="value">The value to scroll to</param>
        </member>
        <member name="M:XPTable.Models.Table.VerticalScroll(System.Int32)">
            <summary>
            Scrolls the contents of the Table vertically to the specified value
            </summary>
            <param name="value">The value to scroll to</param>
        </member>
        <member name="M:XPTable.Models.Table.EnsureVisible(System.Int32,System.Int32)">
            <summary>
            Ensures that the Cell at the specified row and column is visible 
            within the Table, scrolling the contents of the Table if necessary
            </summary>
            <param name="row">The zero-based index of the row to scroll into view</param>
            <param name="column">The zero-based index of the column to scroll into view</param>
            <returns>true if the Table scrolled to the Cell at the specified row 
            and column, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.EnsureVisible(XPTable.Models.CellPos)">
            <summary>
            Ensures that the Cell at the specified CellPos is visible within 
            the Table, scrolling the contents of the Table if necessary
            </summary>
            <param name="cellPos">A CellPos that contains the zero-based index 
            of the row and column to scroll into view</param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Models.Table.Sort">
            <summary>
            Sorts the last sorted column opposite to its current sort order, 
            or sorts the currently focused column in ascending order if no 
            columns have been sorted
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.Sort(System.Boolean)">
            <summary>
            Sorts the last sorted column opposite to its current sort order, 
            or sorts the currently focused column in ascending order if no 
            columns have been sorted
            </summary>
            <param name="stable">Specifies whether a stable sorting method 
            should be used to sort the column</param>
        </member>
        <member name="M:XPTable.Models.Table.Sort(System.Int32)">
            <summary>
            Sorts the specified column opposite to its current sort order, 
            or in ascending order if the column is not sorted
            </summary>
            <param name="column">The index of the column to sort</param>
        </member>
        <member name="M:XPTable.Models.Table.Sort(System.Int32,System.Boolean)">
            <summary>
            Sorts the specified column opposite to its current sort order, 
            or in ascending order if the column is not sorted
            </summary>
            <param name="column">The index of the column to sort</param>
            <param name="stable">Specifies whether a stable sorting method 
            should be used to sort the column</param>
        </member>
        <member name="M:XPTable.Models.Table.Sort(System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Sorts the specified column in the specified sort direction
            </summary>
            <param name="column">The index of the column to sort</param>
            <param name="sortOrder">The direction the column is to be sorted</param>
        </member>
        <member name="M:XPTable.Models.Table.Sort(System.Int32,System.Windows.Forms.SortOrder,System.Boolean)">
            <summary>
            Sorts the specified column in the specified sort direction
            </summary>
            <param name="column">The index of the column to sort</param>
            <param name="sortOrder">The direction the column is to be sorted</param>
            <param name="stable">Specifies whether a stable sorting method 
            should be used to sort the column</param>
        </member>
        <member name="M:XPTable.Models.Table.Sort(System.Int32,XPTable.Models.Column,System.Windows.Forms.SortOrder,System.Boolean)">
            <summary>
            Sorts the specified column in the specified sort direction
            </summary>
            <param name="index">The index of the column to sort</param>
            <param name="column">The column to sort</param>
            <param name="sortOrder">The direction the column is to be sorted</param>
            <param name="stable">Specifies whether a stable sorting method 
            should be used to sort the column</param>
        </member>
        <member name="M:XPTable.Models.Table.IsValidColumn(System.Int32)">
            <summary>
            Returns whether a Column exists at the specified index in the 
            Table's ColumnModel
            </summary>
            <param name="column">The index of the column to check</param>
            <returns>True if a Column exists at the specified index in the 
            Table's ColumnModel, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeSortedColumnBackColor">
            <summary>
            Specifies whether the Table's SortedColumnBackColor property 
            should be serialized at design time
            </summary>
            <returns>True if the SortedColumnBackColor property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeGridColor">
            <summary>
            Specifies whether the Table's GridColor property 
            should be serialized at design time
            </summary>
            <returns>True if the GridColor property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeBackColor">
            <summary>
            Specifies whether the Table's BackColor property 
            should be serialized at design time
            </summary>
            <returns>True if the BackColor property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeHeaderFont">
            <summary>
            Specifies whether the Table's HeaderFont property 
            should be serialized at design time
            </summary>
            <returns>True if the HeaderFont property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeSelectionBackColor">
            <summary>
            Specifies whether the Table's SelectionBackColor property 
            should be serialized at design time
            </summary>
            <returns>True if the SelectionBackColor property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeSelectionForeColor">
            <summary>
            Specifies whether the Table's SelectionForeColor property 
            should be serialized at design time
            </summary>
            <returns>True if the SelectionForeColor property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeUnfocusedSelectionBackColor">
            <summary>
            Specifies whether the Table's UnfocusedSelectionBackColor property 
            should be serialized at design time
            </summary>
            <returns>True if the UnfocusedSelectionBackColor property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.ShouldSerializeUnfocusedSelectionForeColor">
            <summary>
            Specifies whether the Table's UnfocusedSelectionForeColor property 
            should be serialized at design time
            </summary>
            <returns>True if the UnfocusedSelectionForeColor property should be 
            serialized, False otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Table.CalcTableState(System.Int32,System.Int32)">
            <summary>
            Calculates the state of the Table at the specified 
            client coordinates
            </summary>
            <param name="x">The client x coordinate</param>
            <param name="y">The client y coordinate</param>
        </member>
        <member name="M:XPTable.Models.Table.ResetToolTip">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.OnCellPropertyChanged(XPTable.Events.CellEventArgs)">
            <summary>
            Raises the CellPropertyChanged event
            </summary>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.cell_PropertyChanged(System.Object,XPTable.Events.CellEventArgs)">
            <summary>
            Handler for a Cells PropertyChanged event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellButtonClicked(XPTable.Events.CellButtonEventArgs)">
            <summary>
            Raises the CellButtonClicked event
            </summary>
            <param name="e">A CellButtonEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellCheckChanged(XPTable.Events.CellCheckBoxEventArgs)">
            <summary>
            Raises the CellCheckChanged event
            </summary>
            <param name="e">A CellCheckChanged that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellGotFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the CellGotFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellGotFocus(XPTable.Models.CellPos)">
            <summary>
            Raises the GotFocus event for the Cell at the specified position
            </summary>
            <param name="cellPos">The position of the Cell that gained focus</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellLostFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the CellLostFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellLostFocus(XPTable.Models.CellPos)">
            <summary>
            Raises the LostFocus event for the Cell at the specified position
            </summary>
            <param name="cellPos">The position of the Cell that lost focus</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellKeyDown(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the CellKeyDown event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellKeyDown(XPTable.Models.CellPos,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises a KeyDown event for the Cell at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
            <param name="e">A KeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellKeyUp(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the CellKeyUp event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellKeyUp(XPTable.Models.CellPos,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises a KeyUp event for the Cell at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
            <param name="e">A KeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellMouseEnter(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellMouseEnter event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellMouseEnter(XPTable.Models.CellPos)">
            <summary>
            Raises a MouseEnter event for the Cell at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellMouseLeave(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellMouseLeave event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellMouseLeave(XPTable.Models.CellPos)">
            <summary>
            Raises a MouseLeave event for the Cell at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellMouseUp(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellMouseUp event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellMouseUp(XPTable.Models.CellPos,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises a MouseUp event for the Cell at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellMouseDown(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellMouseDown event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellMouseDown(XPTable.Models.CellPos,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises a MouseDown event for the Cell at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellMouseMove(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellMouseMove event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseCellMouseMove(XPTable.Models.CellPos,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises a MouseMove event for the Cell at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.ResetLastMouseCell">
            <summary>
            Resets the last known cell position that the mouse was over to empty
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.OnCellMouseHover(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellHover event
            </summary>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellClick(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellClick event
            </summary>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellDoubleClick(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the CellDoubleClick event
            </summary>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnColumnPropertyChanged(XPTable.Events.ColumnEventArgs)">
            <summary>
            Raises the ColumnPropertyChanged event
            </summary>
            <param name="e">A ColumnEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderMouseEnter(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderMouseEnter event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseHeaderMouseEnter(System.Int32)">
            <summary>
            Raises a MouseEnter event for the Column header at the specified colunm 
            index position
            </summary>
            <param name="index">The index of the column to recieve the event</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderMouseLeave(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderMouseLeave event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseHeaderMouseLeave(System.Int32)">
            <summary>
            Raises a MouseLeave event for the Column header at the specified colunm 
            index position
            </summary>
            <param name="index">The index of the column to recieve the event</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderMouseUp(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderMouseUp event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseHeaderMouseUp(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises a MouseUp event for the Column header at the specified colunm 
            index position
            </summary>
            <param name="index">The index of the column to recieve the event</param>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderMouseDown(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderMouseDown event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseHeaderMouseDown(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises a MouseDown event for the Column header at the specified colunm 
            index position
            </summary>
            <param name="index">The index of the column to recieve the event</param>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderMouseMove(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderMouseMove event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.RaiseHeaderMouseMove(System.Int32,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises a MouseMove event for the Column header at the specified colunm 
            index position
            </summary>
            <param name="index">The index of the column to recieve the event</param>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.ResetHotColumn">
            <summary>
            Resets the current "hot" column
            </summary>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderMouseHover(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderMouseHover event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderClick(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderClick event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderDoubleClick(XPTable.Events.HeaderMouseEventArgs)">
            <summary>
            Raises the HeaderDoubleClick event
            </summary>
            <param name="e">A HeaderMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnColumnModelChanged(System.EventArgs)">
            <summary>
            Raises the ColumnModelChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnColumnAdded(XPTable.Events.ColumnModelEventArgs)">
            <summary>
            Raises the ColumnAdded event
            </summary>
            <param name="e">A ColumnModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnColumnRemoved(XPTable.Events.ColumnModelEventArgs)">
            <summary>
            Raises the ColumnRemoved event
            </summary>
            <param name="e">A ColumnModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHeaderHeightChanged(System.EventArgs)">
            <summary>
            Raises the HeaderHeightChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnBeginEditing(XPTable.Events.CellEditEventArgs)">
            <summary>
            Raises the BeginEditing event
            </summary>
            <param name="e">A CellEditEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnAfterEditing(XPTable.Events.CellEditEventArgs)">
            <summary>
            Raises the AfterEditing event
            </summary>
            <param name="e">A CellEditEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnEditingStopped(XPTable.Events.CellEditEventArgs)">
            <summary>
            Raises the EditingStopped event
            </summary>
            <param name="e">A CellEditEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnEditingCancelled(XPTable.Events.CellEditEventArgs)">
            <summary>
            Raises the EditingCancelled event
            </summary>
            <param name="e">A CellEditEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the GotFocus event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnLostFocus(System.EventArgs)">
            <summary>
            Raises the LostFocus event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyDown event
            </summary>
            <param name="e">A KeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Raises the KeyUp event
            </summary>
            <param name="e">A KeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnLayout(System.Windows.Forms.LayoutEventArgs)">
            <summary>
            Raises the Layout event
            </summary>
            <param name="levent">A LayoutEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnMouseLeave(System.EventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary>
            Raises the MouseWheel event
            </summary>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnMouseHover(System.EventArgs)">
            <summary>
            Raises the MouseHover event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnClick(System.EventArgs)">
            <summary>
            Raises the Click event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the DoubleClick event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.DrawReversibleLine(System.Int32)">
            <summary>
            Draws a reversible line at the specified screen x-coordinate 
            that is the height of the PseudoClientRect
            </summary>
            <param name="x">The screen x-coordinate of the reversible line 
            to be drawn</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintBorder(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the Table's border
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintCell(System.Windows.Forms.PaintEventArgs,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Paints the Cell at the specified row and column indexes
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
            <param name="row">The index of the row that contains the cell to be painted</param>
            <param name="column">The index of the column that contains the cell to be painted</param>
            <param name="cellRect">The bounding Rectangle of the Cell</param>
        </member>
        <member name="M:XPTable.Models.Table.OnBeforePaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the BeforePaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnAfterPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the AfterPaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintGrid(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the Table's grid
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintHeader(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the Table's Column headers
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnBeforePaintHeader(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the BeforePaintHeader event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnAfterPaintHeader(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the AfterPaintHeader event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintRows(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the Table's Rows
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintRow(System.Windows.Forms.PaintEventArgs,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Paints the Row at the specified index
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
            <param name="row">The index of the Row to be painted</param>
            <param name="rowRect">The bounding Rectangle of the Row to be painted</param>
        </member>
        <member name="M:XPTable.Models.Table.OnPaintEmptyTableText(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Paints the message that is displayed when the Table doen't 
            contain any items
            </summary>
            <param name="e">A PaintEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnRowPropertyChanged(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the RowPropertyChanged event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellAdded(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellAdded event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnCellRemoved(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellRemoved event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnHorizontalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Occurs when the Table's horizontal scrollbar is scrolled
            </summary>
            <param name="sender">The object that Raised the event</param>
            <param name="e">A ScrollEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnVerticalScroll(System.Object,System.Windows.Forms.ScrollEventArgs)">
            <summary>
            Occurs when the Table's vertical scrollbar is scrolled
            </summary>
            <param name="sender">The object that Raised the event</param>
            <param name="e">A ScrollEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.scrollBar_GotFocus(System.Object,System.EventArgs)">
            <summary>
            Handler for a ScrollBars GotFocus event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnBeginSort(XPTable.Events.ColumnEventArgs)">
            <summary>
            Raises the BeginSort event
            </summary>
            <param name="e">A ColumnEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnEndSort(XPTable.Events.ColumnEventArgs)">
            <summary>
            Raises the EndSort event
            </summary>
            <param name="e">A ColumnEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnTableModelChanged(System.EventArgs)">
            <summary>
            Raises the TableModelChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnSelectionChanged(XPTable.Events.SelectionEventArgs)">
            <summary>
            Raises the SelectionChanged event
            </summary>
            <param name="e">A TableModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnRowHeightChanged(System.EventArgs)">
            <summary>
            Raises the RowHeightChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnRowAdded(XPTable.Events.TableModelEventArgs)">
            <summary>
            Raises the RowAdded event
            </summary>
            <param name="e">A TableModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Table.OnRowRemoved(XPTable.Events.TableModelEventArgs)">
            <summary>
            Raises the RowRemoved event
            </summary>
            <param name="e">A TableModelEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Models.Table.CellPropertyChanged">
            <summary>
            Occurs when the value of a Cells property changes
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellGotFocus">
            <summary>
            Occurs when a Cell gains focus
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellLostFocus">
            <summary>
            Occurs when a Cell loses focus
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellKeyDown">
            <summary>
            Occurs when a key is pressed when a Cell has focus
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellKeyUp">
            <summary>
            Occurs when a key is released when a Cell has focus
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellMouseEnter">
            <summary>
            Occurs when the mouse pointer enters a Cell
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellMouseLeave">
            <summary>
            Occurs when the mouse pointer leaves a Cell
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellMouseDown">
            <summary>
            Occurs when a mouse pointer is over a Cell and a mouse button is pressed
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellMouseUp">
            <summary>
            Occurs when a mouse pointer is over a Cell and a mouse button is released
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellMouseMove">
            <summary>
            Occurs when a mouse pointer is moved over a Cell
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellMouseHover">
            <summary>
            Occurs when the mouse pointer hovers over a Cell
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellClick">
            <summary>
            Occurs when a Cell is clicked
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellDoubleClick">
            <summary>
            Occurs when a Cell is double-clicked
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellButtonClicked">
            <summary>
            Occurs when a Cell's button is clicked
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellCheckChanged">
            <summary>
            Occurs when a Cell's Checked value changes
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.ColumnPropertyChanged">
            <summary>
            Occurs when a Column's property changes
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderMouseEnter">
            <summary>
            Occurs when the mouse pointer enters a Column Header
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderMouseLeave">
            <summary>
            Occurs when the mouse pointer leaves a Column Header
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderMouseDown">
            <summary>
            Occurs when a mouse pointer is over a Column Header and a mouse button is pressed
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderMouseUp">
            <summary>
            Occurs when a mouse pointer is over a Column Header and a mouse button is released
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderMouseMove">
            <summary>
            Occurs when a mouse pointer is moved over a Column Header
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderMouseHover">
            <summary>
            Occurs when the mouse pointer hovers over a Column Header
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderClick">
            <summary>
            Occurs when a Column Header is clicked
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderDoubleClick">
            <summary>
            Occurs when a Column Header is double-clicked
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.HeaderHeightChanged">
            <summary>
            Occurs when the height of the Column Headers changes
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.ColumnModelChanged">
            <summary>
            Occurs when the value of the Table's ColumnModel property changes 
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.ColumnAdded">
            <summary>
            Occurs when a Column is added to the ColumnModel
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.ColumnRemoved">
            <summary>
            Occurs when a Column is removed from the ColumnModel
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.BeginEditing">
            <summary>
            Occurs when the Table begins editing a Cell
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.AfterEditing">
            <summary>
            Occurs after the Table editing of a cell
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.EditingStopped">
            <summary>
            Occurs when the Table stops editing a Cell
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.EditingCancelled">
            <summary>
            Occurs when the editing of a Cell is cancelled
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellAdded">
            <summary>
            Occurs when a Cell is added to a Row
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.CellRemoved">
            <summary>
            Occurs when a Cell is removed from a Row
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.RowPropertyChanged">
            <summary>
            Occurs when the value of a Rows property changes
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.BeginSort">
            <summary>
            Occurs when a Column is about to be sorted
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.EndSort">
            <summary>
            Occurs after a Column has finished sorting
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.BeforePaintCell">
            <summary>
            Occurs before a Cell is painted
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.AfterPaintCell">
            <summary>
            Occurs after a Cell is painted
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.BeforePaintHeader">
            <summary>
            Occurs before a Column header is painted
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.AfterPaintHeader">
            <summary>
            Occurs after a Column header is painted
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.TableModelChanged">
            <summary>
            Occurs when the value of the Table's TableModel property changes 
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.RowAdded">
            <summary>
            Occurs when a Row is added into the TableModel
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.RowRemoved">
            <summary>
            Occurs when a Row is removed from the TableModel
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.SelectionChanged">
            <summary>
            Occurs when the value of the TableModel Selection property changes
            </summary>
        </member>
        <member name="E:XPTable.Models.Table.RowHeightChanged">
            <summary>
            Occurs when the value of the RowHeight property changes
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.Initializing">
            <summary>
            Gets whether the Table is currently initializing
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.FirstVisibleColumn">
            <summary>
            Gets the index of the first visible Column currently displayed in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.LastVisibleColumn">
            <summary>
            Gets the index of the last visible Column currently displayed in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.BorderStyle">
            <summary>
            Gets or sets the border style for the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.BorderWidth">
            <summary>
            Gets the width of the Tables border
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.LastMouseCell">
            <summary>
            Gets the last known cell position that the mouse was over
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.LastMouseDownCell">
            <summary>
            Gets the last known cell position that the mouse's left 
            button was pressed in
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.FocusedCell">
            <summary>
            Gets or sets the position of the Cell that currently has focus
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HoverTime">
            <summary>
            Gets or sets the amount of time (in milliseconds) that that the 
            mouse pointer must hover over a Cell or Column Header before 
            a MouseHover event is raised
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.PseudoClientRect">
            <summary>
            Gets the rectangle that represents the "client area" of the control.
            (The rectangle excludes the borders and scrollbars)
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.CellDataRect">
            <summary>
            Gets the rectangle that represents the "cell data area" of the control.
            (The rectangle excludes the borders, column headers and scrollbars)
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.InternalBorderRect">
            <summary>
            
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ColumnModel">
            <summary>
            Gets or sets the ColumnModel that contains all the Columns
            displayed in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ColumnResizing">
            <summary>
            Gets or sets whether the Table allows users to resize Column widths
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ColumnCount">
            <summary>
            Returns the number of Columns in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.SortingColumn">
            <summary>
            Returns the index of the currently sorted Column
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.SortedColumnBackColor">
            <summary>
            Gets or sets the background Color for the currently sorted column
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.DisplayRectangle">
            <summary>
            Gets the rectangle that represents the display area of the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.IsEditing">
            <summary>
            Gets whether the Table is currently editing a Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.EditingCell">
            <summary>
            Gets a CellPos that specifies the position of the Cell that 
            is currently being edited
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.EditingCellEditor">
            <summary>
            Gets the ICellEditor that is currently being used to edit a Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.EditStartAction">
            <summary>
            Gets or sets the action that causes editing to be initiated
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.CustomEditKey">
            <summary>
            Gets or sets the custom key used to initiate Cell editing
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.GridLines">
            <summary>
            Gets or sets how grid lines are displayed around rows and columns
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.GridLineStyle">
            <summary>
            Gets or sets the style of the lines used to draw the grid
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.GridColor">
            <summary>
            Gets or sets the Color of the grid lines
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.BackColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HeaderStyle">
            <summary>
            Gets or sets the column header style
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HeaderHeight">
            <summary>
            Gets the height of the column headers
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HeaderRectangle">
            <summary>
            Gets a Rectangle that specifies the size and location of 
            the Table's column header area
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HeaderFont">
            <summary>
            Gets or sets the font used to draw the text in the column headers
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HeaderRenderer">
            <summary>
            Gets or sets the HeaderRenderer used to draw the Column headers
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HeaderContextMenu">
            <summary>
            Gets the ContextMenu used for Column Headers
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.EnableHeaderContextMenu">
            <summary>
            Gets or sets whether the HeaderContextMenu is able to be 
            displayed when the user right clicks on a Column Header
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.RowHeight">
            <summary>
            Gets or sets the height of each row
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.TotalRowHeight">
            <summary>
            Gets the combined height of all the rows in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.TotalRowAndHeaderHeight">
            <summary>
            Gets the combined height of all the rows in the Table 
            plus the height of the column headers
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.RowCount">
            <summary>
            Returns the number of Rows in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.VisibleRowCount">
            <summary>
            Gets the number of rows that are visible in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.TopIndex">
            <summary>
            Gets the index of the first visible row in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.TopItem">
            <summary>
            Gets the first visible row in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.AlternatingRowColor">
            <summary>
            Gets or sets the background color of odd-numbered rows in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.Scrollable">
            <summary>
            Gets or sets a value indicating whether the Table will 
            allow the user to scroll to any columns or rows placed 
            outside of its visible boundaries
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HScroll">
            <summary>
            Gets a value indicating whether the horizontal 
            scroll bar is visible
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.VScroll">
            <summary>
            Gets a value indicating whether the vertical 
            scroll bar is visible
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.AllowSelection">
            <summary>
            Gets or sets whether cells are allowed to be selected
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.SelectionStyle">
            <summary>
            Gets or sets how selected Cells are drawn by a Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.MultiSelect">
            <summary>
            Gets or sets whether multiple cells are allowed to be selected
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.FullRowSelect">
            <summary>
            Gets or sets whether all other cells in the row are highlighted 
            when a cell is selected
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.HideSelection">
            <summary>
            Gets or sets whether highlighting is removed from the selected 
            cells when the Table loses focus
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.SelectionBackColor">
            <summary>
            Gets or sets the background color of a selected cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.SelectionForeColor">
            <summary>
            Gets or sets the foreground color of a selected cell
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.UnfocusedSelectionBackColor">
            <summary>
            Gets or sets the background color of a selected cell when the 
            Table doesn't have the focus
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.UnfocusedSelectionForeColor">
            <summary>
            Gets or sets the foreground color of a selected cell when the 
            Table doesn't have the focus
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.SelectedItems">
            <summary>
            Gets an array that contains the currently selected Rows
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.SelectedIndicies">
            <summary>
            Gets an array that contains the indexes of the currently selected Rows
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.TableModel">
            <summary>
            Gets or sets the TableModel that contains all the Rows
            and Cells displayed in the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.NoItemsText">
            <summary>
            Gets or sets the text displayed by the Table when it doesn't 
            contain any items
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.TableState">
            <summary>
            Gets or sets the current state of the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.CanRaiseEvents">
            <summary>
            Gets whether the Table is able to raise events
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.Preview">
            <summary>
            Gets or sets whether the Table is being used as a preview Table in 
            a ColumnCollectionEditor
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ToolTip">
            <summary>
            Gets the internal tooltip component
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.EnableToolTips">
            <summary>
            Gets or sets whether ToolTips are currently enabled for the Table
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ToolTipAutomaticDelay">
            <summary>
            Gets or sets the automatic delay for the Table's ToolTip
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ToolTipAutoPopDelay">
            <summary>
            Gets or sets the period of time the Table's ToolTip remains visible if 
            the mouse pointer is stationary within a Cell with a valid ToolTip text
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ToolTipInitialDelay">
            <summary>
            Gets or sets the time that passes before the Table's ToolTip appears
            </summary>
        </member>
        <member name="P:XPTable.Models.Table.ToolTipShowAlways">
            <summary>
            Gets or sets whether the Table's ToolTip window is 
            displayed even when its parent control is not active
            </summary>
        </member>
        <member name="T:XPTable.Models.ComboBoxColumn">
            <summary>
            Represents a Column whose Cells are displayed as a ComboBox
            </summary>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.#ctor">
            <summary>
            Creates a new ComboBoxColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.#ctor(System.String)">
            <summary>
            Creates a new ComboBoxColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ComboBoxColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new ComboBoxColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new ComboBoxColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new ComboBoxColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new ComboBoxColumn with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.ComboBoxColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="P:XPTable.Models.ComboBoxColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="T:XPTable.Win32.KeyEventFFlags">
            <summary>
            Specifies the flags used with the keybd_event function
            </summary>
        </member>
        <member name="F:XPTable.Win32.KeyEventFFlags.KEYEVENTF_EXTENDEDKEY">
            <summary>
            If specified, the scan code was preceded by a prefix byte having the value 0xE0 (224)
            </summary>
        </member>
        <member name="F:XPTable.Win32.KeyEventFFlags.KEYEVENTF_KEYUP">
            <summary>
            If specified, the key is being released. If not specified, the key is being depressed
            </summary>
        </member>
        <member name="T:XPTable.Themes.ColumnHeaderStates">
            <summary>
            Represents the different states of a Column Header
            </summary>
        </member>
        <member name="F:XPTable.Themes.ColumnHeaderStates.Normal">
            <summary>
            The Column Header is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.ColumnHeaderStates.Hot">
            <summary>
            The Column Header is highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.ColumnHeaderStates.Pressed">
            <summary>
            The Column Header is being pressed by the mouse
            </summary>
        </member>
        <member name="T:XPTable.Models.GridLineStyle">
            <summary>
            Specifies the style of the lines drawn when a Table draws its grid lines
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLineStyle.Solid">
            <summary>
            Specifies a solid line
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLineStyle.Dash">
            <summary>
            Specifies a line consisting of dashes
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLineStyle.Dot">
            <summary>
            Specifies a line consisting of dots
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLineStyle.DashDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLineStyle.DashDotDot">
            <summary>
            Specifies a line consisting of a repeating pattern of dash-dot-dot
            </summary>
        </member>
        <member name="T:XPTable.Models.ColumnCollection">
            <summary>
            Represents a collection of Column objects
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnCollection.owner">
            <summary>
            The ColumnModel that owns the CollumnCollection
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnCollection.totalColumnWidth">
            <summary>
            A local cache of the combined width of all columns
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnCollection.visibleColumnsWidth">
            <summary>
            A local cache of the combined width of all visible columns
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnCollection.visibleColumnCount">
            <summary>
            A local cache of the number of visible columns
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnCollection.lastVisibleColumn">
            <summary>
            A local cache of the last visible column in the collection
            </summary>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.#ctor(XPTable.Models.ColumnModel)">
            <summary>
            Initializes a new instance of the ColumnModel.ColumnCollection class 
            that belongs to the specified ColumnModel
            </summary>
            <param name="owner">A ColumnModel representing the columnModel that owns 
            the Column collection</param>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.Add(XPTable.Models.Column)">
            <summary>
            Adds the specified Column to the end of the collection
            </summary>
            <param name="column">The Column to add</param>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.AddRange(XPTable.Models.Column[])">
            <summary>
            Adds an array of Column objects to the collection
            </summary>
            <param name="columns">An array of Column objects to add 
            to the collection</param>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.Remove(XPTable.Models.Column)">
            <summary>
            Removes the specified Column from the model
            </summary>
            <param name="column">The Column to remove</param>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.RemoveRange(XPTable.Models.Column[])">
            <summary>
            Removes an array of Column objects from the collection
            </summary>
            <param name="columns">An array of Column objects to remove 
            from the collection</param>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the Column at the specified index from the collection
            </summary>
            <param name="index">The index of the Column to remove</param>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.Clear">
            <summary>
            Removes all Columns from the collection
            </summary>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.IndexOf(XPTable.Models.Column)">
            <summary>
            Returns the index of the specified Column in the model
            </summary>
            <param name="column">The Column to look for</param>
            <returns>The index of the specified Column in the model</returns>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.RecalcWidthCache">
            <summary>
            Recalculates the total combined width of all columns
            </summary>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.OnColumnAdded(XPTable.Events.ColumnModelEventArgs)">
            <summary>
            Raises the ColumnAdded event
            </summary>
            <param name="e">A ColumnModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.ColumnCollection.OnColumnRemoved(XPTable.Events.ColumnModelEventArgs)">
            <summary>
            Raises the ColumnRemoved event
            </summary>
            <param name="e">A ColumnModelEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Models.ColumnCollection.Item(System.Int32)">
            <summary>
            Gets the Column at the specified index
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnCollection.ColumnModel">
            <summary>
            Gets the ColumnModel that owns this ColumnCollection
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnCollection.TotalColumnWidth">
            <summary>
            Returns the total width of all the Columns in the model
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnCollection.VisibleColumnsWidth">
            <summary>
            Returns the total width of all the visible Columns in the model
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnCollection.VisibleColumnCount">
            <summary>
            Returns the number of visible Columns in the model
            </summary>
        </member>
        <member name="P:XPTable.Models.ColumnCollection.LastVisibleColumn">
            <summary>
            Returns the index of the last visible Column in the model
            </summary>
        </member>
        <member name="T:XPTable.Events.PaintCellEventHandler">
            <summary>
            Represents the method that will handle the PaintCell events of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.PaintCellEventArgs">
            <summary>
            Provides data for the PaintCell event
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.cell">
            <summary>
            The Cell to be painted
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.table">
            <summary>
            The Table the Cell belongs to
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.row">
            <summary>
            The Row index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.column">
            <summary>
            The Column index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.selected">
            <summary>
            Specifies whether the Cell is selected
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.focused">
            <summary>
            Specifies whether the Cell has focus
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.sorted">
            <summary>
            Specifies whether the Cell's Column is sorted
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.editable">
            <summary>
            Specifies whether the Cell is editable
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.enabled">
            <summary>
            Specifies whether the Cell is enabled
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.cellRect">
            <summary>
            The rectangle in which to paint the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintCellEventArgs.handled">
            <summary>
            Indicates whether the user has done the paining for us
            </summary>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the PaintCellEventArgs class with 
            the specified graphics and clipping rectangle
            </summary>
            <param name="g">The Graphics used to paint the Cell</param>
            <param name="cellRect">The Rectangle that represents the rectangle 
            in which to paint</param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.#ctor(System.Drawing.Graphics,XPTable.Models.Cell,XPTable.Models.Table,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the PaintCellEventArgs class with 
            the specified graphics, table, row index, column index, selected value,  
            focused value, mouse value and clipping rectangle
            </summary>
            <param name="g">The Graphics used to paint the Cell</param>
            <param name="cell">The Cell to be painted</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="row">The Row index of the Cell</param>
            <param name="column">The Column index of the Cell</param>
            <param name="selected">Specifies whether the Cell is selected</param>
            <param name="focused">Specifies whether the Cell has focus</param>
            <param name="sorted">Specifies whether the Cell's Column is sorted</param>
            <param name="editable">Specifies whether the Cell is able to be edited</param>
            <param name="enabled">Specifies whether the Cell is enabled</param>
            <param name="cellRect">The rectangle in which to paint the Cell</param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetCell(XPTable.Models.Cell)">
            <summary>
            
            </summary>
            <param name="cell"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetTable(XPTable.Models.Table)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetRow(System.Int32)">
            <summary>
            
            </summary>
            <param name="row"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetColumn(System.Int32)">
            <summary>
            
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetSelected(System.Boolean)">
            <summary>
            
            </summary>
            <param name="selected"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetFocused(System.Boolean)">
            <summary>
            
            </summary>
            <param name="focused"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetSorted(System.Boolean)">
            <summary>
            
            </summary>
            <param name="sorted"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetEditable(System.Boolean)">
            <summary>
            
            </summary>
            <param name="editable"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetEnabled(System.Boolean)">
            <summary>
            
            </summary>
            <param name="enabled"></param>
        </member>
        <member name="M:XPTable.Events.PaintCellEventArgs.SetCellRect(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="cellRect"></param>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Cell">
            <summary>
            Gets the Cell to be painted
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Table">
            <summary>
            Gets the Table the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Row">
            <summary>
            Gets the Row index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Column">
            <summary>
            Gets the Column index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Selected">
            <summary>
            Gets whether the Cell is selected
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Focused">
            <summary>
            Gets whether the Cell has focus
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Sorted">
            <summary>
            Gets whether the Cell's Column is sorted
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Editable">
            <summary>
            Gets whether the Cell is able to be edited
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Enabled">
            <summary>
            Gets whether the Cell is enabled
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.CellRect">
            <summary>
            Gets the Cells bounding rectangle
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.CellPos">
            <summary>
            Gets the position of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintCellEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the BeforePaintCell 
            event was handled
            </summary>
        </member>
        <member name="T:XPTable.Editors.MouseMessageFilter">
            <summary>
            A message filter that filters mouse messages
            </summary>
        </member>
        <member name="F:XPTable.Editors.MouseMessageFilter.client">
            <summary>
            An IMouseMessageFilterClient that wishes to receive mouse events
            </summary>
        </member>
        <member name="M:XPTable.Editors.MouseMessageFilter.#ctor(XPTable.Editors.IMouseMessageFilterClient)">
            <summary>
            Initializes a new instance of the CellEditor class with the 
            specified IMouseMessageFilterClient client
            </summary>
        </member>
        <member name="M:XPTable.Editors.MouseMessageFilter.PreFilterMessage(System.Windows.Forms.Message@)">
            <summary>
            Filters out a message before it is dispatched
            </summary>
            <param name="m">The message to be dispatched. You cannot modify 
            this message</param>
            <returns>true to filter the message and prevent it from being 
            dispatched; false to allow the message to continue to the next 
            filter or control</returns>
        </member>
        <member name="P:XPTable.Editors.MouseMessageFilter.Client">
            <summary>
            Gets or sets the IMouseMessageFilterClient that wishes to 
            receive mouse events
            </summary>
        </member>
        <member name="T:XPTable.Win32.NativeMethods">
            <summary>
            A class that contains methods for P/Invoking the Win32 API
            </summary>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.DllGetVersion(XPTable.Win32.DLLVERSIONINFO@)">
            <summary>
            Implemented by many of the Microsoft® Windows® Shell dynamic-link libraries 
            (DLLs) to allow applications to obtain DLL-specific version information
            </summary>
            <param name="pdvi">Pointer to a DLLVERSIONINFO structure that receives the 
            version information. The cbSize member must be filled in before calling 
            the function</param>
            <returns>Returns NOERROR if successful, or an OLE-defined error value otherwise</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.IsThemeActive">
            <summary>
            Tests if a visual style for the current application is active
            </summary>
            <returns>TRUE if a visual style is enabled, and windows with 
            visual styles applied should call OpenThemeData to start using 
            theme drawing services, FALSE otherwise</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.IsAppThemed">
            <summary>
            Reports whether the current application's user interface 
            displays using visual styles
            </summary>
            <returns>TRUE if the application has a visual style applied,
            FALSE otherwise</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.OpenThemeData(System.IntPtr,System.String)">
            <summary>
            Opens the theme data for a window and its associated class
            </summary>
            <param name="hwnd">Handle of the window for which theme data 
            is required</param>
            <param name="pszClassList">Pointer to a string that contains 
            a semicolon-separated list of classes</param>
            <returns>OpenThemeData tries to match each class, one at a 
            time, to a class data section in the active theme. If a match 
            is found, an associated HTHEME handle is returned. If no match 
            is found NULL is returned</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.CloseThemeData(System.IntPtr)">
            <summary>
            Closes the theme data handle
            </summary>
            <param name="hTheme">Handle to a window's specified theme data. 
            Use OpenThemeData to create an HTHEME</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.DrawThemeBackground(System.IntPtr,System.IntPtr,System.Int32,System.Int32,XPTable.Win32.RECT@,XPTable.Win32.RECT@)">
            <summary>
            Draws the background image defined by the visual style for the 
            specified control part
            </summary>
            <param name="hTheme">Handle to a window's specified theme data. 
            Use OpenThemeData to create an HTHEME</param>
            <param name="hdc">Handle to a device context (HDC) used for 
            drawing the theme-defined background image</param>
            <param name="iPartId">Value of type int that specifies the part 
            to draw</param>
            <param name="iStateId">Value of type int that specifies the state 
            of the part to draw</param>
            <param name="pRect">Pointer to a RECT structure that contains the 
            rectangle, in logical coordinates, in which the background image 
            is drawn</param>
            <param name="pClipRect">Pointer to a RECT structure that contains 
            a clipping rectangle. This parameter may be set to NULL</param>
            <returns>Returns S_OK if successful, or an error value otherwise</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.SendMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The SendMessage function sends the specified message to a 
            window or windows. It calls the window procedure for the 
            specified window and does not return until the window 
            procedure has processed the message
            </summary>
            <param name="hwnd">Handle to the window whose window procedure will 
            receive the message</param>
            <param name="msg">Specifies the message to be sent</param>
            <param name="wParam">Specifies additional message-specific information</param>
            <param name="lParam">Specifies additional message-specific information</param>
            <returns>The return value specifies the result of the message processing; 
            it depends on the message sent</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.TrackMouseEvent(XPTable.Win32.TRACKMOUSEEVENT)">
            <summary>
            The TrackMouseEvent function posts messages when the mouse pointer 
            leaves a window or hovers over a window for a specified amount of time
            </summary>
            <param name="tme">A TRACKMOUSEEVENT structure that contains tracking 
            information</param>
            <returns>true if the function succeeds, false otherwise</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.PostMessage(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The PostMessage function places (posts) a message in the message queue associated 
            with the thread that created the specified window and returns without waiting for 
            the thread to process the message
            </summary>
            <param name="hwnd">Handle to the window whose window procedure is to receive the 
            message</param>
            <param name="msg">Specifies the message to be posted</param>
            <param name="wparam">Specifies additional message-specific information</param>
            <param name="lparam">Specifies additional message-specific information</param>
            <returns>If the function succeeds, the return value is nonzero. If the function 
            fails, the return value is zero</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.MessageBeep(System.Int32)">
            <summary>
            The MessageBeep function plays a waveform sound. The waveform sound for each 
            sound type is identified by an entry in the registry
            </summary>
            <param name="type">Sound type, as identified by an entry in the registry</param>
            <returns>If the function succeeds, the return value is nonzero. If the function 
            fails, the return value is zero</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.NotifyWinEvent(System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The NotifyWinEvent function signals the system that a predefined event occurred. 
            If any client applications have registered a hook function for the event, the 
            system calls the client's hook function
            </summary>
            <param name="winEvent">Specifies the event that occurred</param>
            <param name="hwnd">Handle to the window that contains the object that generated 
            the event</param>
            <param name="objType">Identifies the kind of object that generated the event</param>
            <param name="objID">Identifies whether the event was generated by an object or 
            by a child element of the object. If this value is CHILDID_SELF, the event was 
            generated by the object itself. If not, this value is the child ID of the element 
            that generated the event</param>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.ScrollWindow(System.IntPtr,System.Int32,System.Int32,XPTable.Win32.RECT@,XPTable.Win32.RECT@)">
            <summary>
            The ScrollWindow function scrolls the contents of the specified window's client area
            </summary>
            <param name="hWnd">Handle to the window where the client area is to be scrolled</param>
            <param name="XAmount">Specifies the amount, in device units, of horizontal scrolling. 
            This parameter must be a negative value to scroll the content of the window to the left</param>
            <param name="YAmount">Specifies the amount, in device units, of vertical scrolling. 
            This parameter must be a negative value to scroll the content of the window up</param>
            <param name="lpRect">Pointer to the RECT structure specifying the portion of the 
            client area to be scrolled. If this parameter is NULL, the entire client area is 
            scrolled</param>
            <param name="lpClipRect">Pointer to the RECT structure containing the coordinates 
            of the clipping rectangle. Only device bits within the clipping rectangle are affected. 
            Bits scrolled from the outside of the rectangle to the inside are painted; bits scrolled 
            from the inside of the rectangle to the outside are not painted</param>
            <returns>If the function succeeds, the return value is nonzero. If the function fails, 
            the return value is zero</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.keybd_event(System.Byte,System.Byte,XPTable.Win32.KeyEventFFlags,System.Int32)">
            <summary>
            The keybd_event function synthesizes a keystroke. The system can use such a synthesized 
            keystroke to generate a WM_KEYUP or WM_KEYDOWN message. The keyboard driver's interrupt 
            handler calls the keybd_event function
            </summary>
            <param name="bVk">Specifies a virtual-key code</param>
            <param name="bScan">This parameter is not used</param>
            <param name="dwFlags">Specifies various aspects of function operation</param>
            <param name="dwExtraInfo"></param>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.PeekMessage(XPTable.Win32.MSG@,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The PeekMessage function dispatches incoming sent messages, checks the thread message 
            queue for a posted message, and retrieves the message (if any exist).
            </summary>
            <param name="msg">Pointer to an MSG structure that receives message information</param>
            <param name="hwnd">Handle to the window whose messages are to be examined. The window 
            must belong to the current thread. If hWnd is NULL, PeekMessage retrieves messages for 
            any window that belongs to the current thread. If hWnd is INVALID_HANDLE_VALUE, 
            PeekMessage retrieves messages whose hWnd value is NULL, as posted by the PostThreadMessage 
            function</param>
            <param name="msgMin">Specifies the value of the first message in the range of messages 
            to be examined. Use WM_KEYFIRST to specify the first keyboard message or WM_MOUSEFIRST 
            to specify the first mouse message. If wMsgFilterMin and wMsgFilterMax are both zero, 
            PeekMessage returns all available messages (that is, no range filtering is performed).</param>
            <param name="msgMax">Specifies the value of the last message in the range of messages 
            to be examined. Use WM_KEYLAST to specify the first keyboard message or WM_MOUSELAST 
            to specify the last mouse message. If wMsgFilterMin and wMsgFilterMax are both zero, 
            PeekMessage returns all available messages (that is, no range filtering is performed).</param>
            <param name="remove">Specifies how messages are handled</param>
            <returns>If a message is available, the return value is nonzero. If no messages are 
            available, the return value is zero</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.TranslateMessage(XPTable.Win32.MSG@)">
            <summary>
            The TranslateMessage function translates virtual-key messages into character messages. 
            The character messages are posted to the calling thread's message queue, to be read the 
            next time the thread calls the GetMessage or PeekMessage function
            </summary>
            <param name="msg">Pointer to an MSG structure that contains message information retrieved 
            from the calling thread's message queue by using the GetMessage or PeekMessage function</param>
            <returns>If the message is translated (that is, a character message is posted to the 
            thread's message queue), the return value is nonzero.If the message is WM_KEYDOWN, 
            WM_KEYUP, WM_SYSKEYDOWN, or WM_SYSKEYUP, the return value is nonzero, regardless of 
            the translation. If the message is not translated (that is, a character message is not 
            posted to the thread's message queue), the return value is zero</returns>
        </member>
        <member name="M:XPTable.Win32.NativeMethods.DispatchMessage(XPTable.Win32.MSG@)">
            <summary>
            The DispatchMessage function dispatches a message to a window procedure. It is typically 
            used to dispatch a message retrieved by the GetMessage funct
            </summary>
            <param name="msg">Pointer to an MSG structure that contains the message</param>
            <returns>The return value specifies the value returned by the window procedure. Although 
            its meaning depends on the message being dispatched, the return value generally is ignored</returns>
        </member>
        <member name="T:XPTable.Themes.ProgressBarParts">
            <summary>
            Represents the different parts of a ProgressBar that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.ProgressBarParts.Bar">
            <summary>
            The ProgressBar's background and border
            </summary>
        </member>
        <member name="F:XPTable.Themes.ProgressBarParts.Chunk">
            <summary>
            The ProgressBar's contents
            </summary>
        </member>
        <member name="T:XPTable.Sorting.TextComparer">
            <summary>
            An IComparer for sorting Cells that contain strings
            </summary>
        </member>
        <member name="M:XPTable.Sorting.TextComparer.#ctor(XPTable.Models.TableModel,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the TextComparer class with the specified 
            TableModel, Column index and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.TextComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="T:XPTable.Models.TextColumn">
            <summary>
            Summary description for TextColumn.
            </summary>
        </member>
        <member name="M:XPTable.Models.TextColumn.#ctor">
            <summary>
            Creates a new TextColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.TextColumn.#ctor(System.String)">
            <summary>
            Creates a new TextColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.TextColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new TextColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.TextColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new TextColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.TextColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new TextColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.TextColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new TextColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.TextColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new TextColumn with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.TextColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.TextColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.TextColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.TextColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="P:XPTable.Models.TextColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="T:XPTable.Models.Design.RowConverter">
            <summary>
            A custom TypeConverter used to help convert Rows from 
            one Type to another
            </summary>
        </member>
        <member name="M:XPTable.Models.Design.RowConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the 
            specified type, using the specified context
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a 
            format context</param>
            <param name="destinationType">A Type that represents the type 
            you want to convert to</param>
            <returns>true if this converter can perform the conversion; o
            therwise, false</returns>
        </member>
        <member name="M:XPTable.Models.Design.RowConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using 
            the specified context and culture information
            </summary>
            <param name="context">An ITypeDescriptorContext that provides 
            a format context</param>
            <param name="culture">A CultureInfo object. If a null reference 
            is passed, the current culture is assumed</param>
            <param name="value">The Object to convert</param>
            <param name="destinationType">The Type to convert the value 
            parameter to</param>
            <returns>An Object that represents the converted value</returns>
        </member>
        <member name="T:XPTable.Models.Design.RowCollectionEditor">
            <summary>
            Provides a user interface that can edit collections of Rows 
            at design time
            </summary>
        </member>
        <member name="F:XPTable.Models.Design.RowCollectionEditor.rows">
            <summary>
            The RowCollection being edited
            </summary>
        </member>
        <member name="M:XPTable.Models.Design.RowCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the RowCollectionEditor class 
            using the specified collection type
            </summary>
            <param name="type">The type of the collection for this editor to edit</param>
        </member>
        <member name="M:XPTable.Models.Design.RowCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the specified 
            service provider and context
            </summary>
            <param name="context">An ITypeDescriptorContext that can be 
            used to gain additional context information</param>
            <param name="isp">A service provider object through which 
            editing services can be obtained</param>
            <param name="value">The object to edit the value of</param>
            <returns>The new value of the object. If the value of the 
            object has not changed, this should return the same object 
            it was passed</returns>
        </member>
        <member name="M:XPTable.Models.Design.RowCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Creates a new instance of the specified collection item type
            </summary>
            <param name="itemType">The type of item to create</param>
            <returns>A new instance of the specified object</returns>
        </member>
        <member name="M:XPTable.Models.Design.RowCollectionEditor.DestroyInstance(System.Object)">
            <summary>
            Destroys the specified instance of the object
            </summary>
            <param name="instance">The object to destroy</param>
        </member>
        <member name="T:XPTable.Models.CheckBoxColumn">
            <summary>
            Represents a Column whose Cells are displayed as a CheckBox
            </summary>
        </member>
        <member name="F:XPTable.Models.CheckBoxColumn.checkSize">
            <summary>
            The size of the checkbox
            </summary>
        </member>
        <member name="F:XPTable.Models.CheckBoxColumn.drawText">
            <summary>
            Specifies whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="F:XPTable.Models.CheckBoxColumn.checkStyle">
            <summary>
            The style of the checkboxes
            </summary>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.#ctor">
            <summary>
            Creates a new CheckBoxColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.#ctor(System.String)">
            <summary>
            Creates a new CheckBoxColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new CheckBoxColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new CheckBoxColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new CheckBoxColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new CheckBoxColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new CheckBoxColumn with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.Init">
            <summary>
            Initializes the CheckBoxColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.CheckBoxColumn.ShouldSerializeCheckSize">
            <summary>
            Specifies whether the CheckSize property should be serialized at 
            design time
            </summary>
            <returns>true if the CheckSize property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="P:XPTable.Models.CheckBoxColumn.CheckSize">
            <summary>
            Gets or sets the size of the checkboxes
            </summary>
        </member>
        <member name="P:XPTable.Models.CheckBoxColumn.DrawText">
            <summary>
            Gets or sets whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="P:XPTable.Models.CheckBoxColumn.CheckStyle">
            <summary>
            Gets or sets whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="P:XPTable.Models.CheckBoxColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="T:XPTable.Win32.WindowStyles">
            <summary>
            Specifies the extended window style of the window being created
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_OVERLAPPED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a 
            border. Same as the WS_TILED style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_POPUP">
            <summary>
            Creates a pop-up window. This style cannot be used with the WS_CHILD style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_CHILD">
            <summary>
            Creates a child window. A window with this style cannot have a menu bar. 
            This style cannot be used with the WS_POPUP style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_MINIMIZE">
            <summary>
            Creates a window that is initially minimized. Same as the WS_ICONIC style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_VISIBLE">
            <summary>
            Creates a window that is initially visible. This style can be turned on and 
            off by using ShowWindow or SetWindowPos
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_DISABLED">
            <summary>
            Creates a window that is initially disabled. A disabled window cannot 
            receive input from the user. To change this after a window has been created, 
            use EnableWindow
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular 
            child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips 
            all other overlapping child windows out of the region of the child window 
            to be updated. If WS_CLIPSIBLINGS is not specified and child windows overlap, 
            it is possible, when drawing within the client area of a child window, to 
            draw within the client area of a neighboring child window
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs within 
            the parent window. This style is used when creating the parent window
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_MAXIMIZE">
            <summary>
            Creates a window that is initially maximized
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_CAPTION">
            <summary>
            Creates a window that has a title bar (includes the WS_BORDER style)
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_BORDER">
            <summary>
            Creates a window that has a thin-line border
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_DLGFRAME">
            <summary>
            Creates a window that has a border of a style typically used with dialog 
            boxes. A window with this style cannot have a title bar
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_VSCROLL">
            <summary>
            Creates a window that has a vertical scroll bar
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_HSCROLL">
            <summary>
            Creates a window that has a horizontal scroll bar
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_SYSMENU">
            <summary>
            Creates a window that has a window menu on its title bar. The WS_CAPTION style 
            must also be specified
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_THICKFRAME">
            <summary>
            Creates a window that has a sizing border. Same as the WS_SIZEBOX style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_GROUP">
            <summary>
            Specifies the first control of a group of controls. The group consists of this 
            first control and all controls defined after it, up to the next control with 
            the WS_GROUP style. The first control in each group usually has the WS_TABSTOP 
            style so that the user can move from group to group. The user can subsequently 
            change the keyboard focus from one control in the group to the next control in 
            the group by using the direction keys. You can turn this style on and off to 
            change dialog box navigation. To change this style after a window has been 
            created, use SetWindowLong
            /// </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_TABSTOP">
            <summary>
            Specifies a control that can receive the keyboard focus when the user presses 
            the TAB key. Pressing the TAB key changes the keyboard focus to the next control 
            with the WS_TABSTOP style. You can turn this style on and off to change dialog 
            box navigation. To change this style after a window has been created, use 
            SetWindowLong
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_MINIMIZEBOX">
            <summary>
            Creates a window that has a minimize button. Cannot be combined with the 
            WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_MAXIMIZEBOX">
            <summary>
            Creates a window that has a maximize button. Cannot be combined with the 
            WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_TILED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a 
            border. Same as the WS_OVERLAPPED style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_ICONIC">
            <summary>
            Creates a window that is initially minimized. Same as the WS_MINIMIZE style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_SIZEBOX">
            <summary>
            Creates a window that has a sizing border. Same as the WS_THICKFRAME style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_POPUPWINDOW">
            <summary>
            Creates a pop-up window with WS_BORDER, WS_POPUP, and WS_SYSMENU styles. The 
            WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu 
            visible
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_OVERLAPPEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, 
            WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the 
            WS_TILEDWINDOW style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_TILEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, 
            WS_THICKFRAME, WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the 
            WS_OVERLAPPEDWINDOW style
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowStyles.WS_CHILDWINDOW">
            <summary>
            Same as the WS_CHILD style
            </summary>
        </member>
        <member name="T:XPTable.Themes.ButtonParts">
            <summary>
            Represents the type of Buttons that can be drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.ButtonParts.PushButton">
            <summary>
            A normal Button
            </summary>
        </member>
        <member name="F:XPTable.Themes.ButtonParts.RadioButton">
            <summary>
            A RadioButton
            </summary>
        </member>
        <member name="F:XPTable.Themes.ButtonParts.CheckBox">
            <summary>
            A CheckBox button
            </summary>
        </member>
        <member name="T:XPTable.Renderers.ColorCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as Buttons
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ColorCellRenderer.showColor">
            <summary>
            Specifies whether the Cells Color should be drawn
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ColorCellRenderer.showColorName">
            <summary>
            Specifies whether the Cells Color name should be drawn
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ColorCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the ColorCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ColorCellRenderer.CalcColorRect(XPTable.Models.RowAlignment,XPTable.Models.ColumnAlignment)">
            <summary>
            Returns a Rectangle that specifies the size and location of the Color 
            rectangle
            </summary>
            <param name="rowAlignment">The alignment of the Cells Row</param>
            <param name="columnAlignment">The alignment of the Cells Column</param>
            <returns>A Rectangle that specifies the size and location of the Color 
            rectangle</returns>
        </member>
        <member name="M:XPTable.Renderers.ColorCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ColorCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Renderers.ColorCellRenderer.ShowColor">
            <summary>
            Gets or sets whether the Cells Color should be drawn
            </summary>
        </member>
        <member name="P:XPTable.Renderers.ColorCellRenderer.ShowColorName">
            <summary>
            Gets or sets whether the Cells Color name should be drawn
            </summary>
        </member>
        <member name="T:XPTable.Models.ProgressBarColumn">
            <summary>
            Represents a Column whose Cells are displayed as a ProgressBar
            </summary>
        </member>
        <member name="F:XPTable.Models.ProgressBarColumn.drawPercentageText">
            <summary>
            Specifies whether the ProgressBar's value as a string 
            should be displayed
            </summary>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.#ctor">
            <summary>
            Creates a new ProgressBarColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.#ctor(System.String)">
            <summary>
            Creates a new ProgressBarColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ProgressBarColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new ProgressBarColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new ProgressBarColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new ProgressBarColumn with the specified header text, image 
            and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new ProgressBarColumn with the specified header text, image, 
            width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.Init">
            <summary>
            Initializes the ProgressBarColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.ProgressBarColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="P:XPTable.Models.ProgressBarColumn.DrawPercentageText">
            <summary>
            Gets or sets whether a Cell's percantage value should be drawn as a string
            </summary>
        </member>
        <member name="P:XPTable.Models.ProgressBarColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="P:XPTable.Models.ProgressBarColumn.Editable">
            <summary>
            Gets or sets a value indicating whether the Column's Cells contents 
            are able to be edited
            </summary>
        </member>
        <member name="T:XPTable.Models.ColorColumn">
            <summary>
            Represents a Column whose Cells are displayed as a Color
            </summary>
        </member>
        <member name="F:XPTable.Models.ColorColumn.showColor">
            <summary>
            Specifies whether the Cells should draw their Color value
            </summary>
        </member>
        <member name="F:XPTable.Models.ColorColumn.showColorName">
            <summary>
            Specifies whether the Cells should draw their Color name
            </summary>
        </member>
        <member name="M:XPTable.Models.ColorColumn.#ctor">
            <summary>
            Creates a new ColorColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ColorColumn.#ctor(System.String)">
            <summary>
            Creates a new ColorColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.ColorColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ColorColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ColorColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new ColorColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ColorColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new ColorColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.ColorColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new ColorColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ColorColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new ColorColumn with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ColorColumn.Init">
            <summary>
            Initializes the ColorColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ColorColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ColorColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ColorColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.ColorColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="P:XPTable.Models.ColorColumn.ShowColor">
            <summary>
            Gets or sets whether the Column's Cells should draw their Color value
            </summary>
        </member>
        <member name="P:XPTable.Models.ColorColumn.ShowColorName">
            <summary>
            Gets or sets whether the Column's Cells should draw their Color name
            </summary>
        </member>
        <member name="P:XPTable.Models.ColorColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="T:XPTable.Models.CellStyle">
            <summary>
            Stores visual appearance related properties for a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.CellStyle.backColor">
            <summary>
            The background color of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.CellStyle.foreColor">
            <summary>
            The foreground color of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.CellStyle.font">
            <summary>
            The font used to draw the text in the Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.CellStyle.padding">
            <summary>
            The amount of space between the Cells border and its contents
            </summary>
        </member>
        <member name="M:XPTable.Models.CellStyle.#ctor">
            <summary>
            Initializes a new instance of the CellStyle class with default settings
            </summary>
        </member>
        <member name="P:XPTable.Models.CellStyle.Font">
            <summary>
            Gets or sets the Font used by the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.CellStyle.BackColor">
            <summary>
            Gets or sets the background color for the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.CellStyle.ForeColor">
            <summary>
            Gets or sets the foreground color for the Cell
            </summary>
        </member>
        <member name="P:XPTable.Models.CellStyle.Padding">
            <summary>
            Gets or sets the amount of space between the Cells Border and its contents
            </summary>
        </member>
        <member name="T:XPTable.Editors.DateTimeCellEditor">
            <summary>
            A class for editing Cells that contain DateTimes
            </summary>
        </member>
        <member name="T:XPTable.Editors.DropDownCellEditor">
            <summary>
            A base class for editing Cells that contain drop down buttons
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.dropDownContainer">
            <summary>
            The container that holds the Control displayed when editor is dropped down
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.droppedDown">
            <summary>
            Specifies whether the DropDownContainer is currently displayed
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.dropDownStyle">
            <summary>
            Specifies the DropDown style
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.dropDownWidth">
            <summary>
            The user defined width of the DropDownContainer
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.activationListener">
            <summary>
            Listener for WM_NCACTIVATE and WM_ACTIVATEAPP messages
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.parentForm">
            <summary>
            The Form that will own the DropDownContainer
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.containsMouse">
            <summary>
            Specifies whether the mouse is currently over the 
            DropDownContainer
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.#ctor">
            <summary>
            Initializes a new instance of the DropDownCellEditor class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.PrepareForEditing(XPTable.Models.Cell,XPTable.Models.Table,XPTable.Models.CellPos,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Prepares the CellEditor to edit the specified Cell
            </summary>
            <param name="cell">The Cell to be edited</param>
            <param name="table">The Table that contains the Cell</param>
            <param name="cellPos">A CellPos representing the position of the Cell</param>
            <param name="cellRect">The Rectangle that represents the Cells location and size</param>
            <param name="userSetEditorValues">Specifies whether the ICellEditors 
            starting value has already been set by the user</param>
            <returns>true if the ICellEditor can continue editing the Cell, false otherwise</returns>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.ShowDropDown">
            <summary>
            Displays the drop down portion to the user
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.HideDropDown">
            <summary>
            Conceals the drop down portion from the user
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.ShouldStopEditing(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Gets whether the editor should stop editing if a mouse click occurs 
            outside of the DropDownContainer while it is dropped down
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="cursorPos">The current position of the mouse cursor</param>
            <returns>true if the editor should stop editing, false otherwise</returns>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.ProcessMouseMessage(System.Windows.Forms.Control,XPTable.Win32.WindowMessage,System.Int32,System.Int32)">
            <summary>
            Filters out a mouse message before it is dispatched
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="msg">A WindowMessage that represents the message to process</param>
            <param name="wParam">Specifies the WParam field of the message</param>
            <param name="lParam">Specifies the LParam field of the message</param>
            <returns>true to filter the message and prevent it from being dispatched; 
            false to allow the message to continue to the next filter or control</returns>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.ProcessKeyMessage(System.Windows.Forms.Control,XPTable.Win32.WindowMessage,System.Int32,System.Int32)">
            <summary>
            Filters out a key message before it is dispatched
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="msg">A WindowMessage that represents the message to process</param>
            <param name="wParam">Specifies the WParam field of the message</param>
            <param name="lParam">Specifies the LParam field of the message</param>
            <returns>true to filter the message and prevent it from being dispatched; 
            false to allow the message to continue to the next filter or control</returns>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handler for the editors TextBox.KeyPress event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A KeyPressEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.OnLostFocus(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors TextBox.LostFocus event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.OnEditorButtonMouseDown(System.Object,XPTable.Events.CellMouseEventArgs)">
            <summary>
            Handler for the editors drop down button MouseDown event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.OnEditorButtonMouseUp(System.Object,XPTable.Events.CellMouseEventArgs)">
            <summary>
            Handler for the editors drop down button MouseUp event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.textbox_MouseEnter(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors textbox MouseEnter event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.TextBox">
            <summary>
            Gets the TextBox used to edit the Cells contents
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.DropDown">
            <summary>
            Gets the container that holds the Control displayed when editor is dropped down
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.DroppedDown">
            <summary>
            Gets or sets whether the editor is displaying its drop-down portion
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.DropDownWidth">
            <summary>
            Gets or sets the width of the of the drop-down portion of the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.InternalDropDownWidth">
            <summary>
            Gets the user defined width of the of the drop-down portion of the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.DropDownStyle">
            <summary>
            Gets or sets a value specifying the style of the drop down editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.SelectedText">
            <summary>
            Gets or sets the text that is selected in the editable portion of the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.SelectionLength">
            <summary>
            Gets or sets the number of characters selected in the editable portion 
            of the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.SelectionStart">
            <summary>
            Gets or sets the starting index of text selected in the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.Text">
            <summary>
            Gets or sets the text associated with the editor
            </summary>
        </member>
        <member name="T:XPTable.Editors.DropDownCellEditor.ActivationListener">
            <summary>
            Listener for WM_NCACTIVATE and WM_ACTIVATEAPP messages
            </summary>
        </member>
        <member name="F:XPTable.Editors.DropDownCellEditor.ActivationListener.owner">
            <summary>
            The DropDownCellEditor that owns the listener
            </summary>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.ActivationListener.#ctor(XPTable.Editors.DropDownCellEditor)">
            <summary>
            Initializes a new instance of the DropDownCellEditor class with the 
            specified DropDownCellEditor owner
            </summary>
            <param name="owner">The DropDownCellEditor that owns the listener</param>
        </member>
        <member name="M:XPTable.Editors.DropDownCellEditor.ActivationListener.WndProc(System.Windows.Forms.Message@)">
            <summary>
            Processes Windows messages
            </summary>
            <param name="m">The Windows Message to process</param>
        </member>
        <member name="P:XPTable.Editors.DropDownCellEditor.ActivationListener.Editor">
            <summary>
            Gets or sets the DropDownCellEditor that owns the listener
            </summary>
        </member>
        <member name="F:XPTable.Editors.DateTimeCellEditor.calendar">
            <summary>
            The MonthCalendar that will be shown in the drop-down portion of the 
            DateTimeCellEditor
            </summary>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.#ctor">
            <summary>
            Initializes a new instance of the DateTimeCellEditor class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.SetEditLocation(System.Drawing.Rectangle)">
            <summary>
            Sets the location and size of the CellEditor
            </summary>
            <param name="cellRect">A Rectangle that represents the size and location 
            of the Cell being edited</param>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.SetEditValue">
            <summary>
            Sets the initial value of the editor based on the contents of 
            the Cell being edited
            </summary>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.SetCellValue">
            <summary>
            Sets the contents of the Cell being edited based on the value 
            in the editor
            </summary>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.OnDateSelected(System.Windows.Forms.DateRangeEventArgs)">
            <summary>
            Raises the DateSelected event
            </summary>
            <param name="e">A DateRangeEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.DateTimeCellEditor.calendar_DateSelected(System.Object,System.Windows.Forms.DateRangeEventArgs)">
            <summary>
            Handler for the editors MonthCalendar.DateSelected events
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A DateRangeEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Editors.DateTimeCellEditor.DateSelected">
            <summary>
            Occurs when the user makes an explicit date selection using the mouse
            </summary>
        </member>
        <member name="P:XPTable.Editors.DateTimeCellEditor.DropDownStyle">
            <summary>
            Gets or sets a value specifying the style of the drop down editor
            </summary>
        </member>
        <member name="T:XPTable.Themes.ScrollBarStates">
            <summary>
            Represents the different states of a ScrollBar control's buttons and track
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.Normal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.Hot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.Pressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.Disabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.UpNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.UpHot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.UpPressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.UpDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.DownNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.DownHot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.DownPressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.DownDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.LeftNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.LeftHot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.LeftPressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.LeftDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.RightNormal">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.RightHot">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.RightPressed">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.RightDisabled">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.RightAlign">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Themes.ScrollBarStates.LeftAlign">
            <summary>
            
            </summary>
        </member>
        <member name="T:XPTable.Renderers.ButtonCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as Buttons
            </summary>
        </member>
        <member name="F:XPTable.Renderers.ButtonCellRenderer.imageAlignment">
            <summary>
            Specifies the alignment of the Image displayed on the button
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the ButtonCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.GetButtonRendererData(XPTable.Models.Cell)">
            <summary>
            Gets the ButtonCellRenderer specific data used by the Renderer from 
            the specified Cell
            </summary>
            <param name="cell">The Cell to get the ButtonCellRenderer data for</param>
            <returns>The ButtonCellRenderer data for the specified Cell</returns>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.CalcButtonBounds">
            <summary>
            Returns a Rectangle that specifies the size and location of the button
            </summary>
            <returns>A Rectangle that specifies the size and location of the button</returns>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.CalcImageRect(System.Drawing.Image,System.Drawing.ContentAlignment)">
            <summary>
            Returns a Rectangle that specifies the size and location of the buttons Image
            </summary>
            <param name="image">The buttons image</param>
            <param name="imageAlignment">The alignment of the image</param>
            <returns>A Rectangle that specifies the size and location of the buttons Image</returns>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnGotFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the GotFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnLostFocus(XPTable.Events.CellFocusEventArgs)">
            <summary>
            Raises the LostFocus event
            </summary>
            <param name="e">A CellFocusEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnKeyDown(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyDown event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnKeyUp(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyUp event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnMouseEnter(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseEnter event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnMouseLeave(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnMouseUp(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnMouseDown(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnMouseMove(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnPaintBackground(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.ButtonCellRenderer.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Draws the Image displayed on the button
            </summary>
            <param name="g">The Graphics to draw on</param>
            <param name="image">The Image to draw</param>
            <param name="imageRect">A Rectangle that specifies the location 
            of the Image</param>
            <param name="enabled">Specifies whether the Image should be drawn 
            in an enabled state</param>
        </member>
        <member name="P:XPTable.Renderers.ButtonCellRenderer.ImageAlignment">
            <summary>
            Gets or sets the alignment of the Image displayed on the buttons
            </summary>
        </member>
        <member name="T:XPTable.Models.TableState">
            <summary>
            Specifies the current state of the Table
            </summary>
        </member>
        <member name="F:XPTable.Models.TableState.Normal">
            <summary>
            The Table is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Models.TableState.ColumnSelecting">
            <summary>
            The Table is selecting a Column
            </summary>
        </member>
        <member name="F:XPTable.Models.TableState.ColumnResizing">
            <summary>
            The Table is resizing a Column
            </summary>
        </member>
        <member name="F:XPTable.Models.TableState.Editing">
            <summary>
            The Table is editing a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.TableState.Sorting">
            <summary>
            The Table is sorting a Column
            </summary>
        </member>
        <member name="F:XPTable.Models.TableState.Selecting">
            <summary>
            The Table is selecting Cells
            </summary>
        </member>
        <member name="T:XPTable.Models.SelectionStyle">
            <summary>
            Specifies how selected Cells are drawn by a Table
            </summary>
        </member>
        <member name="F:XPTable.Models.SelectionStyle.ListView">
            <summary>
            The first visible Cell in the selected Cells Row is drawn as selected
            </summary>
        </member>
        <member name="F:XPTable.Models.SelectionStyle.Grid">
            <summary>
            The selected Cells are drawn as selected
            </summary>
        </member>
        <member name="T:XPTable.Models.CellCollection">
            <summary>
            Represents a collection of Cell objects
            </summary>
        </member>
        <member name="F:XPTable.Models.CellCollection.owner">
            <summary>
            The Row that owns the CellCollection
            </summary>
        </member>
        <member name="M:XPTable.Models.CellCollection.#ctor(XPTable.Models.Row)">
            <summary>
            Initializes a new instance of the CellCollection class 
            that belongs to the specified Row
            </summary>
            <param name="owner">A Row representing the row that owns 
            the Cell collection</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.Add(XPTable.Models.Cell)">
            <summary>
            Adds the specified Cell to the end of the collection
            </summary>
            <param name="cell">The Cell to add</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.AddRange(XPTable.Models.Cell[])">
            <summary>
            Adds an array of Cell objects to the collection
            </summary>
            <param name="cells">An array of Cell objects to add 
            to the collection</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.Remove(XPTable.Models.Cell)">
            <summary>
            Removes the specified Cell from the model
            </summary>
            <param name="cell">The Cell to remove</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.RemoveRange(XPTable.Models.Cell[])">
            <summary>
            Removes an array of Cell objects from the collection
            </summary>
            <param name="cells">An array of Cell objects to remove 
            from the collection</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the Cell at the specified index from the collection
            </summary>
            <param name="index">The index of the Cell to remove</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.Clear">
            <summary>
            Removes all Cells from the collection
            </summary>
        </member>
        <member name="M:XPTable.Models.CellCollection.Insert(System.Int32,XPTable.Models.Cell)">
            <summary>
            Inserts a Cell into the collection at the specified index
            </summary>
            <param name="index">The zero-based index at which the Cell 
            should be inserted</param>
            <param name="cell">The Cell to insert</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.InsertRange(System.Int32,XPTable.Models.Cell[])">
            <summary>
            Inserts an array of Cells into the collection at the specified index
            </summary>
            <param name="index">The zero-based index at which the cells should be inserted</param>
            <param name="cells">An array of Cells to be inserted into the collection</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.IndexOf(XPTable.Models.Cell)">
            <summary>
            Returns the index of the specified Cell in the model
            </summary>
            <param name="cell">The Cell to look for</param>
            <returns>The index of the specified Cell in the model</returns>
        </member>
        <member name="M:XPTable.Models.CellCollection.OnCellAdded(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellAdded event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.CellCollection.OnCellRemoved(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellRemoved event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Models.CellCollection.Item(System.Int32)">
            <summary>
            Gets the Cell at the specified index
            </summary>
        </member>
        <member name="T:XPTable.Events.HeaderMouseEventHandler">
            <summary>
            Represents the method that will handle the HeaderMouseEnter, HeaderMouseLeave, 
            HeaderMouseDown, HeaderMouseUp, HeaderMouseMove, HeaderClick and HeaderDoubleClick 
            events of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.HeaderMouseEventArgs">
            <summary>
            Provides data for the HeaderMouseEnter, HeaderMouseLeave, HeaderMouseDown, 
            HeaderMouseUp, HeaderMouseMove, HeaderClick and HeaderDoubleClick events of a Table
            </summary>
        </member>
        <member name="F:XPTable.Events.HeaderMouseEventArgs.column">
            <summary>
            The Column that raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.HeaderMouseEventArgs.table">
            <summary>
            The Table the Column belongs to
            </summary>
        </member>
        <member name="F:XPTable.Events.HeaderMouseEventArgs.index">
            <summary>
            The index of the Column
            </summary>
        </member>
        <member name="F:XPTable.Events.HeaderMouseEventArgs.headerRect">
            <summary>
            The column header's bounding rectangle
            </summary>
        </member>
        <member name="M:XPTable.Events.HeaderMouseEventArgs.#ctor(XPTable.Models.Column,XPTable.Models.Table,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the HeaderMouseEventArgs class with 
            the specified source Column, Table, column index and column header bounds
            </summary>
            <param name="column">The Column that Raised the event</param>
            <param name="table">The Table the Column belongs to</param>
            <param name="index">The index of the Column</param>
            <param name="headerRect">The column header's bounding rectangle</param>
        </member>
        <member name="M:XPTable.Events.HeaderMouseEventArgs.#ctor(XPTable.Models.Column,XPTable.Models.Table,System.Int32,System.Drawing.Rectangle,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initializes a new instance of the HeaderMouseEventArgs class with 
            the specified source Column, Table, column index, column header bounds 
            and MouseEventArgs
            </summary>
            <param name="column">The Column that Raised the event</param>
            <param name="table">The Table the Column belongs to</param>
            <param name="index">The index of the Column</param>
            <param name="headerRect">The column header's bounding rectangle</param>
            <param name="mea">The MouseEventArgs that contains data about the 
            mouse event</param>
        </member>
        <member name="P:XPTable.Events.HeaderMouseEventArgs.Column">
            <summary>
            Gets the Column that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.HeaderMouseEventArgs.Table">
            <summary>
            Gets the Table the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Events.HeaderMouseEventArgs.Index">
            <summary>
            Gets the index of the Column
            </summary>
        </member>
        <member name="P:XPTable.Events.HeaderMouseEventArgs.HeaderRect">
            <summary>
            Gets the column header's bounding rectangle
            </summary>
        </member>
        <member name="T:XPTable.Editors.ComboBoxCellEditor">
            <summary>
            A class for editing Cells that look like a ComboBox
            </summary>
        </member>
        <member name="F:XPTable.Editors.ComboBoxCellEditor.listbox">
            <summary>
            The ListBox that contains the items to be shown in the 
            drop-down portion of the ComboBoxCellEditor
            </summary>
        </member>
        <member name="F:XPTable.Editors.ComboBoxCellEditor.maxDropDownItems">
            <summary>
            The maximum number of items to be shown in the drop-down 
            portion of the ComboBoxCellEditor
            </summary>
        </member>
        <member name="F:XPTable.Editors.ComboBoxCellEditor.cellWidth">
            <summary>
            The width of the Cell being edited
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.#ctor">
            <summary>
            Initializes a new instance of the ComboBoxCellEditor class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.SetEditLocation(System.Drawing.Rectangle)">
            <summary>
            Sets the location and size of the CellEditor
            </summary>
            <param name="cellRect">A Rectangle that represents the size and location 
            of the Cell being edited</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.SetEditValue">
            <summary>
            Sets the initial value of the editor based on the contents of 
            the Cell being edited
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.SetCellValue">
            <summary>
            Sets the contents of the Cell being edited based on the value 
            in the editor
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.ShowDropDown">
            <summary>
            Displays the drop down portion to the user
            </summary>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.OnKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handler for the editors TextBox.KeyDown and ListBox.KeyDown events
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A KeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.OnMouseWheel(System.Object,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Handler for the editors TextBox.MouseWheel event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A MouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Raises the DrawItem event
            </summary>
            <param name="e">A DrawItemEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            Raises the MeasureItem event
            </summary>
            <param name="e">A MeasureItemEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.OnSelectedIndexChanged(System.EventArgs)">
            <summary>
            Raises the SelectedIndexChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.listbox_Click(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors ListBox.Click event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.listbox_SelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors ListBox.SelectedIndexChanged event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.listbox_MouseEnter(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors ListBox.MouseEnter event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.listbox_DrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            Handler for the editors ListBox.DrawItem event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A DrawItemEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ComboBoxCellEditor.listbox_MeasureItem(System.Object,System.Windows.Forms.MeasureItemEventArgs)">
            <summary>
            Handler for the editors ListBox.MeasureItem event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A MeasureItemEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Editors.ComboBoxCellEditor.SelectedIndexChanged">
            <summary>
            Occurs when the SelectedIndex property has changed
            </summary>
        </member>
        <member name="E:XPTable.Editors.ComboBoxCellEditor.DrawItem">
            <summary>
            Occurs when a visual aspect of an owner-drawn ComboBoxCellEditor changes
            </summary>
        </member>
        <member name="E:XPTable.Editors.ComboBoxCellEditor.MeasureItem">
            <summary>
            Occurs each time an owner-drawn ComboBoxCellEditor item needs to be 
            drawn and when the sizes of the list items are determined
            </summary>
        </member>
        <member name="E:XPTable.Editors.ComboBoxCellEditor.TextChanged">
            <summary>
            Occurs when the text of the edit control is modified.
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.MaxDropDownItems">
            <summary>
            Gets or sets the maximum number of items to be shown in the drop-down 
            portion of the ComboBoxCellEditor
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.DrawMode">
            <summary>
            Gets or sets a value indicating whether your code or the operating 
            system will handle drawing of elements in the list
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.IntegralHeight">
            <summary>
            Gets or sets a value indicating whether the drop-down portion of the 
            editor should resize to avoid showing partial items
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.ItemHeight">
            <summary>
            Gets or sets the height of an item in the editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.Items">
            <summary>
            Gets an object representing the collection of the items contained 
            in this ComboBoxCellEditor
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.MaxLength">
            <summary>
            Gets or sets the maximum number of characters allowed in the editable 
            portion of a ComboBoxCellEditor
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected item
            </summary>
        </member>
        <member name="P:XPTable.Editors.ComboBoxCellEditor.SelectedItem">
            <summary>
            Gets or sets currently selected item in the ComboBoxCellEditor
            </summary>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor">
            <summary>
            A class for editing Cells that contain Colors
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.colorpicker">
            <summary>
            A ColorPicker control similar to the ColorPicker found in the 
            VS.NET property window
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.colorDialog">
            <summary>
            Custom color dialog
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.#ctor">
            <summary>
            Initializes a new instance of the ColorCellEditor class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.SetEditLocation(System.Drawing.Rectangle)">
            <summary>
            Sets the location and size of the CellEditor
            </summary>
            <param name="cellRect">A Rectangle that represents the size and location 
            of the Cell being edited</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.SetEditValue">
            <summary>
            Sets the initial value of the editor based on the contents of 
            the Cell being edited
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.SetCellValue">
            <summary>
            Sets the contents of the Cell being edited based on the value 
            in the editor
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.StartEditing">
            <summary>
            Starts editing the Cell
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.StopEditing">
            <summary>
            Stops editing the Cell and commits any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.CancelEditing">
            <summary>
            Stops editing the Cell and ignores any changes
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorToString(System.Drawing.Color)">
            <summary>
            Converts the specified Color to its string representation
            </summary>
            <param name="color">The Color to convert</param>
            <returns>A string that represents the specified Color</returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ShouldStopEditing(System.Windows.Forms.Control,System.Drawing.Point)">
            <summary>
            Gets whether the editor should stop editing if a mouse click occurs 
            outside of the DropDownContainer while it is dropped down
            </summary>
            <param name="target">The Control that will receive the message</param>
            <param name="cursorPos">The current position of the mouse cursor</param>
            <returns>true if the editor should stop editing, false otherwise</returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.OnSelectedColorChanged(System.EventArgs)">
            <summary>
            Raises the SelectedColorChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.OnKeyPress(System.Object,System.Windows.Forms.KeyPressEventArgs)">
            <summary>
            Handler for the editors TextBox.KeyPress event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">A KeyPressEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.OnLostFocus(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors TextBox.LostFocus event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.colorpicker_SelectedColorChanged(System.Object,System.EventArgs)">
            <summary>
            Handler for the editors ColorPicker.SelectedColorChanged event
            </summary>
            <param name="sender">The object that raised the event</param>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Editors.ColorCellEditor.SelectedColorChanged">
            <summary>
            Occurs when the SelectedIndex property has changed
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.DropDownStyle">
            <summary>
            Gets or sets a value specifying the style of the drop down editor
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorDialog">
            <summary>
            Gets or sets the custom color dialog
            </summary>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker">
            <summary>
            A ColorPicker control similar to the ColorPicker found in the 
            VS.NET property window
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.editor">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.tabControl">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.customTabPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.palette">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.webTabPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.webListBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.systemTabPage">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.systemListBox">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.webColors">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.systemColors">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.value">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.webHeightSet">
            <summary>
            
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.systemHeightSet">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.#ctor(XPTable.Editors.ColorCellEditor)">
            <summary>
            Initializes a new instance of the ColorPicker class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.GetWebColors">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.GetSystemColors">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.AdjustListBoxItemHeight">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnSelectedColorChanged(System.EventArgs)">
            <summary>
            Raises the SelectedColorChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnFontChanged(System.EventArgs)">
            <summary>
            Raises the FontChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnGotFocus(System.EventArgs)">
            <summary>
            Raises the GotFocus event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnListClick(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnListKeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="ke"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnListDrawItem(System.Object,System.Windows.Forms.DrawItemEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="die"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnFontChanged(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnTabControlResize(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnTabControlSelChange(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.tabControl_GotFocus(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.OnPalettePick(System.Object,System.EventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="E:XPTable.Editors.ColorCellEditor.ColorPicker.SelectedColorChanged">
            <summary>
            Occurs when the value of the ColorPicker's SelectedColor property changes
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.SelectedColor">
            <summary>
            Gets or sets the currently selected Color
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.WebColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.SystemColors">
            <summary>
            
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.DefaultSize">
            <summary>
            Gets the default size of the control
            </summary>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.#ctor(XPTable.Editors.ColorCellEditor)">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.GetColorFromCell(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.GetColorFromCell(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="across"></param>
            <param name="down"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.GetColorIndexFromCell(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="across"></param>
            <param name="down"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.GetColorIndexFromCell(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.GetCellFromColor(System.Drawing.Color)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.GetCellFromMouse(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.GetColorIndexFromMouse(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.InvalidateSelection">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.InvalidateFocus">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.SetFocus(System.Drawing.Point)">
            <summary>
            
            </summary>
            <param name="newFocus"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ProcessDialogKey(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.LaunchDialog(System.Int32)">
            <summary>
            
            </summary>
            <param name="customIndex"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnGotFocus(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnLostFocus(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.OnPicked(System.EventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.Colors">
            <summary>
            
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.SelectedColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.FocusedCell">
            <summary>
            
            </summary>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.frmColorPicker">
            <summary>
            Summary description for frmColorPicker.
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.frmColorPicker.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.frmColorPicker.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox">
            <summary>
            Summary description for ctrl2DColorBox.
            </summary>
        </member>
        <member name="F:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.ClearMarker">
            <summary>
            Redraws only the content over the marker
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.DrawMarker(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws the marker (circle) inside the box
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="Unconditional"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.DrawBorder">
            <summary>
            Draws the border around the control.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.DrawContent">
            <summary>
            Evaluates the DrawStyle of the control and calls the appropriate
            drawing function for content
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Draw_Style_Hue">
            <summary>
            Draws the content of the control filling in all color values with the provided Hue value.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Draw_Style_Saturation">
            <summary>
            Draws the content of the control filling in all color values with the provided Saturation value.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Draw_Style_Luminance">
            <summary>
            Draws the content of the control filling in all color values with the provided Luminance or Brightness value.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Draw_Style_Red">
            <summary>
            Draws the content of the control filling in all color values with the provided Red value.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Draw_Style_Green">
            <summary>
            Draws the content of the control filling in all color values with the provided Green value.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Draw_Style_Blue">
            <summary>
            Draws the content of the control filling in all color values with the provided Blue value.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Redraw_Control">
            <summary>
            Calls all the functions neccessary to redraw the entire control.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Reset_Marker(System.Boolean)">
            <summary>
            Resets the marker position of the slider to match the controls color.  Gives the option of redrawing the slider.
            </summary>
            <param name="Redraw">Set to true if you want the function to redraw the slider after determining the best position</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.ResetHSLRGB">
            <summary>
            Resets the controls color (both HSL and RGB variables) based on the current marker position
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.Round(System.Double)">
            <summary>
            Kindof self explanitory, I really need to look up the .NET function that does this.
            </summary>
            <param name="val">double value to be rounded to an integer</param>
            <returns></returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.GetColor(System.Int32,System.Int32)">
            <summary>
            Returns the graphed color at the x,y position on the control
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.DrawStyle">
            <summary>
            The drawstyle of the contol (Hue, Saturation, Brightness, Red, Green or Blue)
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.HSL">
            <summary>
            The HSL color of the control, changing the HSL will automatically change the RGB color for the control.
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrl2DColorBox.RGB">
            <summary>
            The RGB color of the control, changing the RGB will automatically change the HSL color for the control.
            </summary>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider">
            <summary>
            A vertical slider control that shows a range for a color property (a.k.a. Hue, Saturation, Brightness,
            Red, Green, Blue) and sends an event when the slider is changed.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.ClearSlider">
            <summary>
            Redraws the background over the slider area on both sides of the control
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.DrawSlider(System.Int32,System.Boolean)">
            <summary>
            Draws the slider arrows on both sides of the control.
            </summary>
            <param name="position">position value of the slider, lowest being at the bottom.  The range
            is between 0 and the controls height-9.  The values will be adjusted if too large/small</param>
            <param name="Unconditional">If Unconditional is true, the slider is drawn, otherwise some logic 
            is performed to determine is drawing is really neccessary.</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.DrawBorder">
            <summary>
            Draws the border around the control, in this case the border around the content area between
            the slider arrows.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.DrawContent">
            <summary>
            Evaluates the DrawStyle of the control and calls the appropriate
            drawing function for content
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Draw_Style_Hue">
            <summary>
            Fills in the content of the control showing all values of Hue (from 0 to 360)
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Draw_Style_Saturation">
            <summary>
            Fills in the content of the control showing all values of Saturation (0 to 100%) for the given
            Hue and Luminance.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Draw_Style_Luminance">
            <summary>
            Fills in the content of the control showing all values of Luminance (0 to 100%) for the given
            Hue and Saturation.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Draw_Style_Red">
            <summary>
            Fills in the content of the control showing all values of Red (0 to 255) for the given
            Green and Blue.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Draw_Style_Green">
            <summary>
            Fills in the content of the control showing all values of Green (0 to 255) for the given
            Red and Blue.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Draw_Style_Blue">
            <summary>
            Fills in the content of the control showing all values of Blue (0 to 255) for the given
            Red and Green.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Redraw_Control">
            <summary>
            Calls all the functions neccessary to redraw the entire control.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Reset_Slider(System.Boolean)">
            <summary>
            Resets the vertical position of the slider to match the controls color.  Gives the option of redrawing the slider.
            </summary>
            <param name="Redraw">Set to true if you want the function to redraw the slider after determining the best position</param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.ResetHSLRGB">
            <summary>
            Resets the controls color (both HSL and RGB variables) based on the current slider position
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.Round(System.Double)">
            <summary>
            Kindof self explanitory, I really need to look up the .NET function that does this.
            </summary>
            <param name="val">double value to be rounded to an integer</param>
            <returns></returns>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.DrawStyle">
            <summary>
            The drawstyle of the contol (Hue, Saturation, Brightness, Red, Green or Blue)
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.HSL">
            <summary>
            The HSL color of the control, changing the HSL will automatically change the RGB color for the control.
            </summary>
        </member>
        <member name="P:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.ctrlVerticalColorSlider.RGB">
            <summary>
            The RGB color of the control, changing the RGB will automatically change the HSL color for the control.
            </summary>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors">
            <summary>
            Summary description for AdobeColors.
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.SetBrightness(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute brightness of a colour 
            </summary> 
            <param name="c">Original colour</param> 
            <param name="brightness">The luminance level to impose</param> 
            <returns>an adjusted colour</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.ModifyBrightness(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing brightness level 
            </summary> 
            <remarks> 
            To reduce brightness use a number smaller than 1. To increase brightness use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="brightness">The luminance delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.SetSaturation(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute saturation level 
            </summary> 
            <remarks>Accepted values 0-1</remarks> 
            <param name="c">An original colour</param> 
            <param name="Saturation">The saturation value to impose</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.ModifySaturation(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing Saturation level 
            </summary> 
            <remarks> 
            To reduce Saturation use a number smaller than 1. To increase Saturation use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="Saturation">The saturation delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.SetHue(System.Drawing.Color,System.Double)">
            <summary> 
            Sets the absolute Hue level 
            </summary> 
            <remarks>Accepted values 0-1</remarks> 
            <param name="c">An original colour</param> 
            <param name="Hue">The Hue value to impose</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.ModifyHue(System.Drawing.Color,System.Double)">
            <summary> 
            Modifies an existing Hue level 
            </summary> 
            <remarks> 
            To reduce Hue use a number smaller than 1. To increase Hue use a number larger tnan 1 
            </remarks> 
            <param name="c">The original colour</param> 
            <param name="Hue">The Hue delta</param> 
            <returns>An adjusted colour</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.HSL_to_RGB(XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.HSL)">
            <summary> 
            Converts a colour from HSL to RGB 
            </summary> 
            <remarks>Adapted from the algoritm in Foley and Van-Dam</remarks> 
            <param name="hsl">The HSL value</param> 
            <returns>A Color structure containing the equivalent RGB values</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.RGB_to_HSL(System.Drawing.Color)">
            <summary> 
            Converts RGB to HSL 
            </summary> 
            <remarks>Takes advantage of whats already built in to .NET by using the Color.GetHue, Color.GetSaturation and Color.GetBrightness methods</remarks> 
            <param name="c">A Color to convert</param> 
            <returns>An HSL value</returns> 
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.RGB_to_CMYK(System.Drawing.Color)">
            <summary>
            Converts RGB to CMYK
            </summary>
            <param name="c">A color to convert.</param>
            <returns>A CMYK object</returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.CMYK_to_RGB(XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.CMYK)">
            <summary>
            Converts CMYK to RGB
            </summary>
            <param name="_cmyk">A color to convert</param>
            <returns>A Color object</returns>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorPalette.AdobeColors.Round(System.Double)">
            <summary>
            Custom rounding function.
            </summary>
            <param name="val">Value to round</param>
            <returns>Rounded value</returns>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.ColorListBox">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorListBox.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ColorListBox.IsInputKey(System.Windows.Forms.Keys)">
            <summary>
            
            </summary>
            <param name="keyData"></param>
            <returns></returns>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.ThemedTabPage">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ThemedTabPage.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.ThemedTabPage.PaintChildrenBackground(System.Drawing.Graphics,System.Windows.Forms.Control,System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="g"></param>
            <param name="control"></param>
            <param name="rect"></param>
            <param name="ofx"></param>
            <param name="ofy"></param>
            <returns></returns>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.WebColorComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.WebColorComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:XPTable.Editors.ColorCellEditor.ColorPicker.SystemColorComparer">
            <summary>
            
            </summary>
        </member>
        <member name="M:XPTable.Editors.ColorCellEditor.ColorPicker.SystemColorComparer.Compare(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:XPTable.Themes.ComboBoxParts">
            <summary>
            Represents the different parts of a ComboBox that can be 
            drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.ComboBoxParts.DropDownButton">
            <summary>
            A ComboBox's dropdown arrow button
            </summary>
        </member>
        <member name="T:XPTable.Renderers.XPHeaderRenderer">
            <summary>
            A HeaderRenderer that draws Windows XP themed Column headers
            </summary>
        </member>
        <member name="M:XPTable.Renderers.XPHeaderRenderer.#ctor">
            <summary>
            Initializes a new instance of the XPHeaderRenderer class 
            with default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.XPHeaderRenderer.OnPaintBackground(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.XPHeaderRenderer.OnPaint(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="T:XPTable.Renderers.DateTimeCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as a DateTime
            </summary>
        </member>
        <member name="F:XPTable.Renderers.DateTimeCellRenderer.dateFormat">
            <summary>
            The format of the date and time displayed in the Cell
            </summary>
        </member>
        <member name="M:XPTable.Renderers.DateTimeCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the DateTimeCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.DateTimeCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.DateTimeCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.DateTimeCellRenderer.DrawText(System.DateTime,System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Rectangle)">
            <summary>
            Draws the DateTime text
            </summary>
            <param name="dateTime">The DateTime value to be drawn</param>
            <param name="g">The Graphics to draw on</param>
            <param name="brush">The Brush to draw the text with</param>
            <param name="textRect">A Rectangle that specifies the bounds of the text</param>
        </member>
        <member name="P:XPTable.Renderers.DateTimeCellRenderer.DateTimeFormat">
            <summary>
            Gets or sets the format of the date and time displayed in the Cell
            </summary>
        </member>
        <member name="T:XPTable.Models.RowStyle">
            <summary>
            Stores visual appearance related properties for a Row
            </summary>
        </member>
        <member name="F:XPTable.Models.RowStyle.backColor">
            <summary>
            The background color of the Row
            </summary>
        </member>
        <member name="F:XPTable.Models.RowStyle.foreColor">
            <summary>
            The foreground color of the Row
            </summary>
        </member>
        <member name="F:XPTable.Models.RowStyle.font">
            <summary>
            The font used to draw the text in the Row
            </summary>
        </member>
        <member name="F:XPTable.Models.RowStyle.alignment">
            <summary>
            The alignment of the text in the Row
            </summary>
        </member>
        <member name="M:XPTable.Models.RowStyle.#ctor">
            <summary>
            Initializes a new instance of the RowStyle class with default settings
            </summary>
        </member>
        <member name="P:XPTable.Models.RowStyle.Font">
            <summary>
            Gets or sets the Font used by the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.RowStyle.BackColor">
            <summary>
            Gets or sets the background color for the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.RowStyle.ForeColor">
            <summary>
            Gets or sets the foreground color for the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.RowStyle.Alignment">
            <summary>
            Gets or sets the vertical alignment of the text displayed in the Row
            </summary>
        </member>
        <member name="T:XPTable.Models.Row">
            <summary>
            SRepresents a row of Cells displayed in a Table
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.cells">
            <summary>
            The collection of Cells's contained in the Row
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.tag">
            <summary>
            An object that contains data about the Row
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.tableModel">
            <summary>
            The TableModel that the Row belongs to
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.index">
            <summary>
            The index of the Row
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.state">
            <summary>
            the current state of the Row
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.rowStyle">
            <summary>
            The Row's RowStyle
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.selectedCellCount">
            <summary>
            The number of Cells in the Row that are selected
            </summary>
        </member>
        <member name="F:XPTable.Models.Row.disposed">
            <summary>
            Specifies whether the Row has been disposed
            </summary>
        </member>
        <member name="M:XPTable.Models.Row.#ctor">
            <summary>
            Initializes a new instance of the Row class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Models.Row.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the Row class with an array of strings 
            representing Cells
            </summary>
            <param name="items">An array of strings that represent the Cells of 
            the Row</param>
        </member>
        <member name="M:XPTable.Models.Row.#ctor(XPTable.Models.Cell[])">
            <summary>
            Initializes a new instance of the Row class with an array of Cell objects 
            </summary>
            <param name="cells">An array of Cell objects that represent the Cells of the Row</param>
        </member>
        <member name="M:XPTable.Models.Row.#ctor(System.String[],System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the Row class with an array of strings 
            representing Cells and the foreground color, background color, and font 
            of the Row
            </summary>
            <param name="items">An array of strings that represent the Cells of the Row</param>
            <param name="foreColor">The foreground Color of the Row</param>
            <param name="backColor">The background Color of the Row</param>
            <param name="font">The Font used to draw the text in the Row's Cells</param>
        </member>
        <member name="M:XPTable.Models.Row.#ctor(XPTable.Models.Cell[],System.Drawing.Color,System.Drawing.Color,System.Drawing.Font)">
            <summary>
            Initializes a new instance of the Row class with an array of Cell objects and 
            the foreground color, background color, and font of the Row
            </summary>
            <param name="cells">An array of Cell objects that represent the Cells of the Row</param>
            <param name="foreColor">The foreground Color of the Row</param>
            <param name="backColor">The background Color of the Row</param>
            <param name="font">The Font used to draw the text in the Row's Cells</param>
        </member>
        <member name="M:XPTable.Models.Row.Init">
            <summary>
            Initialise default values
            </summary>
        </member>
        <member name="M:XPTable.Models.Row.Dispose">
            <summary>
            Releases all resources used by the Row
            </summary>
        </member>
        <member name="M:XPTable.Models.Row.GetState(System.Int32)">
            <summary>
            Returns the state represented by the specified state flag
            </summary>
            <param name="flag">A flag that represents the state to return</param>
            <returns>The state represented by the specified state flag</returns>
        </member>
        <member name="M:XPTable.Models.Row.SetState(System.Int32,System.Boolean)">
            <summary>
            Sets the state represented by the specified state flag to the specified value
            </summary>
            <param name="flag">A flag that represents the state to be set</param>
            <param name="value">The new value of the state</param>
        </member>
        <member name="M:XPTable.Models.Row.ShouldSerializeBackColor">
            <summary>
            Specifies whether the BackColor property should be serialized at 
            design time
            </summary>
            <returns>true if the BackColor property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Row.ShouldSerializeForeColor">
            <summary>
            Specifies whether the ForeColor property should be serialized at 
            design time
            </summary>
            <returns>true if the ForeColor property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Row.ShouldSerializeFont">
            <summary>
            Specifies whether the Font property should be serialized at 
            design time
            </summary>
            <returns>true if the Font property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Row.ShouldSerializeEditable">
            <summary>
            Specifies whether the Editable property should be serialized at 
            design time
            </summary>
            <returns>true if the Editable property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Row.ShouldSerializeEnabled">
            <summary>
            Specifies whether the Enabled property should be serialized at 
            design time
            </summary>
            <returns>true if the Enabled property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.Row.UpdateCellIndicies(System.Int32)">
            <summary>
            Updates the Cell's Index property so that it matches the Cells 
            position in the CellCollection
            </summary>
            <param name="start">The index to start updating from</param>
        </member>
        <member name="M:XPTable.Models.Row.IsCellSelected(System.Int32)">
            <summary>
            Returns whether the Cell at the specified index is selected
            </summary>
            <param name="index">The index of the Cell in the Row's Row.CellCollection</param>
            <returns>True if the Cell at the specified index is selected, 
            otherwise false</returns>
        </member>
        <member name="M:XPTable.Models.Row.ClearSelection">
            <summary>
            Removes the selected state from all the Cells within the Row
            </summary>
        </member>
        <member name="M:XPTable.Models.Row.OnPropertyChanged(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the PropertyChanged event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Row.OnCellAdded(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellAdded event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Row.OnCellRemoved(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellRemoved event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.Row.OnCellPropertyChanged(XPTable.Events.CellEventArgs)">
            <summary>
            Raises the CellPropertyChanged event
            </summary>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Models.Row.CellAdded">
            <summary>
            Occurs when a Cell is added to the Row
            </summary>
        </member>
        <member name="E:XPTable.Models.Row.CellRemoved">
            <summary>
            Occurs when a Cell is removed from the Row
            </summary>
        </member>
        <member name="E:XPTable.Models.Row.PropertyChanged">
            <summary>
            Occurs when the value of a Row's property changes
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.Cells">
            <summary>
            A CellCollection representing the collection of 
            Cells contained within the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.Tag">
            <summary>
            Gets or sets the object that contains data about the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.RowStyle">
            <summary>
            Gets or sets the RowStyle used by the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.BackColor">
            <summary>
            Gets or sets the background color for the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.ForeColor">
            <summary>
            Gets or sets the foreground Color for the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.Alignment">
            <summary>
            Gets or sets the vertical alignment of the objects displayed in the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.Font">
            <summary>
            Gets or sets the Font used by the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.Editable">
            <summary>
            Gets or sets a value indicating whether the Row's Cells are able 
            to be edited
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.Enabled">
            <summary>
            Gets or sets a value indicating whether the Row's Cells can respond to 
            user interaction
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.TableModel">
            <summary>
            Gets the TableModel the Row belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.InternalTableModel">
            <summary>
            Gets or sets the TableModel the Row belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.Index">
            <summary>
            Gets the index of the Row within its TableModel
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.InternalIndex">
            <summary>
            Gets or sets the index of the Row within its TableModel
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.CanRaiseEvents">
            <summary>
            Gets whether the Row is able to raise events
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.SelectedCellCount">
            <summary>
            Gets the number of Cells that are selected within the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.InternalSelectedCellCount">
            <summary>
            Gets or sets the number of Cells that are selected within the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.AnyCellsSelected">
            <summary>
            Gets whether any Cells within the Row are selected
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.SelectedItems">
            <summary>
            Returns an array of Cells that contains all the selected Cells 
            within the Row
            </summary>
        </member>
        <member name="P:XPTable.Models.Row.SelectedIndicies">
            <summary>
            Returns an array that contains the indexes of all the selected Cells 
            within the Row
            </summary>
        </member>
        <member name="T:XPTable.Models.GridLines">
            <summary>
            Specifies how a Table draws grid lines between its rows and columns
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLines.None">
            <summary>
            No grid lines are drawn
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLines.Columns">
            <summary>
            Grid lines are only drawn between columns
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLines.Rows">
            <summary>
            Grid lines are only drawn between rows
            </summary>
        </member>
        <member name="F:XPTable.Models.GridLines.Both">
            <summary>
            Grid lines are drawn between rows and columns
            </summary>
        </member>
        <member name="T:XPTable.Events.RowEventType">
            <summary>
            Specifies the type of event generated when the value of a 
            Row's property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.Unknown">
            <summary>
            Occurs when the Row's property change type is unknown
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.BackColorChanged">
            <summary>
            Occurs when the value of a Row's BackColor property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.ForeColorChanged">
            <summary>
            Occurs when the value of a Row's ForeColor property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.FontChanged">
            <summary>
            Occurs when the value of a Row's Font property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.StyleChanged">
            <summary>
            Occurs when the value of a Row's RowStyle property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.AlignmentChanged">
            <summary>
            Occurs when the value of a Row's Alignment property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.EnabledChanged">
            <summary>
            Occurs when the value of a Row's Enabled property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventType.EditableChanged">
            <summary>
            Occurs when the value of a Row's Editable property changes
            </summary>
        </member>
        <member name="T:XPTable.Events.CellEventType">
            <summary>
            Specifies the type of event generated when the value of a 
            Cell's property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.Unknown">
            <summary>
            Occurs when the Cell's property change type is unknown
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.ValueChanged">
            <summary>
            Occurs when the value displayed by a Cell has changed
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.FontChanged">
            <summary>
            Occurs when the value of a Cell's Font property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.BackColorChanged">
            <summary>
            Occurs when the value of a Cell's BackColor property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.ForeColorChanged">
            <summary>
            Occurs when the value of a Cell's ForeColor property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.StyleChanged">
            <summary>
            Occurs when the value of a Cell's CellStyle property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.PaddingChanged">
            <summary>
            Occurs when the value of a Cell's Padding property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.EditableChanged">
            <summary>
            Occurs when the value of a Cell's Editable property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.EnabledChanged">
            <summary>
            Occurs when the value of a Cell's Enabled property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.ToolTipTextChanged">
            <summary>
            Occurs when the value of a Cell's ToolTipText property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.CheckStateChanged">
            <summary>
            Occurs when the value of a Cell's CheckState property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.ThreeStateChanged">
            <summary>
            Occurs when the value of a Cell's ThreeState property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.ImageChanged">
            <summary>
            Occurs when the value of a Cell's Image property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEventType.ImageSizeModeChanged">
            <summary>
            Occurs when the value of a Cell's ImageSizeMode property changes
            </summary>
        </member>
        <member name="T:XPTable.Events.CellCheckBoxEventHandler">
            <summary>
            Represents the method that will handle the CellCheckChanged event of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.CellCheckBoxEventArgs">
            <summary>
            Provides data for the CellCheckChanged event of a Table
            </summary>
        </member>
        <member name="M:XPTable.Events.CellCheckBoxEventArgs.#ctor(XPTable.Models.Cell,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the CellButtonEventArgs class with 
            the specified Cell source, row index and column index
            </summary>
            <param name="source">The Cell that Raised the event</param>
            <param name="column">The Column index of the Cell</param>
            <param name="row">The Row index of the Cell</param>
        </member>
        <member name="T:XPTable.Win32.WindowMessage">
            <summary>
            The WindowMessage enemeration contains Windows messages that the 
            XPTable may be interested in listening for
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the 
            window being deactivated. If the windows use the same input queue, the message 
            is sent synchronously, first to the window procedure of the top-level window 
            being deactivated, then to the window procedure of the top-level window being 
            activated. If the windows use different input queues, the message is sent 
            asynchronously, so the window is activated immediately
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request 
            to paint a portion of an application's window. The message is sent when the 
            UpdateWindow or RedrawWindow function is called, or by the DispatchMessage 
            function when the application obtains a WM_PAINT message by using the GetMessage 
            or PeekMessage function. A window receives this message through its WindowProc 
            function
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application 
            should terminate
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different 
            application than the active window is about to be activated. The message is 
            sent to the application whose window is being activated and to the application 
            whose window is being deactivated
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window 
            and the user presses a mouse button. The parent window receives this message 
            only if the child window passes it to the DefWindowProc function
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to 
            be changed to indicate an active or inactive state
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved 
            within the nonclient area of the window. This message is posted to the window 
            that contains the cursor. If a window has captured the mouse, this message 
            is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse 
            button while the cursor is within the nonclient area of a window. This message 
            is posted to the window that contains the cursor. If a window has captured 
            the mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse 
            button while the cursor is within the nonclient area of a window. This message 
            is posted to the window that contains the cursor. If a window has captured 
            the mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the 
            left mouse button while the cursor is within the nonclient area of a window. 
            This message is posted to the window that contains the cursor. If a window 
            has captured the mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse 
            button while the cursor is within the nonclient area of a window. This message 
            is posted to the window that contains the cursor. If a window has captured 
            the mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse 
            button while the cursor is within the nonclient area of a window. This message 
            is posted to the window that contains the cursor. If a window has captured 
            the mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right 
            mouse button while the cursor is within the nonclient area of a window. This 
            message is posted to the window that contains the cursor. If a window has 
            captured the mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse 
            button while the cursor is within the nonclient area of a window. This message 
            is posted to the window that contains the cursor. If a window has captured the 
            mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse 
            button while the cursor is within the nonclient area of a window. This message 
            is posted to the window that contains the cursor. If a window has captured the 
            mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle 
            mouse button while the cursor is within the nonclient area of a window. This 
            message is posted to the window that contains the cursor. If a window has 
            captured the mouse, this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X 
            button while the cursor is in the nonclient area of a window. This message is posted 
            to the window that contains the cursor. If a window has captured the mouse, this 
            message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second 
            X button while the cursor is in the nonclient area of a window. This message is 
            posted to the window that contains the cursor. If a window has captured the mouse, 
            this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or 
            second X button while the cursor is in the nonclient area of a window. This message 
            is posted to the window that contains the cursor. If a window has captured the mouse, 
            this message is not posted
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a 
            nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT 
            key is not pressed
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a 
            nonsystem key is released. A nonsystem key is a key that is pressed when the ALT 
            key is not pressed, or a keyboard key that is pressed when a window has the 
            keyboard focus
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a 
            WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR 
            message contains the character code of the key that was pressed
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a 
            WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR 
            specifies a character code generated by a dead key. A dead key is a key that 
            generates a character, such as the umlaut (double-dot), that is combined with 
            another character to form a composite character. For example, the umlaut-O 
            character (Ö) is generated by typing the dead key for the umlaut character, 
            and then typing the O key
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when 
            the user presses the F10 key (which activates the menu bar) or holds down the 
            ALT key and then presses another key. It also occurs when no window currently 
            has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the 
            active window. The window that receives the message can distinguish between 
            these two contexts by checking the context code in the lParam parameter
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when 
            the user releases a key that was pressed while the ALT key was held down. It 
            also occurs when no window currently has the keyboard focus; in this case, the 
            WM_SYSKEYUP message is sent to the active window. The window that receives the 
            message can distinguish between these two contexts by checking the context code 
            in the lParam parameter
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse 
            is not captured, the message is posted to the window that contains the cursor. 
            Otherwise, the message is posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button 
            while the cursor is in the client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button 
            while the cursor is in the client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse 
            button while the cursor is in the client area of a window. If the mouse is not 
            captured, the message is posted to the window beneath the cursor. Otherwise, the 
            message is posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button 
            while the cursor is in the client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button 
            while the cursor is in the client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse 
            button while the cursor is in the client area of a window. If the mouse is not 
            captured, the message is posted to the window beneath the cursor. Otherwise, the 
            message is posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button 
            while the cursor is in the client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button 
            while the cursor is in the client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse 
            button while the cursor is in the client area of a window. If the mouse is not 
            captured, the message is posted to the window beneath the cursor. Otherwise, the 
            message is posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X 
            button while the cursor is in the client area of a window. If the mouse is not captured, 
            the message is posted to the window beneath the cursor. Otherwise, the message is 
            posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X 
            button while the cursor is in the client area of a window. If the mouse is not 
            captured, the message is posted to the window beneath the cursor. Otherwise, the 
            message is posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or 
            second X button while the cursor is in the client area of a window. If the mouse 
            is not captured, the message is posted to the window beneath the cursor. Otherwise, 
            the message is posted to the window that has captured the mouse
            </summary>
        </member>
        <member name="F:XPTable.Win32.WindowMessage.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is 
            rotated. The DefWindowProc function propagates the message to the window's parent. 
            There should be no internal forwarding of the message, since DefWindowProc propagates 
            it up the parent chain until it finds a window that processes it
            </summary>
        </member>
        <member name="T:XPTable.Themes.ListViewStates">
            <summary>
            Represents the different states of a ListView
            </summary>
        </member>
        <member name="F:XPTable.Themes.ListViewStates.Normal">
            <summary>
            The ListView is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.ListViewStates.Hot">
            <summary>
            The ListView is highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.ListViewStates.Selected">
            <summary>
            The ListView is selected
            </summary>
        </member>
        <member name="F:XPTable.Themes.ListViewStates.Disabled">
            <summary>
            The ListView is disabled
            </summary>
        </member>
        <member name="F:XPTable.Themes.ListViewStates.SelectedNotFocus">
            <summary>
            The ListView is selected but does not have focus
            </summary>
        </member>
        <member name="T:XPTable.Models.NumberColumn">
            <summary>
            Represents a Column whose Cells are displayed as a numbers
            </summary>
        </member>
        <member name="F:XPTable.Models.NumberColumn.increment">
            <summary>
            The value to increment or decrement a Cell when its up or down buttons are clicked
            </summary>
        </member>
        <member name="F:XPTable.Models.NumberColumn.maximum">
            <summary>
            The maximum value for a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.NumberColumn.minimum">
            <summary>
            The minimum value for a Cell
            </summary>
        </member>
        <member name="F:XPTable.Models.NumberColumn.upDownAlignment">
            <summary>
            The alignment of the up and down buttons in the Column
            </summary>
        </member>
        <member name="F:XPTable.Models.NumberColumn.showUpDownButtons">
            <summary>
            Specifies whether the up and down buttons should be drawn
            </summary>
        </member>
        <member name="M:XPTable.Models.NumberColumn.#ctor">
            <summary>
            Creates a new NumberColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.NumberColumn.#ctor(System.String)">
            <summary>
            Creates a new NumberColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.NumberColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new NumberColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.NumberColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new NumberColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.NumberColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new TextColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.NumberColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new TextColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.NumberColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new TextColumn with the specified header text, image, width 
            and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.NumberColumn.Init">
            <summary>
            Initializes the NumberColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.NumberColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.NumberColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.NumberColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.NumberColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.NumberColumn.ShouldSerializeMaximum">
            <summary>
            Specifies whether the Maximum property should be serialized at 
            design time
            </summary>
            <returns>true if the Maximum property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.NumberColumn.ShouldSerializeMinimum">
            <summary>
            Specifies whether the Minimum property should be serialized at 
            design time
            </summary>
            <returns>true if the Minimum property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.NumberColumn.ShouldSerializeIncrement">
            <summary>
            Specifies whether the Increment property should be serialized at 
            design time
            </summary>
            <returns>true if the Increment property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="P:XPTable.Models.NumberColumn.Maximum">
            <summary>
            Gets or sets the maximum value for Column's Cells
            </summary>
        </member>
        <member name="P:XPTable.Models.NumberColumn.Minimum">
            <summary>
            Gets or sets the minimum value for Column's Cells
            </summary>
        </member>
        <member name="P:XPTable.Models.NumberColumn.Increment">
            <summary>
            Gets or sets the value to increment or decrement a Cell when its up or down 
            buttons are clicked
            </summary>
        </member>
        <member name="P:XPTable.Models.NumberColumn.ShowUpDownButtons">
            <summary>
            Gets or sets whether the Column's Cells should draw up and down buttons
            </summary>
        </member>
        <member name="P:XPTable.Models.NumberColumn.UpDownAlign">
            <summary>
            Gets or sets the alignment of the up and down buttons in the Column
            </summary>
        </member>
        <member name="P:XPTable.Models.NumberColumn.Format">
            <summary>
            Gets or sets the string that specifies how a Column's Cell contents 
            are formatted
            </summary>
        </member>
        <member name="P:XPTable.Models.NumberColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="T:XPTable.Models.Design.CellCollectionEditor">
            <summary>
            Provides a user interface that can edit collections of Cells 
            at design time
            </summary>
        </member>
        <member name="F:XPTable.Models.Design.CellCollectionEditor.cells">
            <summary>
            The CellCollection being edited
            </summary>
        </member>
        <member name="M:XPTable.Models.Design.CellCollectionEditor.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the CellCollectionEditor class 
            using the specified collection type
            </summary>
            <param name="type">The type of the collection for this editor to edit</param>
        </member>
        <member name="M:XPTable.Models.Design.CellCollectionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the value of the specified object using the specified 
            service provider and context
            </summary>
            <param name="context">An ITypeDescriptorContext that can be 
            used to gain additional context information</param>
            <param name="isp">A service provider object through which 
            editing services can be obtained</param>
            <param name="value">The object to edit the value of</param>
            <returns>The new value of the object. If the value of the 
            object has not changed, this should return the same object 
            it was passed</returns>
        </member>
        <member name="M:XPTable.Models.Design.CellCollectionEditor.CreateInstance(System.Type)">
            <summary>
            Creates a new instance of the specified collection item type
            </summary>
            <param name="itemType">The type of item to create</param>
            <returns>A new instance of the specified object</returns>
        </member>
        <member name="M:XPTable.Models.Design.CellCollectionEditor.DestroyInstance(System.Object)">
            <summary>
            Destroys the specified instance of the object
            </summary>
            <param name="instance">The object to destroy</param>
        </member>
        <member name="T:XPTable.Events.CellEditEventHandler">
            <summary>
            Represents the methods that will handle the BeginEdit, StopEdit and 
            CancelEdit events of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.CellEditEventArgs">
            <summary>
            Provides data for the BeginEdit, StopEdit and CancelEdit events of a Table
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEditEventArgs.editor">
            <summary>
            The CellEditor used to edit the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEditEventArgs.table">
            <summary>
            The Table the Cell belongs to
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEditEventArgs.cellRect">
            <summary>
            The Cells bounding Rectangle
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEditEventArgs.cancel">
            <summary>
            Specifies whether the event should be cancelled
            </summary>
        </member>
        <member name="F:XPTable.Events.CellEditEventArgs.handled">
            <summary>
            Indicates whether the event was handled
            </summary>
        </member>
        <member name="M:XPTable.Events.CellEditEventArgs.#ctor(XPTable.Models.Cell,XPTable.Editors.ICellEditor,XPTable.Models.Table)">
            <summary>
            Initializes a new instance of the CellEventArgs class with 
            the specified Cell source, column index and row index
            </summary>
            <param name="source">The Cell that Raised the event</param>
            <param name="editor">The CellEditor used to edit the Cell</param>
            <param name="table">The Table that the Cell belongs to</param>
        </member>
        <member name="M:XPTable.Events.CellEditEventArgs.#ctor(XPTable.Models.Cell,XPTable.Editors.ICellEditor,XPTable.Models.Table,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the CellEventArgs class with 
            the specified Cell source, column index and row index
            </summary>
            <param name="source">The Cell that Raised the event</param>
            <param name="editor">The CellEditor used to edit the Cell</param>
            <param name="table">The Table that the Cell belongs to</param>
            <param name="row">The Column index of the Cell</param>
            <param name="column">The Row index of the Cell</param>
            <param name="cellRect"></param>
        </member>
        <member name="P:XPTable.Events.CellEditEventArgs.Editor">
            <summary>
            Gets the CellEditor used to edit the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEditEventArgs.Table">
            <summary>
            Gets the Table the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEditEventArgs.CellRect">
            <summary>
            Gets the Cells bounding Rectangle
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEditEventArgs.Cancel">
            <summary>
            Gets or sets whether the event should be cancelled
            </summary>
        </member>
        <member name="P:XPTable.Events.CellEditEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the event was handled
            </summary>
        </member>
        <member name="T:XPTable.Sorting.NumberComparer">
            <summary>
            An IComparer for sorting Cells that contain numbers
            </summary>
        </member>
        <member name="M:XPTable.Sorting.NumberComparer.#ctor(XPTable.Models.TableModel,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the NumberComparer class with the specified 
            TableModel, Column index and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.NumberComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="T:XPTable.Sorting.ImageComparer">
            <summary>
            An IComparer for sorting Cells that contain Images
            </summary>
        </member>
        <member name="M:XPTable.Sorting.ImageComparer.#ctor(XPTable.Models.TableModel,System.Int32,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the ImageComparer class with the specified 
            TableModel, Column index and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.ImageComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is less 
            than, equal to or greater than the other
            </summary>
            <param name="a">First object to compare</param>
            <param name="b">Second object to compare</param>
            <returns>-1 if a is less than b, 1 if a is greater than b, or 0 if a equals b</returns>
        </member>
        <member name="T:XPTable.Renderers.TextCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as strings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.TextCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the TextCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.TextCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="T:XPTable.Renderers.GradientHeaderRenderer">
            <summary>
            A HeaderRenderer that draws gradient Column headers
            </summary>
        </member>
        <member name="F:XPTable.Renderers.GradientHeaderRenderer.startColor">
            <summary>
            The start Color of the gradient
            </summary>
        </member>
        <member name="F:XPTable.Renderers.GradientHeaderRenderer.endColor">
            <summary>
            The ned Color of the gradient
            </summary>
        </member>
        <member name="F:XPTable.Renderers.GradientHeaderRenderer.pressedColor">
            <summary>
            The Color of the Column header when it is pressed
            </summary>
        </member>
        <member name="M:XPTable.Renderers.GradientHeaderRenderer.#ctor">
            <summary>
            Initializes a new instance of the GradientHeaderRenderer class 
            with default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.GradientHeaderRenderer.OnPaintBackground(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.GradientHeaderRenderer.OnPaint(XPTable.Events.PaintHeaderEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintHeaderEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Renderers.GradientHeaderRenderer.StartColor">
            <summary>
            Gets or sets the start Color of the gradient
            </summary>
        </member>
        <member name="P:XPTable.Renderers.GradientHeaderRenderer.EndColor">
            <summary>
            Gets or sets the end Color of the gradient
            </summary>
        </member>
        <member name="P:XPTable.Renderers.GradientHeaderRenderer.PressedColor">
            <summary>
            Gets or sets the Color of the Column header when it is pressed
            </summary>
        </member>
        <member name="T:XPTable.Renderers.DropDownRendererData">
            <summary>
            Contains information about the current state of a DropDownRenderer's button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.DropDownRendererData.buttonState">
            <summary>
            The current state of the button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.DropDownRendererData.clickX">
            <summary>
            The x coordinate of the last mouse click point
            </summary>
        </member>
        <member name="F:XPTable.Renderers.DropDownRendererData.clickY">
            <summary>
            The y coordinate of the last mouse click point
            </summary>
        </member>
        <member name="M:XPTable.Renderers.DropDownRendererData.#ctor">
            <summary>
            Initializes a new instance of the DropDownRendererData class
            </summary>
        </member>
        <member name="P:XPTable.Renderers.DropDownRendererData.ButtonState">
            <summary>
            Gets or sets the current state of the button
            </summary>
        </member>
        <member name="P:XPTable.Renderers.DropDownRendererData.ClickPoint">
            <summary>
            Gets or sets the Point that the mouse was last clicked in the button
            </summary>
        </member>
        <member name="T:XPTable.Models.TableModel">
            <summary>
            Represents a collection of Rows and Cells displayed in a Table.
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.DefaultRowHeight">
            <summary>
            The default height of a Row
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.MinimumRowHeight">
            <summary>
            The minimum height of a Row
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.MaximumRowHeight">
            <summary>
            The maximum height of a Row
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.rows">
            <summary>
            The collection of Rows's contained in the TableModel
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.table">
            <summary>
            The Table that the TableModel belongs to
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.selection">
            <summary>
            The currently selected Rows and Cells
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.rowHeight">
            <summary>
            The height of each Row in the TableModel
            </summary>
        </member>
        <member name="M:XPTable.Models.TableModel.#ctor">
            <summary>
            Initializes a new instance of the TableModel class with default settings
            </summary>
        </member>
        <member name="M:XPTable.Models.TableModel.#ctor(XPTable.Models.Row[])">
            <summary>
            Initializes a new instance of the TableModel class with an array of Row objects
            </summary>
            <param name="rows">An array of Row objects that represent the Rows 
            of the TableModel</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Init">
            <summary>
            Initialise default settings
            </summary>
        </member>
        <member name="M:XPTable.Models.TableModel.Dispose(System.Boolean)">
            <summary> 
            Releases the unmanaged resources used by the TableModel and optionally 
            releases the managed resources
            </summary>
        </member>
        <member name="M:XPTable.Models.TableModel.RowIndexAt(System.Int32)">
            <summary>
            Returns the index of the Row that lies on the specified position
            </summary>
            <param name="yPosition">The y-coordinate to check</param>
            <returns>The index of the Row at the specified position or -1 if 
            no Row is found</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.ShouldSerializeRowHeight">
            <summary>
            Specifies whether the RowHeight property should be serialized at 
            design time
            </summary>
            <returns>true if the RowHeight property should be serialized, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.UpdateRowIndicies(System.Int32)">
            <summary>
            Updates the Row's Index property so that it matches the Rows 
            position in the RowCollection
            </summary>
            <param name="start">The index to start updating from</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnRowAdded(XPTable.Events.TableModelEventArgs)">
            <summary>
            Raises the RowAdded event
            </summary>
            <param name="e">A TableModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnRowRemoved(XPTable.Events.TableModelEventArgs)">
            <summary>
            Raises the RowRemoved event
            </summary>
            <param name="e">A TableModelEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnSelectionChanged(XPTable.Events.SelectionEventArgs)">
            <summary>
            Raises the SelectionChanged event
            </summary>
            <param name="e">A SelectionEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnRowHeightChanged(System.EventArgs)">
            <summary>
            Raises the RowHeightChanged event
            </summary>
            <param name="e">An EventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnRowPropertyChanged(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the RowPropertyChanged event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnCellAdded(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellAdded event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnCellRemoved(XPTable.Events.RowEventArgs)">
            <summary>
            Raises the CellRemoved event
            </summary>
            <param name="e">A RowEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Models.TableModel.OnCellPropertyChanged(XPTable.Events.CellEventArgs)">
            <summary>
            Raises the CellPropertyChanged event
            </summary>
            <param name="e">A CellEventArgs that contains the event data</param>
        </member>
        <member name="E:XPTable.Models.TableModel.RowAdded">
            <summary>
            Occurs when a Row is added to the TableModel
            </summary>
        </member>
        <member name="E:XPTable.Models.TableModel.RowRemoved">
            <summary>
            Occurs when a Row is removed from the TableModel
            </summary>
        </member>
        <member name="E:XPTable.Models.TableModel.SelectionChanged">
            <summary>
            Occurs when the value of the TableModel Selection property changes
            </summary>
        </member>
        <member name="E:XPTable.Models.TableModel.RowHeightChanged">
            <summary>
            Occurs when the value of the RowHeight property changes
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.Item(System.Int32,System.Int32)">
            <summary>
            Gets the Cell located at the specified row index and column index
            </summary>
            <param name="row">The row index of the Cell</param>
            <param name="column">The column index of the Cell</param>
        </member>
        <member name="P:XPTable.Models.TableModel.Item(XPTable.Models.CellPos)">
            <summary>
            Gets the Cell located at the specified cell position
            </summary>
            <param name="cellPos">The position of the Cell</param>
        </member>
        <member name="P:XPTable.Models.TableModel.Rows">
            <summary>
            A TableModel.RowCollection representing the collection of 
            Rows contained within the TableModel
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.Selections">
            <summary>
            A TableModel.Selection representing the collection of selected
            Rows and Cells contained within the TableModel
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.RowHeight">
            <summary>
            Gets or sets the height of each Row in the TableModel
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.TotalRowHeight">
            <summary>
            Gets the total height of all the Rows in the TableModel
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.Table">
            <summary>
            Gets the Table the TableModel belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.InternalTable">
            <summary>
            Gets or sets the Table the TableModel belongs to
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.CanRaiseEvents">
            <summary>
            Gets whether the TableModel is able to raise events
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.Enabled">
            <summary>
            Gets whether the TableModel is enabled
            </summary>
        </member>
        <member name="T:XPTable.Models.TableModel.Selection">
            <summary>
            Represents the collection of selected Rows and Cells in a TableModel.
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.Selection.owner">
            <summary>
            The TableModel that owns the Selection
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.Selection.rows">
            <summary>
            The list of Rows that have selected Cells
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.Selection.shiftSelectStart">
            <summary>
            The starting cell of a selection that uses the shift key
            </summary>
        </member>
        <member name="F:XPTable.Models.TableModel.Selection.shiftSelectEnd">
            <summary>
            The ending cell of a selection that uses the shift key
            </summary>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.#ctor(XPTable.Models.TableModel)">
            <summary>
            Initializes a new instance of the TableModel.Selection class 
            that belongs to the specified TableModel
            </summary>
            <param name="owner">A TableModel representing the tableModel that owns 
            the Selection</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.SelectCell(System.Int32,System.Int32)">
            <summary>
            Replaces the currently selected Cells with the Cell at the specified 
            row and column indexes
            </summary>
            <param name="row">The row index of the Cell to be selected</param>
            <param name="column">The column index of the Cell to be selected</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.SelectCell(XPTable.Models.CellPos)">
            <summary>
            Replaces the currently selected Cells with the Cell at the specified CellPos
            </summary>
            <param name="cellPos">A CellPos thst specifies the row and column indicies of 
            the Cell to be selected</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.SelectCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Replaces the currently selected Cells with the Cells located between the specified 
            start and end row/column indicies
            </summary>
            <param name="startRow">The row index of the start Cell</param>
            <param name="startColumn">The column index of the start Cell</param>
            <param name="endRow">The row index of the end Cell</param>
            <param name="endColumn">The column index of the end Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.SelectCells(XPTable.Models.CellPos,XPTable.Models.CellPos)">
            <summary>
            Replaces the currently selected Cells with the Cells located between the specified 
            start and end CellPos
            </summary>
            <param name="start">A CellPos that specifies the start Cell</param>
            <param name="end">A CellPos that specifies the end Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.AddCell(System.Int32,System.Int32)">
            <summary>
            Adds the Cell at the specified row and column indicies to the current selection
            </summary>
            <param name="row">The row index of the Cell to add to the selection</param>
            <param name="column">The column index of the Cell to add to the selection</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.AddCell(XPTable.Models.CellPos)">
            <summary>
            Adds the Cell at the specified row and column indicies to the current selection
            </summary>
            <param name="cellPos">A CellPos that specifies the Cell to add to the selection</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.AddCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the Cells located between the specified start and end row/column indicies 
            to the current selection
            </summary>
            <param name="startRow">The row index of the start Cell</param>
            <param name="startColumn">The column index of the start Cell</param>
            <param name="endRow">The row index of the end Cell</param>
            <param name="endColumn">The column index of the end Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.AddCells(XPTable.Models.CellPos,XPTable.Models.CellPos)">
            <summary>
            Adds the Cells located between the specified start and end CellPos to the
            current selection
            </summary>
            <param name="start">A CellPos that specifies the start Cell</param>
            <param name="end">A CellPos that specifies the end Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.InternalAddCells(XPTable.Models.CellPos,XPTable.Models.CellPos)">
            <summary>
            Adds the Cells located between the specified start and end CellPos to the
            current selection without raising an event
            </summary>
            <param name="start">A CellPos that specifies the start Cell</param>
            <param name="end">A CellPos that specifies the end Cell</param>
            <returns>true if any Cells were added, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.InternalAddCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds the Cells located between the specified start and end row/column indicies 
            to the current selection without raising an event
            </summary>
            <param name="startRow">The row index of the start Cell</param>
            <param name="startColumn">The column index of the start Cell</param>
            <param name="endRow">The row index of the end Cell</param>
            <param name="endColumn">The column index of the end Cell</param>
            <returns>true if any Cells were added, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.AddShiftSelectedCell(System.Int32,System.Int32)">
            <summary>
            Adds the Cells between the last selection start Cell and the Cell at the 
            specified row/column indicies to the current selection.  Any Cells that are 
            between the last start and end Cells that are not in the new area are 
            removed from the current selection
            </summary>
            <param name="row">The row index of the shift selected Cell</param>
            <param name="column">The column index of the shift selected Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.AddShiftSelectedCell(XPTable.Models.CellPos)">
            <summary>
            Adds the Cells between the last selection start Cell and the Cell at the 
            specified CellPas to the current selection.  Any Cells that are 
            between the last start and end Cells that are not in the new area are 
            removed from the current selection
            </summary>
            <param name="cellPos">A CellPos that specifies the shift selected Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.Normalise(System.Int32@,System.Int32@)">
            <summary>
            Ensures that the first index is smaller than the second index, 
            performing a swap if necessary
            </summary>
            <param name="a">The first index</param>
            <param name="b">The second index</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.Clear">
            <summary>
            Removes all selected Rows and Cells from the selection
            </summary>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.InternalClear">
            <summary>
            Removes all selected Rows and Cells from the selection without raising an event
            </summary>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.RemoveCell(System.Int32,System.Int32)">
            <summary>
            Removes the Cell at the specified row and column indicies from the current selection
            </summary>
            <param name="row">The row index of the Cell to remove from the selection</param>
            <param name="column">The column index of the Cell to remove from the selection</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.RemoveCell(XPTable.Models.CellPos)">
            <summary>
            Removes the Cell at the specified row and column indicies from the current selection
            </summary>
            <param name="cellPos">A CellPos that specifies the Cell to remove from the selection</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.RemoveCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes the Cells located between the specified start and end row/column indicies 
            from the current selection
            </summary>
            <param name="startRow">The row index of the start Cell</param>
            <param name="startColumn">The column index of the start Cell</param>
            <param name="endRow">The row index of the end Cell</param>
            <param name="endColumn">The column index of the end Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.RemoveCells(XPTable.Models.CellPos,XPTable.Models.CellPos)">
            <summary>
            Removes the Cells located between the specified start and end CellPos from the
            current selection
            </summary>
            <param name="start">A CellPos that specifies the start Cell</param>
            <param name="end">A CellPos that specifies the end Cell</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.InternalRemoveCells(XPTable.Models.CellPos,XPTable.Models.CellPos)">
            <summary>
            Removes the Cells located between the specified start and end CellPos from the
            current selection without raising an event
            </summary>
            <param name="start">A CellPos that specifies the start Cell</param>
            <param name="end">A CellPos that specifies the end Cell</param>
            <returns>true if any Cells were added, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.InternalRemoveCells(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Removes the Cells located between the specified start and end row/column indicies 
            from the current selection without raising an event
            </summary>
            <param name="startRow">The row index of the start Cell</param>
            <param name="startColumn">The column index of the start Cell</param>
            <param name="endRow">The row index of the end Cell</param>
            <param name="endColumn">The column index of the end Cell</param>
            <returns>true if any Cells were added, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.RemoveRow(XPTable.Models.Row)">
            <summary>
            Removes the specified Row from the selection
            </summary>
            <param name="row">The Row to be removed from the selection</param>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.IsCellSelected(System.Int32,System.Int32)">
            <summary>
            Returns whether the Cell at the specified row and column indicies is 
            currently selected
            </summary>
            <param name="row">The row index of the specified Cell</param>
            <param name="column">The column index of the specified Cell</param>
            <returns>true if the Cell at the specified row and column indicies is 
            selected, false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.IsCellSelected(XPTable.Models.CellPos)">
            <summary>
            Returns whether the Cell at the specified CellPos is currently selected
            </summary>
            <param name="cellPos">A CellPos the represents the row and column indicies 
            of the Cell to check</param>
            <returns>true if the Cell at the specified CellPos is currently selected, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.IsRowSelected(System.Int32)">
            <summary>
            Returns whether the Row at the specified index in th TableModel is 
            currently selected
            </summary>
            <param name="index">The index of the Row to check</param>
            <returns>true if the Row at the specified index is currently selected, 
            false otherwise</returns>
        </member>
        <member name="M:XPTable.Models.TableModel.Selection.CalcSelectionBounds(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <returns></returns>
        </member>
        <member name="P:XPTable.Models.TableModel.Selection.SelectedItems">
            <summary>
            Gets an array that contains the currently selected Rows
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.Selection.SelectedIndicies">
            <summary>
            Gets an array that contains the indexes of the currently selected Rows
            </summary>
        </member>
        <member name="P:XPTable.Models.TableModel.Selection.SelectionBounds">
            <summary>
            Returns a Rectange that bounds the currently selected Rows
            </summary>
        </member>
        <member name="T:XPTable.Models.ColumnState">
            <summary>
            Specifies the state of a Column
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnState.Normal">
            <summary>
            Column is in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnState.Hot">
            <summary>
            Mouse is over the Column
            </summary>
        </member>
        <member name="F:XPTable.Models.ColumnState.Pressed">
            <summary>
            Column is being pressed
            </summary>
        </member>
        <member name="T:XPTable.Events.CellMouseEventHandler">
            <summary>
            Represents the method that will handle the CellMouseEnter, CellMouseLeave, 
            CellMouseDown, CellMouseUp, CellMouseMove and CellMouseHover events of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.CellMouseEventArgs">
            <summary>
            Provides data for the CellMouseEnter, CellMouseLeave, CellMouseDown, 
            CellMouseUp and CellMouseMove events of a Table
            </summary>
        </member>
        <member name="F:XPTable.Events.CellMouseEventArgs.cell">
            <summary>
            The Cell that raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.CellMouseEventArgs.table">
            <summary>
            The Table the Cell belongs to
            </summary>
        </member>
        <member name="F:XPTable.Events.CellMouseEventArgs.row">
            <summary>
            The Row index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.CellMouseEventArgs.column">
            <summary>
            The Column index of the Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.CellMouseEventArgs.cellRect">
            <summary>
            The Cells bounding rectangle
            </summary>
        </member>
        <member name="M:XPTable.Events.CellMouseEventArgs.#ctor(XPTable.Models.Cell,XPTable.Models.Table,XPTable.Models.CellPos,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the CellMouseEventArgs class with 
            the specified source Cell, table, row index, column index and 
            cell bounds
            </summary>
            <param name="cell">The Cell that Raised the event</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="cellPos"></param>
            <param name="cellRect">The Cell's bounding rectangle</param>
        </member>
        <member name="M:XPTable.Events.CellMouseEventArgs.#ctor(XPTable.Models.Cell,XPTable.Models.Table,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the CellMouseEventArgs class with 
            the specified source Cell, table, row index, column index and 
            cell bounds
            </summary>
            <param name="cell">The Cell that Raised the event</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="row">The Row index of the Cell</param>
            <param name="column">The Column index of the Cell</param>
            <param name="cellRect">The Cell's bounding rectangle</param>
        </member>
        <member name="M:XPTable.Events.CellMouseEventArgs.#ctor(XPTable.Models.Cell,XPTable.Models.Table,System.Int32,System.Int32,System.Drawing.Rectangle,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initializes a new instance of the CellMouseEventArgs class with 
            the specified source Cell, table, row index, column index, cell 
            bounds and MouseEventArgs
            </summary>
            <param name="cell">The Cell that Raised the event</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="row">The Row index of the Cell</param>
            <param name="column">The Column index of the Cell</param>
            <param name="cellRect">The Cell's bounding rectangle</param>
            <param name="mea">The MouseEventArgs that contains data about the 
            mouse event</param>
        </member>
        <member name="M:XPTable.Events.CellMouseEventArgs.#ctor(XPTable.Models.Cell,XPTable.Models.Table,XPTable.Models.CellPos,System.Drawing.Rectangle,System.Windows.Forms.MouseEventArgs)">
            <summary>
            Initializes a new instance of the CellMouseEventArgs class with 
            the specified source Cell, table, row index, column index and 
            cell bounds
            </summary>
            <param name="cell">The Cell that Raised the event</param>
            <param name="table">The Table the Cell belongs to</param>
            <param name="cellPos"></param>
            <param name="cellRect">The Cell's bounding rectangle</param>
            <param name="mea"></param>
        </member>
        <member name="P:XPTable.Events.CellMouseEventArgs.Cell">
            <summary>
            Gets the Cell that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.CellMouseEventArgs.Table">
            <summary>
            Gets the Table the Cell belongs to
            </summary>
        </member>
        <member name="P:XPTable.Events.CellMouseEventArgs.Row">
            <summary>
            Gets the Row index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.CellMouseEventArgs.Column">
            <summary>
            Gets the Column index of the Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.CellMouseEventArgs.CellRect">
            <summary>
            Gets the Cells bounding rectangle
            </summary>
        </member>
        <member name="P:XPTable.Events.CellMouseEventArgs.CellPos">
            <summary>
            Gets the position of the Cell
            </summary>
        </member>
        <member name="T:XPTable.Themes.TabParts">
            <summary>
            Represents the type of Buttons that can be drawn by the Windows XP theme engine
            </summary>
        </member>
        <member name="F:XPTable.Themes.TabParts.Body">
            <summary>
            The body of a TabPage
            </summary>
        </member>
        <member name="T:XPTable.Themes.RadioButtonStates">
            <summary>
            Represents the different states of a RadioButton
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.UncheckedNormal">
            <summary>
            The RadioButton is unchecked and in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.UncheckedHot">
            <summary>
            The RadioButton is unchecked and is currently highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.UncheckedPressed">
            <summary>
            The RadioButton is unchecked and is currently pressed by 
            the mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.UncheckedDisabled">
            <summary>
            The RadioButton is unchecked and is disabled
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.CheckedNormal">
            <summary>
            The RadioButton is checked and in its normal state
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.CheckedHot">
            <summary>
            The RadioButton is checked and is currently highlighted
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.CheckedPressed">
            <summary>
            The RadioButton is checked and is currently pressed by the 
            mouse
            </summary>
        </member>
        <member name="F:XPTable.Themes.RadioButtonStates.CheckedDisabled">
            <summary>
            The RadioButton is checked and is disabled
            </summary>
        </member>
        <member name="T:XPTable.Sorting.InsertionSorter">
            <summary>
            An InsertionSort implementation for sorting the Cells contained in a TableModel
            </summary>
        </member>
        <member name="M:XPTable.Sorting.InsertionSorter.#ctor(XPTable.Models.TableModel,System.Int32,System.Collections.IComparer,System.Windows.Forms.SortOrder)">
            <summary>
            Initializes a new instance of the InsertionSorter class with the specified 
            TableModel, Column index, IComparer and SortOrder
            </summary>
            <param name="tableModel">The TableModel that contains the data to be sorted</param>
            <param name="column">The index of the Column to be sorted</param>
            <param name="comparer">The IComparer used to sort the Column's Cells</param>
            <param name="sortOrder">Specifies how the Column is to be sorted</param>
        </member>
        <member name="M:XPTable.Sorting.InsertionSorter.Sort">
            <summary>
            Starts sorting the Cells in the TableModel
            </summary>
        </member>
        <member name="T:XPTable.Renderers.NumberCellRenderer">
            <summary>
            A base class for drawing Cells contents as numbers
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberCellRenderer.buttonWidth">
            <summary>
            The width of the ComboBox's dropdown button
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberCellRenderer.showUpDownButtons">
            <summary>
            Specifies whether the up and down buttons should be drawn
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberCellRenderer.upDownAlignment">
            <summary>
            The alignment of the up and down buttons in the Cell
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberCellRenderer.maximum">
            <summary>
            The maximum value for the Cell
            </summary>
        </member>
        <member name="F:XPTable.Renderers.NumberCellRenderer.minimum">
            <summary>
            The minimum value for the Cell
            </summary>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the NumberCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.CalcButtonBounds">
            <summary>
            Returns a Rectangle that specifies the size and location of the 
            up and down buttons
            </summary>
            <returns>A Rectangle that specifies the size and location of the 
            up and down buttons</returns>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.GetUpButtonBounds">
            <summary>
            Returns a Rectangle that specifies the size and location of the up button
            </summary>
            <returns>A Rectangle that specifies the size and location of the up button</returns>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.GetDownButtonBounds">
            <summary>
            Returns a Rectangle that specifies the size and location of the down button
            </summary>
            <returns>A Rectangle that specifies the size and location of the down button</returns>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.GetNumberRendererData(XPTable.Models.Cell)">
            <summary>
            Gets the NumberRendererData specific data used by the Renderer from 
            the specified Cell
            </summary>
            <param name="cell">The Cell to get the NumberRendererData data for</param>
            <returns>The NumberRendererData data for the specified Cell</returns>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.TableUsingNumericCellEditor(XPTable.Models.Table,XPTable.Models.CellPos)">
            <summary>
            Gets whether the specified Table is using a NumericCellEditor to edit the 
            Cell at the specified CellPos
            </summary>
            <param name="table">The Table to check</param>
            <param name="cellPos">A CellPos that represents the Cell to check</param>
            <returns>true if the specified Table is using a NumericCellEditor to edit the 
            Cell at the specified CellPos, false otherwise</returns>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.OnMouseLeave(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.OnMouseUp(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.OnMouseDown(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.OnMouseMove(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.OnPaintBackground(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintBackground event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.NumberCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Renderers.NumberCellRenderer.ButtonWidth">
            <summary>
            Gets or sets the width of the dropdown button
            </summary>
        </member>
        <member name="P:XPTable.Renderers.NumberCellRenderer.ShowUpDownButtons">
            <summary>
            Gets or sets whether the up and down buttons should be drawn
            </summary>
        </member>
        <member name="P:XPTable.Renderers.NumberCellRenderer.UpDownAlign">
            <summary>
            Gets or sets the alignment of the up and down buttons in the Cell
            </summary>
        </member>
        <member name="P:XPTable.Renderers.NumberCellRenderer.Maximum">
            <summary>
            Gets or sets the maximum value for the Cell
            </summary>
        </member>
        <member name="P:XPTable.Renderers.NumberCellRenderer.Minimum">
            <summary>
            Gets or sets the minimum value for the Cell
            </summary>
        </member>
        <member name="T:XPTable.Renderers.CheckBoxCellRenderer">
            <summary>
            A CellRenderer that draws Cell contents as CheckBoxes
            </summary>
        </member>
        <member name="F:XPTable.Renderers.CheckBoxCellRenderer.checkSize">
            <summary>
            The size of the checkbox
            </summary>
        </member>
        <member name="F:XPTable.Renderers.CheckBoxCellRenderer.drawText">
            <summary>
            Specifies whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.#ctor">
            <summary>
            Initializes a new instance of the CheckBoxCellRenderer class with 
            default settings
            </summary>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.CalcCheckRect(XPTable.Models.RowAlignment,XPTable.Models.ColumnAlignment)">
            <summary>
            Gets the Rectangle that specifies the Size and Location of 
            the check box contained in the current Cell
            </summary>
            <returns>A Rectangle that specifies the Size and Location of 
            the check box contained in the current Cell</returns>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.GetCheckBoxRendererData(XPTable.Models.Cell)">
            <summary>
            Gets the CheckBoxCellRenderer specific data used by the Renderer from 
            the specified Cell
            </summary>
            <param name="cell">The Cell to get the CheckBoxCellRenderer data for</param>
            <returns>The CheckBoxCellRenderer data for the specified Cell</returns>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.ValidateCheckState(XPTable.Models.Cell,XPTable.Renderers.CheckBoxRendererData)">
            <summary>
            Corrects any differences between the check state of the specified Cell 
            and the check state in its rendererData
            </summary>
            <param name="cell">The Cell to chech</param>
            <param name="rendererData">The CheckBoxRendererData to check</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnKeyDown(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyDown event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnKeyUp(XPTable.Events.CellKeyEventArgs)">
            <summary>
            Raises the KeyUp event
            </summary>
            <param name="e">A CellKeyEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnMouseLeave(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseLeave event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnMouseUp(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseUp event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnMouseDown(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseDown event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnMouseMove(XPTable.Events.CellMouseEventArgs)">
            <summary>
            Raises the MouseMove event
            </summary>
            <param name="e">A CellMouseEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnPaintCell(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the PaintCell event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="M:XPTable.Renderers.CheckBoxCellRenderer.OnPaint(XPTable.Events.PaintCellEventArgs)">
            <summary>
            Raises the Paint event
            </summary>
            <param name="e">A PaintCellEventArgs that contains the event data</param>
        </member>
        <member name="P:XPTable.Renderers.CheckBoxCellRenderer.CheckSize">
            <summary>
            Gets the size of the checkbox
            </summary>
        </member>
        <member name="P:XPTable.Renderers.CheckBoxCellRenderer.DrawText">
            <summary>
            Gets or sets whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="T:XPTable.Models.ImageColumn">
            <summary>
            Represents a Column whose Cells are displayed as an Image
            </summary>
        </member>
        <member name="F:XPTable.Models.ImageColumn.drawText">
            <summary>
            Specifies whether any text contained in the Cell should be drawn
            </summary>
        </member>
        <member name="M:XPTable.Models.ImageColumn.#ctor">
            <summary>
            Creates a new ImageColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ImageColumn.#ctor(System.String)">
            <summary>
            Creates a new ImageColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.ImageColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ImageColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ImageColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new ImageColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ImageColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new ImageColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.ImageColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new ImageColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ImageColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new ImageColumn with the specified header text, image, width 
            and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ImageColumn.Init">
            <summary>
            Initializes the ImageColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ImageColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ImageColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ImageColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.ImageColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="P:XPTable.Models.ImageColumn.DrawText">
            <summary>
            Gets or sets whether any text contained in the Column's Cells should be drawn
            </summary>
        </member>
        <member name="P:XPTable.Models.ImageColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="P:XPTable.Models.ImageColumn.Editable">
            <summary>
            Gets or sets a value indicating whether the Column's Cells contents 
            are able to be edited
            </summary>
        </member>
        <member name="T:XPTable.Models.CheckBoxColumnStyle">
            <summary>
            Determines the visual appearance of CheckBoxes in a CheckBoxColumn
            </summary>
        </member>
        <member name="F:XPTable.Models.CheckBoxColumnStyle.CheckBox">
            <summary>
            Indicates that CheckBoxes will look like CheckBoxes
            </summary>
        </member>
        <member name="F:XPTable.Models.CheckBoxColumnStyle.RadioButton">
            <summary>
            Indicates that CheckBoxes will look like RadioButtons
            </summary>
        </member>
        <member name="T:XPTable.Models.ButtonColumn">
            <summary>
            Represents a Column whose Cells are displayed as a Button
            </summary>
        </member>
        <member name="F:XPTable.Models.ButtonColumn.imageAlignment">
            <summary>
            Specifies the alignment of the Image displayed on the button
            </summary>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.#ctor">
            <summary>
            Creates a new ButtonColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.#ctor(System.String)">
            <summary>
            Creates a new ButtonColumn with the specified header text
            </summary>
            <param name="text">The text displayed in the column's header</param>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.#ctor(System.String,System.Int32)">
            <summary>
            Creates a new ButtonColumn with the specified header text and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Creates a new ButtonColumn with the specified header text, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.#ctor(System.String,System.Drawing.Image)">
            <summary>
            Creates a new ButtonColumn with the specified header text and image
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.#ctor(System.String,System.Drawing.Image,System.Int32)">
            <summary>
            Creates a new ButtonColumn with the specified header text, image and width
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.#ctor(System.String,System.Drawing.Image,System.Int32,System.Boolean)">
            <summary>
            Creates a new ButtonColumn with the specified header text, image, width and visibility
            </summary>
            <param name="text">The text displayed in the column's header</param>
            <param name="image">The image displayed on the column's header</param>
            <param name="width">The column's width</param>
            <param name="visible">Specifies whether the column is visible</param>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.Init">
            <summary>
            Initializes the ButtonColumn with default values
            </summary>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.GetDefaultRendererName">
            <summary>
            Gets a string that specifies the name of the Column's default CellRenderer
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.CreateDefaultRenderer">
            <summary>
            Gets the Column's default CellRenderer
            </summary>
            <returns>The Column's default CellRenderer</returns>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.GetDefaultEditorName">
            <summary>
            Gets a string that specifies the name of the Column's default CellEditor
            </summary>
            <returns>A string that specifies the name of the Column's default 
            CellEditor</returns>
        </member>
        <member name="M:XPTable.Models.ButtonColumn.CreateDefaultEditor">
            <summary>
            Gets the Column's default CellEditor
            </summary>
            <returns>The Column's default CellEditor</returns>
        </member>
        <member name="P:XPTable.Models.ButtonColumn.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the Column's Cell contents
            </summary>
        </member>
        <member name="P:XPTable.Models.ButtonColumn.ImageAlignment">
            <summary>
            Gets or sets the alignment of the Image displayed on the buttons
            </summary>
        </member>
        <member name="P:XPTable.Models.ButtonColumn.Editable">
            <summary>
            Gets or sets a value indicating whether the Column's Cells contents 
            are able to be edited
            </summary>
        </member>
        <member name="P:XPTable.Models.ButtonColumn.Selectable">
            <summary>
            Gets or sets a value indicating whether the Column's Cells can be selected
            </summary>
        </member>
        <member name="P:XPTable.Models.ButtonColumn.DefaultComparerType">
            <summary>
            Gets the Type of the Comparer used to compare the Column's Cells when 
            the Column is sorting
            </summary>
        </member>
        <member name="T:XPTable.Events.SelectionEventHandler">
            <summary>
            Represents the methods that will handle the SelectionChanged event of a TableModel
            </summary>
        </member>
        <member name="T:XPTable.Events.SelectionEventArgs">
            <summary>
            Provides data for a TableModel's SelectionChanged event
            </summary>
        </member>
        <member name="F:XPTable.Events.SelectionEventArgs.source">
            <summary>
            The TableModel that Raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.SelectionEventArgs.oldSelectedIndicies">
            <summary>
            The previously selected Row indicies
            </summary>
        </member>
        <member name="F:XPTable.Events.SelectionEventArgs.newSelectedIndicies">
            <summary>
            The newly selected Row indicies
            </summary>
        </member>
        <member name="F:XPTable.Events.SelectionEventArgs.oldSelectionBounds">
            <summary>
            The Rectangle that bounds the previously selected Rows
            </summary>
        </member>
        <member name="F:XPTable.Events.SelectionEventArgs.newSelectionBounds">
            <summary>
            The Rectangle that bounds the newly selected Rows
            </summary>
        </member>
        <member name="M:XPTable.Events.SelectionEventArgs.#ctor(XPTable.Models.TableModel,System.Int32[],System.Int32[])">
            <summary>
            Initializes a new instance of the SelectionEventArgs class with 
            the specified TableModel source, old selected indicies and new 
            selected indicies
            </summary>
            <param name="source">The TableModel that originated the event</param>
            <param name="oldSelectedIndicies">An array of the previously selected Rows</param>
            <param name="newSelectedIndicies">An array of the newly selected Rows</param>
        </member>
        <member name="P:XPTable.Events.SelectionEventArgs.TableModel">
            <summary>
            Gets the TableModel that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.SelectionEventArgs.OldSelectedIndicies">
            <summary>
            Gets the previously selected Row indicies
            </summary>
        </member>
        <member name="P:XPTable.Events.SelectionEventArgs.NewSelectedIndicies">
            <summary>
            Gets the newly selected Row indicies
            </summary>
        </member>
        <member name="P:XPTable.Events.SelectionEventArgs.OldSelectionBounds">
            <summary>
            Gets the Rectangle that bounds the previously selected Rows
            </summary>
        </member>
        <member name="P:XPTable.Events.SelectionEventArgs.NewSelectionBounds">
            <summary>
            Gets the Rectangle that bounds the newly selected Rows
            </summary>
        </member>
        <member name="T:XPTable.Events.PaintHeaderEventHandler">
            <summary>
            Represents the method that will handle the PaintHeader events of a Table
            </summary>
        </member>
        <member name="T:XPTable.Events.PaintHeaderEventArgs">
            <summary>
            Provides data for the PaintHeader event
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintHeaderEventArgs.column">
            <summary>
            The Column to be painted
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintHeaderEventArgs.table">
            <summary>
            The Table the Column's ColumnModel belongs to
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintHeaderEventArgs.columnIndex">
            <summary>
            The index of the Column in the Table's ColumnModel
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintHeaderEventArgs.headerStyle">
            <summary>
            The style of the Column header
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintHeaderEventArgs.headerRect">
            <summary>
            The rectangle in which to paint
            </summary>
        </member>
        <member name="F:XPTable.Events.PaintHeaderEventArgs.handled">
            <summary>
            Indicates whether the user has done the paining for us
            </summary>
        </member>
        <member name="M:XPTable.Events.PaintHeaderEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the PaintHeaderEventArgs class with 
            the specified graphics and clipping rectangle
            </summary>
            <param name="g">The Graphics used to paint the Column header</param>
            <param name="headerRect">The Rectangle that represents the rectangle 
            in which to paint</param>
        </member>
        <member name="M:XPTable.Events.PaintHeaderEventArgs.#ctor(System.Drawing.Graphics,XPTable.Models.Column,XPTable.Models.Table,System.Int32,System.Windows.Forms.ColumnHeaderStyle,System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the PaintHeaderEventArgs class with 
            the specified graphics, column, table, column index, header style 
            and clipping rectangle
            </summary>
            <param name="g">The Graphics used to paint the Column header</param>
            <param name="column">The Column to be painted</param>
            <param name="table">The Table the Column's ColumnModel belongs to</param>
            <param name="columnIndex">The index of the Column in the Table's ColumnModel</param>
            <param name="headerStyle">The style of the Column's header</param>
            <param name="headerRect">The Rectangle that represents the rectangle 
            in which to paint</param>
        </member>
        <member name="M:XPTable.Events.PaintHeaderEventArgs.SetColumn(XPTable.Models.Column)">
            <summary>
            
            </summary>
            <param name="column"></param>
        </member>
        <member name="M:XPTable.Events.PaintHeaderEventArgs.SetTable(XPTable.Models.Table)">
            <summary>
            
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:XPTable.Events.PaintHeaderEventArgs.SetColumnIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="columnIndex"></param>
        </member>
        <member name="M:XPTable.Events.PaintHeaderEventArgs.SetHeaderStyle(System.Windows.Forms.ColumnHeaderStyle)">
            <summary>
            
            </summary>
            <param name="headerStyle"></param>
        </member>
        <member name="M:XPTable.Events.PaintHeaderEventArgs.SetHeaderRect(System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="headerRect"></param>
        </member>
        <member name="P:XPTable.Events.PaintHeaderEventArgs.Column">
            <summary>
            Gets the Column to be painted
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintHeaderEventArgs.Table">
            <summary>
            Gets the Table the Column's ColumnModel belongs to
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintHeaderEventArgs.ColumnIndex">
            <summary>
            Gets the index of the Column in the Table's ColumnModel
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintHeaderEventArgs.HeaderStyle">
            <summary>
            Gets the style of the Column's header
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintHeaderEventArgs.HeaderRect">
            <summary>
            Gets the column header's bounding rectangle
            </summary>
        </member>
        <member name="P:XPTable.Events.PaintHeaderEventArgs.Handled">
            <summary>
            Gets or sets a value indicating whether the BeforePaintHeader 
            event was handled
            </summary>
        </member>
        <member name="T:XPTable.Win32.AsciiChars">
            <summary>
            Represents the Ascii character values.
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Null">
            <summary>
            Null character (NUL)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.StartOfHeading">
            <summary>
            Start of heading character (SOH)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.StartOfText">
            <summary>
            Start of text character (STX)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.EndOfText">
            <summary>
            End of text character (ETX)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.EndOfTransmission">
            <summary>
            End of transmission character (EOT)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Enquiry">
            <summary>
            Enquiry character (ENQ)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Acknowledge">
            <summary>
            Acknowledge character (ACK)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Bell">
            <summary>
            Bell character (BEL)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Backspace">
            <summary>
            Backspace character (BS)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.HorizontalTab">
            <summary>
            Horizontal tab character (HT)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LineFeed">
            <summary>
            Line Feed character (LF)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.VerticalTab">
            <summary>
            Vertical tab character (VT)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.FormFeed">
            <summary>
            Form Feed character (FF)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.CarriageReturn">
            <summary>
            Carriage Return character (CR)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ShiftOut">
            <summary>
            Shift Out character (SO)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ShiftIn">
            <summary>
            Shift In character (SI)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.DataLinkEscape">
            <summary>
            Data link escape character (DLE)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.XON">
            <summary>
            XON character (DC1)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.DeviceControl2">
            <summary>
            Device control 2 character (DC2)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.XOFF">
            <summary>
            XOFF character (DC3)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.DeviceControl4">
            <summary>
            Device control 4 character (DC4)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.NegativeAcknowledge">
            <summary>
            Negative acknowledge character (NAK)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.SynchronousIdle">
            <summary>
            Synchronous idle character (SYN)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.EndTransmissionBlock">
            <summary>
            End transmission block character (ETB)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.CancelLine">
            <summary>
            Cancel line character (CAN)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.EndOfMedium">
            <summary>
            End of medium character (EM)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Substitute">
            <summary>
            Substitute character (SUB)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Escape">
            <summary>
            Escape character (ESC)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.FileSeparator">
            <summary>
            File separator character (FS)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.GroupSeparator">
            <summary>
            Group separator character (GS)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.RecordSeparator">
            <summary>
            Record separator character (RS)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UnitSeparator">
            <summary>
            Unit separator character (US)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Space">
            <summary>
            Space character (SP)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ExclamationMark">
            <summary>
            Exclamation mark character (!)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.QuotationMark">
            <summary>
            Quotation mark character (")
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.CrossHatch">
            <summary>
            Cross hatch character (#)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.DollarSign">
            <summary>
            Dollar sign character ($)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.PercentSign">
            <summary>
            Percent sign character (%)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Ampersand">
            <summary>
            Ampersand character (&amp;)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ClosingSingleQuote">
            <summary>
            Closing single quote or Apostrophe character (')
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.OpeningParentheses">
            <summary>
            Opening parentheses character (()
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ClosingParentheses">
            <summary>
            Closing parentheses character ())
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Asterisk">
            <summary>
            Asterisk character (*)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Plus">
            <summary>
            Plus character (+)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Comma">
            <summary>
            Comma character (,)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Hyphen">
            <summary>
            Hyphen character (-)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.FullStop">
            <summary>
            FullStop character (.)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ForwardSlash">
            <summary>
            Forward slash character (/)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Zero">
            <summary>
            Zero (0)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.One">
            <summary>
            One character (1)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Two">
            <summary>
            Two (2)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Three">
            <summary>
            Three (3)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Four">
            <summary>
            Four (4)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Five">
            <summary>
            Five (5)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Six">
            <summary>
            Six (6)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Seven">
            <summary>
            Seven (7)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Eight">
            <summary>
            Eight (8)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Nine">
            <summary>
            Nine (9)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Colon">
            <summary>
            Colon character (:)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Semicolon">
            <summary>
            Semicolon character (;)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LessThan">
            <summary>
            Less than character (&lt;)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.EqualsSign">
            <summary>
            Equals character (=)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.GreaterThan">
            <summary>
            Greater than character (&gt;)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.QuestionMark">
            <summary>
            Question mark character (?)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.AtSign">
            <summary>
            At-sign character (@)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseA">
            <summary>
            Uppercase A
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseB">
            <summary>
            Uppercase B
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseC">
            <summary>
            Uppercase C
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseD">
            <summary>
            Uppercase D
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseE">
            <summary>
            Uppercase E
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseF">
            <summary>
            Uppercase F
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseG">
            <summary>
            Uppercase G
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseH">
            <summary>
            Uppercase H
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseI">
            <summary>
            Uppercase I
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseJ">
            <summary>
            Uppercase J
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseK">
            <summary>
            Uppercase K
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseL">
            <summary>
            Uppercase L
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseM">
            <summary>
            Uppercase M
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseN">
            <summary>
            Uppercase N
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseO">
            <summary>
            Uppercase O
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseP">
            <summary>
            Uppercase P
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseQ">
            <summary>
            Uppercase Q
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseR">
            <summary>
            Uppercase R
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseS">
            <summary>
            Uppercase S
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseT">
            <summary>
            Uppercase T
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseU">
            <summary>
            Uppercase U
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseV">
            <summary>
            Uppercase V
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseW">
            <summary>
            Uppercase W
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseX">
            <summary>
            Uppercase X
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseY">
            <summary>
            Uppercase Y
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.UppercaseZ">
            <summary>
            Uppercase Z
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.OpeningSquareBracket">
            <summary>
            Opening square bracket character ([)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Backslash">
            <summary>
            Backslash character (\)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ClosingSquareBracket">
            <summary>
            Closing square bracket character (])
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Caret">
            <summary>
            Caret (Circumflex) character (^)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Underscore">
            <summary>
            Underscore character (_)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.OpeningSingleQuote">
            <summary>
            Opening single quote character (`)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseA">
            <summary>
            Lowercase a
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseB">
            <summary>
            Lowercase b
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseC">
            <summary>
            Lowercase c
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseD">
            <summary>
            Lowercase d
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseE">
            <summary>
            Lowercase e
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseF">
            <summary>
            Lowercase f
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseG">
            <summary>
            Lowercase g
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseH">
            <summary>
            Lowercase h
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseI">
            <summary>
            Lowercase i
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseJ">
            <summary>
            Lowercase j
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseK">
            <summary>
            Lowercase k
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseL">
            <summary>
            Lowercase l
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseM">
            <summary>
            Lowercase m
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseN">
            <summary>
            Lowercase n
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseO">
            <summary>
            Lowercase o
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseP">
            <summary>
            Lowercase p
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseQ">
            <summary>
            Lowercase q
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseR">
            <summary>
            Lowercase r
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseS">
            <summary>
            Lowercase s
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseT">
            <summary>
            Lowercase t
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseU">
            <summary>
            Lowercase u
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseV">
            <summary>
            Lowercase v
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseW">
            <summary>
            Lowercase w
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseX">
            <summary>
            Lowercase x
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseY">
            <summary>
            Lowercase y
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.LowercaseZ">
            <summary>
            Lowercase z
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.OpeningCurlyBrace">
            <summary>
            Opening curly brace character ({)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.VerticalLine">
            <summary>
            Vertical line character (|)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.ClosingCurlyBrace">
            <summary>
            Closing curly brace character (})
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Tilde">
            <summary>
            Tilde character (~)
            </summary>
        </member>
        <member name="F:XPTable.Win32.AsciiChars.Delete">
            <summary>
            Delete character (DEL)
            </summary>
        </member>
        <member name="T:XPTable.Models.CellPadding">
            <summary>
            Specifies the amount of space between the border and any contained 
            items along each edge of an object
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPadding.Empty">
            <summary>
            Represents a Padding structure with its properties 
            left uninitialized
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPadding.left">
            <summary>
            The width of the left padding
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPadding.right">
            <summary>
            The width of the right padding
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPadding.top">
            <summary>
            The width of the top padding
            </summary>
        </member>
        <member name="F:XPTable.Models.CellPadding.bottom">
            <summary>
            The width of the bottom padding
            </summary>
        </member>
        <member name="M:XPTable.Models.CellPadding.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the Padding class
            </summary>
            <param name="left">The width of the left padding value</param>
            <param name="top">The height of top padding value</param>
            <param name="right">The width of the right padding value</param>
            <param name="bottom">The height of bottom padding value</param>
        </member>
        <member name="M:XPTable.Models.CellPadding.Equals(System.Object)">
            <summary>
            Tests whether obj is a CellPadding structure with the same values as 
            this Padding structure
            </summary>
            <param name="obj">The Object to test</param>
            <returns>This method returns true if obj is a CellPadding structure 
            and its Left, Top, Right, and Bottom properties are equal to 
            the corresponding properties of this CellPadding structure; 
            otherwise, false</returns>
        </member>
        <member name="M:XPTable.Models.CellPadding.GetHashCode">
            <summary>
            Returns the hash code for this CellPadding structure
            </summary>
            <returns>An integer that represents the hashcode for this 
            padding</returns>
        </member>
        <member name="M:XPTable.Models.CellPadding.op_Equality(XPTable.Models.CellPadding,XPTable.Models.CellPadding)">
            <summary>
            Tests whether two CellPadding structures have equal Left, Top, 
            Right, and Bottom properties
            </summary>
            <param name="left">The CellPadding structure that is to the left 
            of the equality operator</param>
            <param name="right">The CellPadding structure that is to the right 
            of the equality operator</param>
            <returns>This operator returns true if the two CellPadding structures 
            have equal Left, Top, Right, and Bottom properties</returns>
        </member>
        <member name="M:XPTable.Models.CellPadding.op_Inequality(XPTable.Models.CellPadding,XPTable.Models.CellPadding)">
            <summary>
            Tests whether two CellPadding structures differ in their Left, Top, 
            Right, and Bottom properties
            </summary>
            <param name="left">The CellPadding structure that is to the left 
            of the equality operator</param>
            <param name="right">The CellPadding structure that is to the right 
            of the equality operator</param>
            <returns>This operator returns true if any of the Left, Top, Right, 
            and Bottom properties of the two CellPadding structures are unequal; 
            otherwise false</returns>
        </member>
        <member name="P:XPTable.Models.CellPadding.Left">
            <summary>
            Gets or sets the width of the left padding value
            </summary>
        </member>
        <member name="P:XPTable.Models.CellPadding.Right">
            <summary>
            Gets or sets the width of the right padding value
            </summary>
        </member>
        <member name="P:XPTable.Models.CellPadding.Top">
            <summary>
            Gets or sets the height of the top padding value
            </summary>
        </member>
        <member name="P:XPTable.Models.CellPadding.Bottom">
            <summary>
            Gets or sets the height of the bottom padding value
            </summary>
        </member>
        <member name="P:XPTable.Models.CellPadding.IsEmpty">
            <summary>
            Tests whether all numeric properties of this CellPadding have 
            values of zero
            </summary>
        </member>
        <member name="T:XPTable.Models.CellPaddingConverter">
            <summary>
            A custom TypeConverter used to help convert CellPadding objects from 
            one Type to another
            </summary>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the 
            given type to the type of this converter, using the specified context
            </summary>
            <param name="context">An ITypeDescriptorContext that provides 
            a format context</param>
            <param name="sourceType">A Type that represents the type you 
            want to convert from</param>
            <returns>true if this converter can perform the conversion; 
            otherwise, false</returns>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the 
            specified type, using the specified context
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a 
            format context</param>
            <param name="destinationType">A Type that represents the type you 
            want to convert to</param>
            <returns>true if this converter can perform the conversion; 
            otherwise, false</returns>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using 
            the specified context and culture information
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a 
            format context</param>
            <param name="culture">The CultureInfo to use as the current culture</param>
            <param name="value">The Object to convert</param>
            <returns>An Object that represents the converted value</returns>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using 
            the specified context and culture information
            </summary>
            <param name="context">An ITypeDescriptorContext that provides 
            a format context</param>
            <param name="culture">A CultureInfo object. If a null reference 
            is passed, the current culture is assumed</param>
            <param name="value">The Object to convert</param>
            <param name="destinationType">The Type to convert the value 
            parameter to</param>
            <returns>An Object that represents the converted value</returns>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
            <summary>
            Creates an instance of the Type that this TypeConverter is associated 
            with, using the specified context, given a set of property values for 
            the object
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format 
            context</param>
            <param name="propertyValues">An IDictionary of new property values</param>
            <returns>An Object representing the given IDictionary, or a null 
            reference if the object cannot be created</returns>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether changing a value on this object requires a call to 
            CreateInstance to create a new value, using the specified context
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a 
            format context</param>
            <returns>true if changing a property on this object requires a call 
            to CreateInstance to create a new value; otherwise, false</returns>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
            <summary>
            Returns a collection of properties for the type of array specified 
            by the value parameter, using the specified context and attributes
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format 
            context</param>
            <param name="value">An Object that specifies the type of array for 
            which to get properties</param>
            <param name="attributes">An array of type Attribute that is used as 
            a filter</param>
            <returns>A PropertyDescriptorCollection with the properties that are 
            exposed for this data type, or a null reference if there are no 
            properties</returns>
        </member>
        <member name="M:XPTable.Models.CellPaddingConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Returns whether this object supports properties, using the specified context
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context</param>
            <returns>true if GetProperties should be called to find the properties of this 
            object; otherwise, false</returns>
        </member>
        <member name="T:XPTable.Events.RowEventHandler">
            <summary>
            Represents the methods that will handle the PropertyChanged, CellAdded and 
            CellRemoved events of a Row
            </summary>
        </member>
        <member name="T:XPTable.Events.RowEventArgs">
            <summary>
            Provides data for a Row's PropertyChanged, CellAdded 
            and CellRemoved events
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventArgs.source">
            <summary>
            The Row that Raised the event
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventArgs.rowIndex">
            <summary>
            The index of the Row
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventArgs.cell">
            <summary>
            The affected Cell
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventArgs.cellToIndex">
            <summary>
            The start index of the affected Cell(s)
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventArgs.cellFromIndex">
            <summary>
            The end index of the affected Cell(s)
            </summary>
        </member>
        <member name="F:XPTable.Events.RowEventArgs.eventType">
            <summary>
            The type of event
            </summary>
        </member>
        <member name="M:XPTable.Events.RowEventArgs.#ctor(XPTable.Models.Row,XPTable.Events.RowEventType)">
            <summary>
            Initializes a new instance of the RowEventArgs class with 
            the specified Row source, row index, start index, end index 
            and affected Cell
            </summary>
            <param name="source">The Row that originated the event</param>
            <param name="eventType">The type of event</param>
        </member>
        <member name="M:XPTable.Events.RowEventArgs.#ctor(XPTable.Models.Row,XPTable.Models.Cell,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the RowEventArgs class with 
            the specified Row source, row index, start index, end index 
            and affected Cell
            </summary>
            <param name="source">The Row that originated the event</param>
            <param name="cell">The affected Cell</param>
            <param name="cellFromIndex">The start index of the affected Cell(s)</param>
            <param name="cellToIndex">The end index of the affected Cell(s)</param>
        </member>
        <member name="M:XPTable.Events.RowEventArgs.#ctor(XPTable.Models.Row,System.Int32,XPTable.Models.Cell,System.Int32,System.Int32,XPTable.Events.RowEventType)">
            <summary>
            Initializes a new instance of the RowEventArgs class with 
            the specified Row source, row index, start index, end index 
            and affected Cell
            </summary>
            <param name="source">The Row that originated the event</param>
            <param name="rowIndex">The index of the Row</param>
            <param name="cell">The affected Cell</param>
            <param name="cellFromIndex">The start index of the affected Cell(s)</param>
            <param name="cellToIndex">The end index of the affected Cell(s)</param>
            <param name="eventType">The type of event</param>
        </member>
        <member name="M:XPTable.Events.RowEventArgs.SetRowIndex(System.Int32)">
            <summary>
            
            </summary>
            <param name="rowIndex"></param>
        </member>
        <member name="P:XPTable.Events.RowEventArgs.Row">
            <summary>
            Gets the Row that Raised the event
            </summary>
        </member>
        <member name="P:XPTable.Events.RowEventArgs.Index">
            <summary>
            Gets the index of the Row
            </summary>
        </member>
        <member name="P:XPTable.Events.RowEventArgs.Cell">
            <summary>
            Gets the affected Cell
            </summary>
        </member>
        <member name="P:XPTable.Events.RowEventArgs.CellFromIndex">
            <summary>
            Gets the start index of the affected Cell(s)
            </summary>
        </member>
        <member name="P:XPTable.Events.RowEventArgs.CellToIndex">
            <summary>
            Gets the end index of the affected Cell(s)
            </summary>
        </member>
        <member name="P:XPTable.Events.RowEventArgs.EventType">
            <summary>
            Gets the type of event
            </summary>
        </member>
        <member name="T:XPTable.Events.ColumnEventType">
            <summary>
            Specifies the type of event generated when the value of a 
            Column's property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.Unknown">
            <summary>
            Occurs when the Column's property change type is unknown
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.TextChanged">
            <summary>
            Occurs when the value of a Column's Text property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.AlignmentChanged">
            <summary>
            Occurs when the value of a Column's Alignment property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.HeaderAlignmentChanged">
            <summary>
            Occurs when the value of a Column's HeaderAlignment property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.WidthChanged">
            <summary>
            Occurs when the value of a Column's Width property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.VisibleChanged">
            <summary>
            Occurs when the value of a Column's Visible property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.ImageChanged">
            <summary>
            Occurs when the value of a Column's Image property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.FormatChanged">
            <summary>
            Occurs when the value of a Column's Format property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.StateChanged">
            <summary>
            Occurs when the value of a Column's ColumnState property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.RendererChanged">
            <summary>
            Occurs when the value of a Column's Renderer property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.EditorChanged">
            <summary>
            Occurs when the value of a Column's Editor property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.ComparerChanged">
            <summary>
            Occurs when the value of a Column's Comparer property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.EnabledChanged">
            <summary>
            Occurs when the value of a Column's Enabled property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.EditableChanged">
            <summary>
            Occurs when the value of a Column's Editable property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.SelectableChanged">
            <summary>
            Occurs when the value of a Column's Selectable property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.SortableChanged">
            <summary>
            Occurs when the value of a Column's Sortable property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.SortOrderChanged">
            <summary>
            Occurs when the value of a Column's SortOrder property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.ToolTipTextChanged">
            <summary>
            Occurs when the value of a Column's ToolTipText property changes
            </summary>
        </member>
        <member name="F:XPTable.Events.ColumnEventType.Sorting">
            <summary>
            Occurs when a Column is being sorted
            </summary>
        </member>
    </members>
</doc>
